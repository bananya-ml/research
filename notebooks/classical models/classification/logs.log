2024-05-20 12:27:16,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:27:16,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:27:16,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:27:16,621:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:28:07,803:INFO:PyCaret ClassificationExperiment
2024-05-20 12:28:07,803:INFO:Logging name: clf-default-name
2024-05-20 12:28:07,805:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:28:07,805:INFO:version 3.3.2
2024-05-20 12:28:07,805:INFO:Initializing setup()
2024-05-20 12:28:07,805:INFO:self.USI: da31
2024-05-20 12:28:07,805:INFO:self._variable_keys: {'exp_name_log', 'seed', 'is_multiclass', 'fold_shuffle_param', 'y', 'fix_imbalance', 'log_plots_param', '_ml_usecase', 'fold_generator', 'fold_groups_param', 'pipeline', 'USI', 'y_test', 'X_train', 'html_param', 'memory', 'target_param', 'gpu_n_jobs_param', 'idx', 'y_train', 'logging_param', 'exp_id', 'gpu_param', '_available_plots', 'n_jobs_param', 'X', 'data', 'X_test'}
2024-05-20 12:28:07,805:INFO:Checking environment
2024-05-20 12:28:07,805:INFO:python_version: 3.10.0
2024-05-20 12:28:07,805:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:28:07,805:INFO:machine: AMD64
2024-05-20 12:28:07,805:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:28:07,817:INFO:Memory: svmem(total=16993001472, available=5899915264, percent=65.3, used=11093086208, free=5899915264)
2024-05-20 12:28:07,817:INFO:Physical Core: 6
2024-05-20 12:28:07,818:INFO:Logical Core: 12
2024-05-20 12:28:07,818:INFO:Checking libraries
2024-05-20 12:28:07,818:INFO:System:
2024-05-20 12:28:07,818:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:28:07,818:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:28:07,818:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:28:07,818:INFO:PyCaret required dependencies:
2024-05-20 12:28:07,823:INFO:                 pip: 24.0
2024-05-20 12:28:07,823:INFO:          setuptools: 57.4.0
2024-05-20 12:28:07,823:INFO:             pycaret: 3.3.2
2024-05-20 12:28:07,823:INFO:             IPython: 8.23.0
2024-05-20 12:28:07,824:INFO:          ipywidgets: 8.1.2
2024-05-20 12:28:07,824:INFO:                tqdm: 4.66.2
2024-05-20 12:28:07,824:INFO:               numpy: 1.26.3
2024-05-20 12:28:07,824:INFO:              pandas: 2.1.4
2024-05-20 12:28:07,824:INFO:              jinja2: 3.1.2
2024-05-20 12:28:07,824:INFO:               scipy: 1.11.4
2024-05-20 12:28:07,824:INFO:              joblib: 1.3.2
2024-05-20 12:28:07,824:INFO:             sklearn: 1.4.2
2024-05-20 12:28:07,825:INFO:                pyod: 1.1.3
2024-05-20 12:28:07,825:INFO:            imblearn: 0.12.2
2024-05-20 12:28:07,825:INFO:   category_encoders: 2.6.3
2024-05-20 12:28:07,825:INFO:            lightgbm: 4.3.0
2024-05-20 12:28:07,825:INFO:               numba: 0.59.1
2024-05-20 12:28:07,825:INFO:            requests: 2.31.0
2024-05-20 12:28:07,825:INFO:          matplotlib: 3.7.5
2024-05-20 12:28:07,825:INFO:          scikitplot: 0.3.7
2024-05-20 12:28:07,825:INFO:         yellowbrick: 1.5
2024-05-20 12:28:07,825:INFO:              plotly: 5.22.0
2024-05-20 12:28:07,825:INFO:    plotly-resampler: Not installed
2024-05-20 12:28:07,826:INFO:             kaleido: 0.2.1
2024-05-20 12:28:07,826:INFO:           schemdraw: 0.15
2024-05-20 12:28:07,826:INFO:         statsmodels: 0.14.2
2024-05-20 12:28:07,826:INFO:              sktime: 0.26.0
2024-05-20 12:28:07,826:INFO:               tbats: 1.1.3
2024-05-20 12:28:07,826:INFO:            pmdarima: 2.0.4
2024-05-20 12:28:07,826:INFO:              psutil: 5.9.8
2024-05-20 12:28:07,826:INFO:          markupsafe: 2.1.3
2024-05-20 12:28:07,826:INFO:             pickle5: Not installed
2024-05-20 12:28:07,826:INFO:         cloudpickle: 3.0.0
2024-05-20 12:28:07,826:INFO:         deprecation: 2.1.0
2024-05-20 12:28:07,826:INFO:              xxhash: 3.4.1
2024-05-20 12:28:07,826:INFO:           wurlitzer: Not installed
2024-05-20 12:28:07,826:INFO:PyCaret optional dependencies:
2024-05-20 12:28:07,865:INFO:                shap: Not installed
2024-05-20 12:28:07,865:INFO:           interpret: Not installed
2024-05-20 12:28:07,865:INFO:                umap: Not installed
2024-05-20 12:28:07,865:INFO:     ydata_profiling: Not installed
2024-05-20 12:28:07,865:INFO:  explainerdashboard: Not installed
2024-05-20 12:28:07,865:INFO:             autoviz: Not installed
2024-05-20 12:28:07,865:INFO:           fairlearn: Not installed
2024-05-20 12:28:07,866:INFO:          deepchecks: Not installed
2024-05-20 12:28:07,866:INFO:             xgboost: 2.0.3
2024-05-20 12:28:07,866:INFO:            catboost: Not installed
2024-05-20 12:28:07,866:INFO:              kmodes: Not installed
2024-05-20 12:28:07,866:INFO:             mlxtend: Not installed
2024-05-20 12:28:07,866:INFO:       statsforecast: Not installed
2024-05-20 12:28:07,866:INFO:        tune_sklearn: Not installed
2024-05-20 12:28:07,866:INFO:                 ray: Not installed
2024-05-20 12:28:07,866:INFO:            hyperopt: Not installed
2024-05-20 12:28:07,867:INFO:              optuna: 3.6.1
2024-05-20 12:28:07,867:INFO:               skopt: Not installed
2024-05-20 12:28:07,867:INFO:              mlflow: Not installed
2024-05-20 12:28:07,867:INFO:              gradio: Not installed
2024-05-20 12:28:07,867:INFO:             fastapi: Not installed
2024-05-20 12:28:07,867:INFO:             uvicorn: Not installed
2024-05-20 12:28:07,867:INFO:              m2cgen: Not installed
2024-05-20 12:28:07,867:INFO:           evidently: Not installed
2024-05-20 12:28:07,868:INFO:               fugue: Not installed
2024-05-20 12:28:07,868:INFO:           streamlit: Not installed
2024-05-20 12:28:07,868:INFO:             prophet: Not installed
2024-05-20 12:28:07,868:INFO:None
2024-05-20 12:28:07,868:INFO:Set up data.
2024-05-20 12:42:24,998:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:42:24,998:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:42:24,998:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:42:24,998:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:42:25,688:INFO:PyCaret ClassificationExperiment
2024-05-20 12:42:25,688:INFO:Logging name: clf-default-name
2024-05-20 12:42:25,688:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:42:25,688:INFO:version 3.3.2
2024-05-20 12:42:25,688:INFO:Initializing setup()
2024-05-20 12:42:25,688:INFO:self.USI: 6482
2024-05-20 12:42:25,688:INFO:self._variable_keys: {'log_plots_param', 'y_train', '_ml_usecase', 'fold_groups_param', 'gpu_param', 'target_param', 'X', 'is_multiclass', 'exp_name_log', 'html_param', 'X_train', 'idx', 'pipeline', 'y_test', 'logging_param', 'seed', 'memory', 'data', '_available_plots', 'y', 'fix_imbalance', 'exp_id', 'fold_generator', 'X_test', 'USI', 'gpu_n_jobs_param', 'fold_shuffle_param', 'n_jobs_param'}
2024-05-20 12:42:25,688:INFO:Checking environment
2024-05-20 12:42:25,688:INFO:python_version: 3.10.0
2024-05-20 12:42:25,688:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:42:25,688:INFO:machine: AMD64
2024-05-20 12:42:25,688:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:42:25,694:INFO:Memory: svmem(total=16993001472, available=5773438976, percent=66.0, used=11219562496, free=5773438976)
2024-05-20 12:42:25,694:INFO:Physical Core: 6
2024-05-20 12:42:25,694:INFO:Logical Core: 12
2024-05-20 12:42:25,694:INFO:Checking libraries
2024-05-20 12:42:25,695:INFO:System:
2024-05-20 12:42:25,695:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:42:25,695:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:42:25,695:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:42:25,695:INFO:PyCaret required dependencies:
2024-05-20 12:42:25,699:INFO:                 pip: 24.0
2024-05-20 12:42:25,699:INFO:          setuptools: 57.4.0
2024-05-20 12:42:25,699:INFO:             pycaret: 3.3.2
2024-05-20 12:42:25,699:INFO:             IPython: 8.23.0
2024-05-20 12:42:25,699:INFO:          ipywidgets: 8.1.2
2024-05-20 12:42:25,699:INFO:                tqdm: 4.66.2
2024-05-20 12:42:25,699:INFO:               numpy: 1.26.3
2024-05-20 12:42:25,699:INFO:              pandas: 2.1.4
2024-05-20 12:42:25,699:INFO:              jinja2: 3.1.2
2024-05-20 12:42:25,699:INFO:               scipy: 1.11.4
2024-05-20 12:42:25,700:INFO:              joblib: 1.3.2
2024-05-20 12:42:25,700:INFO:             sklearn: 1.4.2
2024-05-20 12:42:25,700:INFO:                pyod: 1.1.3
2024-05-20 12:42:25,700:INFO:            imblearn: 0.12.2
2024-05-20 12:42:25,700:INFO:   category_encoders: 2.6.3
2024-05-20 12:42:25,700:INFO:            lightgbm: 4.3.0
2024-05-20 12:42:25,700:INFO:               numba: 0.59.1
2024-05-20 12:42:25,700:INFO:            requests: 2.31.0
2024-05-20 12:42:25,700:INFO:          matplotlib: 3.7.5
2024-05-20 12:42:25,700:INFO:          scikitplot: 0.3.7
2024-05-20 12:42:25,700:INFO:         yellowbrick: 1.5
2024-05-20 12:42:25,700:INFO:              plotly: 5.22.0
2024-05-20 12:42:25,700:INFO:    plotly-resampler: Not installed
2024-05-20 12:42:25,700:INFO:             kaleido: 0.2.1
2024-05-20 12:42:25,700:INFO:           schemdraw: 0.15
2024-05-20 12:42:25,700:INFO:         statsmodels: 0.14.2
2024-05-20 12:42:25,700:INFO:              sktime: 0.26.0
2024-05-20 12:42:25,700:INFO:               tbats: 1.1.3
2024-05-20 12:42:25,701:INFO:            pmdarima: 2.0.4
2024-05-20 12:42:25,701:INFO:              psutil: 5.9.8
2024-05-20 12:42:25,701:INFO:          markupsafe: 2.1.3
2024-05-20 12:42:25,701:INFO:             pickle5: Not installed
2024-05-20 12:42:25,701:INFO:         cloudpickle: 3.0.0
2024-05-20 12:42:25,701:INFO:         deprecation: 2.1.0
2024-05-20 12:42:25,701:INFO:              xxhash: 3.4.1
2024-05-20 12:42:25,701:INFO:           wurlitzer: Not installed
2024-05-20 12:42:25,701:INFO:PyCaret optional dependencies:
2024-05-20 12:42:25,731:INFO:                shap: Not installed
2024-05-20 12:42:25,744:INFO:           interpret: Not installed
2024-05-20 12:42:25,745:INFO:                umap: Not installed
2024-05-20 12:42:25,745:INFO:     ydata_profiling: Not installed
2024-05-20 12:42:25,745:INFO:  explainerdashboard: Not installed
2024-05-20 12:42:25,745:INFO:             autoviz: Not installed
2024-05-20 12:42:25,745:INFO:           fairlearn: Not installed
2024-05-20 12:42:25,745:INFO:          deepchecks: Not installed
2024-05-20 12:42:25,745:INFO:             xgboost: 2.0.3
2024-05-20 12:42:25,745:INFO:            catboost: Not installed
2024-05-20 12:42:25,745:INFO:              kmodes: Not installed
2024-05-20 12:42:25,745:INFO:             mlxtend: Not installed
2024-05-20 12:42:25,745:INFO:       statsforecast: Not installed
2024-05-20 12:42:25,745:INFO:        tune_sklearn: Not installed
2024-05-20 12:42:25,745:INFO:                 ray: Not installed
2024-05-20 12:42:25,745:INFO:            hyperopt: Not installed
2024-05-20 12:42:25,745:INFO:              optuna: 3.6.1
2024-05-20 12:42:25,745:INFO:               skopt: Not installed
2024-05-20 12:42:25,745:INFO:              mlflow: Not installed
2024-05-20 12:42:25,745:INFO:              gradio: Not installed
2024-05-20 12:42:25,746:INFO:             fastapi: Not installed
2024-05-20 12:42:25,746:INFO:             uvicorn: Not installed
2024-05-20 12:42:25,746:INFO:              m2cgen: Not installed
2024-05-20 12:42:25,746:INFO:           evidently: Not installed
2024-05-20 12:42:25,746:INFO:               fugue: Not installed
2024-05-20 12:42:25,746:INFO:           streamlit: Not installed
2024-05-20 12:42:25,746:INFO:             prophet: Not installed
2024-05-20 12:42:25,746:INFO:None
2024-05-20 12:42:25,746:INFO:Set up data.
2024-05-20 12:42:25,900:INFO:Set up folding strategy.
2024-05-20 12:42:25,900:INFO:Set up train/test split.
2024-05-20 12:42:26,180:INFO:Set up index.
2024-05-20 12:42:26,186:INFO:Assigning column types.
2024-05-20 12:42:26,455:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:42:26,518:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,544:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,598:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:26,602:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:26,664:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,665:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,703:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:26,707:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:26,707:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:42:26,769:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,807:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:26,811:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:26,873:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:42:26,911:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:26,915:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:26,916:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:42:27,016:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:27,020:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:27,124:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:27,128:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:27,132:INFO:Preparing preprocessing pipeline...
2024-05-20 12:42:27,169:INFO:Set up label encoding.
2024-05-20 12:42:27,170:INFO:Set up simple imputation.
2024-05-20 12:42:27,262:INFO:Set up encoding of categorical features.
2024-05-20 12:42:28,064:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:42:28,074:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['spectraltype_esphs'],
                                    transformer=OneHotEncoder(cols=['spectraltype_esphs'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-05-20 12:42:28,074:INFO:Creating final display dataframe.
2024-05-20 12:42:30,007:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 345)
5        Transformed data shape      (14101, 354)
6   Transformed train set shape       (9870, 354)
7    Transformed test set shape       (4231, 354)
8              Numeric features               343
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              6482
2024-05-20 12:42:30,122:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:30,129:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:30,273:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:42:30,277:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:42:30,279:INFO:setup() successfully completed in 4.59s...............
2024-05-20 12:43:15,406:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:43:15,406:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:43:15,406:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:43:15,406:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:43:16,087:INFO:PyCaret ClassificationExperiment
2024-05-20 12:43:16,087:INFO:Logging name: clf-default-name
2024-05-20 12:43:16,087:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:43:16,087:INFO:version 3.3.2
2024-05-20 12:43:16,087:INFO:Initializing setup()
2024-05-20 12:43:16,088:INFO:self.USI: c7f1
2024-05-20 12:43:16,088:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_test', 'exp_id', 'seed', '_available_plots', 'log_plots_param', 'fold_generator', 'y', 'target_param', 'USI', 'fold_shuffle_param', 'fold_groups_param', 'pipeline', 'memory', 'X_train', 'exp_name_log', 'y_train', 'gpu_param', 'html_param', 'X', 'is_multiclass', 'idx', '_ml_usecase', 'data', 'logging_param', 'n_jobs_param'}
2024-05-20 12:43:16,088:INFO:Checking environment
2024-05-20 12:43:16,088:INFO:python_version: 3.10.0
2024-05-20 12:43:16,088:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:43:16,088:INFO:machine: AMD64
2024-05-20 12:43:16,088:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:43:16,094:INFO:Memory: svmem(total=16993001472, available=5819654144, percent=65.8, used=11173347328, free=5819654144)
2024-05-20 12:43:16,094:INFO:Physical Core: 6
2024-05-20 12:43:16,094:INFO:Logical Core: 12
2024-05-20 12:43:16,094:INFO:Checking libraries
2024-05-20 12:43:16,094:INFO:System:
2024-05-20 12:43:16,094:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:43:16,094:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:43:16,094:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:43:16,094:INFO:PyCaret required dependencies:
2024-05-20 12:43:16,099:INFO:                 pip: 24.0
2024-05-20 12:43:16,099:INFO:          setuptools: 57.4.0
2024-05-20 12:43:16,099:INFO:             pycaret: 3.3.2
2024-05-20 12:43:16,099:INFO:             IPython: 8.23.0
2024-05-20 12:43:16,099:INFO:          ipywidgets: 8.1.2
2024-05-20 12:43:16,099:INFO:                tqdm: 4.66.2
2024-05-20 12:43:16,099:INFO:               numpy: 1.26.3
2024-05-20 12:43:16,099:INFO:              pandas: 2.1.4
2024-05-20 12:43:16,099:INFO:              jinja2: 3.1.2
2024-05-20 12:43:16,099:INFO:               scipy: 1.11.4
2024-05-20 12:43:16,099:INFO:              joblib: 1.3.2
2024-05-20 12:43:16,099:INFO:             sklearn: 1.4.2
2024-05-20 12:43:16,099:INFO:                pyod: 1.1.3
2024-05-20 12:43:16,099:INFO:            imblearn: 0.12.2
2024-05-20 12:43:16,100:INFO:   category_encoders: 2.6.3
2024-05-20 12:43:16,100:INFO:            lightgbm: 4.3.0
2024-05-20 12:43:16,100:INFO:               numba: 0.59.1
2024-05-20 12:43:16,100:INFO:            requests: 2.31.0
2024-05-20 12:43:16,100:INFO:          matplotlib: 3.7.5
2024-05-20 12:43:16,100:INFO:          scikitplot: 0.3.7
2024-05-20 12:43:16,100:INFO:         yellowbrick: 1.5
2024-05-20 12:43:16,100:INFO:              plotly: 5.22.0
2024-05-20 12:43:16,100:INFO:    plotly-resampler: Not installed
2024-05-20 12:43:16,100:INFO:             kaleido: 0.2.1
2024-05-20 12:43:16,100:INFO:           schemdraw: 0.15
2024-05-20 12:43:16,100:INFO:         statsmodels: 0.14.2
2024-05-20 12:43:16,100:INFO:              sktime: 0.26.0
2024-05-20 12:43:16,100:INFO:               tbats: 1.1.3
2024-05-20 12:43:16,100:INFO:            pmdarima: 2.0.4
2024-05-20 12:43:16,100:INFO:              psutil: 5.9.8
2024-05-20 12:43:16,100:INFO:          markupsafe: 2.1.3
2024-05-20 12:43:16,100:INFO:             pickle5: Not installed
2024-05-20 12:43:16,100:INFO:         cloudpickle: 3.0.0
2024-05-20 12:43:16,101:INFO:         deprecation: 2.1.0
2024-05-20 12:43:16,101:INFO:              xxhash: 3.4.1
2024-05-20 12:43:16,101:INFO:           wurlitzer: Not installed
2024-05-20 12:43:16,101:INFO:PyCaret optional dependencies:
2024-05-20 12:43:16,132:INFO:                shap: Not installed
2024-05-20 12:43:16,132:INFO:           interpret: Not installed
2024-05-20 12:43:16,132:INFO:                umap: Not installed
2024-05-20 12:43:16,132:INFO:     ydata_profiling: Not installed
2024-05-20 12:43:16,133:INFO:  explainerdashboard: Not installed
2024-05-20 12:43:16,133:INFO:             autoviz: Not installed
2024-05-20 12:43:16,133:INFO:           fairlearn: Not installed
2024-05-20 12:43:16,133:INFO:          deepchecks: Not installed
2024-05-20 12:43:16,133:INFO:             xgboost: 2.0.3
2024-05-20 12:43:16,133:INFO:            catboost: Not installed
2024-05-20 12:43:16,133:INFO:              kmodes: Not installed
2024-05-20 12:43:16,133:INFO:             mlxtend: Not installed
2024-05-20 12:43:16,133:INFO:       statsforecast: Not installed
2024-05-20 12:43:16,133:INFO:        tune_sklearn: Not installed
2024-05-20 12:43:16,133:INFO:                 ray: Not installed
2024-05-20 12:43:16,134:INFO:            hyperopt: Not installed
2024-05-20 12:43:16,134:INFO:              optuna: 3.6.1
2024-05-20 12:43:16,134:INFO:               skopt: Not installed
2024-05-20 12:43:16,134:INFO:              mlflow: Not installed
2024-05-20 12:43:16,134:INFO:              gradio: Not installed
2024-05-20 12:43:16,134:INFO:             fastapi: Not installed
2024-05-20 12:43:16,134:INFO:             uvicorn: Not installed
2024-05-20 12:43:16,134:INFO:              m2cgen: Not installed
2024-05-20 12:43:16,134:INFO:           evidently: Not installed
2024-05-20 12:43:16,134:INFO:               fugue: Not installed
2024-05-20 12:43:16,134:INFO:           streamlit: Not installed
2024-05-20 12:43:16,134:INFO:             prophet: Not installed
2024-05-20 12:43:16,134:INFO:None
2024-05-20 12:43:16,134:INFO:Set up data.
2024-05-20 12:43:16,293:INFO:Set up folding strategy.
2024-05-20 12:43:16,293:INFO:Set up train/test split.
2024-05-20 12:43:16,499:INFO:Set up index.
2024-05-20 12:43:16,505:INFO:Assigning column types.
2024-05-20 12:43:16,767:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:43:16,829:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:43:16,834:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:43:16,884:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:16,888:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:16,951:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:43:16,953:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:43:16,997:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:17,008:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:17,009:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:43:17,073:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:43:17,114:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:17,118:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:17,182:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:43:17,221:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:17,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:17,225:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:43:17,327:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:17,331:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:17,449:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:17,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:17,457:INFO:Preparing preprocessing pipeline...
2024-05-20 12:43:17,492:INFO:Set up label encoding.
2024-05-20 12:43:17,492:INFO:Set up simple imputation.
2024-05-20 12:43:17,585:INFO:Set up encoding of categorical features.
2024-05-20 12:43:18,126:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:43:18,137:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['spectraltype_esphs'],
                                    transformer=OneHotEncoder(cols=['spectraltype_esphs'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-05-20 12:43:18,137:INFO:Creating final display dataframe.
2024-05-20 12:43:19,243:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 345)
5        Transformed data shape      (14101, 354)
6   Transformed train set shape       (9870, 354)
7    Transformed test set shape       (4231, 354)
8              Numeric features               343
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              c7f1
2024-05-20 12:43:19,354:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:19,358:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:19,474:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:43:19,478:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:43:19,480:INFO:setup() successfully completed in 3.4s...............
2024-05-20 12:44:27,949:INFO:PyCaret ClassificationExperiment
2024-05-20 12:44:27,949:INFO:Logging name: clf-default-name
2024-05-20 12:44:27,949:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:44:27,949:INFO:version 3.3.2
2024-05-20 12:44:27,949:INFO:Initializing setup()
2024-05-20 12:44:27,950:INFO:self.USI: d019
2024-05-20 12:44:27,950:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_test', 'exp_id', 'seed', '_available_plots', 'log_plots_param', 'fold_generator', 'y', 'target_param', 'USI', 'fold_shuffle_param', 'fold_groups_param', 'pipeline', 'memory', 'X_train', 'exp_name_log', 'y_train', 'gpu_param', 'html_param', 'X', 'is_multiclass', 'idx', '_ml_usecase', 'data', 'logging_param', 'n_jobs_param'}
2024-05-20 12:44:27,950:INFO:Checking environment
2024-05-20 12:44:27,950:INFO:python_version: 3.10.0
2024-05-20 12:44:27,950:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:44:27,950:INFO:machine: AMD64
2024-05-20 12:44:27,950:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:44:27,956:INFO:Memory: svmem(total=16993001472, available=5650935808, percent=66.7, used=11342065664, free=5650935808)
2024-05-20 12:44:27,957:INFO:Physical Core: 6
2024-05-20 12:44:27,957:INFO:Logical Core: 12
2024-05-20 12:44:27,957:INFO:Checking libraries
2024-05-20 12:44:27,957:INFO:System:
2024-05-20 12:44:27,957:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:44:27,957:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:44:27,957:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:44:27,957:INFO:PyCaret required dependencies:
2024-05-20 12:44:27,957:INFO:                 pip: 24.0
2024-05-20 12:44:27,958:INFO:          setuptools: 57.4.0
2024-05-20 12:44:27,958:INFO:             pycaret: 3.3.2
2024-05-20 12:44:27,958:INFO:             IPython: 8.23.0
2024-05-20 12:44:27,958:INFO:          ipywidgets: 8.1.2
2024-05-20 12:44:27,958:INFO:                tqdm: 4.66.2
2024-05-20 12:44:27,958:INFO:               numpy: 1.26.3
2024-05-20 12:44:27,958:INFO:              pandas: 2.1.4
2024-05-20 12:44:27,958:INFO:              jinja2: 3.1.2
2024-05-20 12:44:27,958:INFO:               scipy: 1.11.4
2024-05-20 12:44:27,958:INFO:              joblib: 1.3.2
2024-05-20 12:44:27,958:INFO:             sklearn: 1.4.2
2024-05-20 12:44:27,958:INFO:                pyod: 1.1.3
2024-05-20 12:44:27,958:INFO:            imblearn: 0.12.2
2024-05-20 12:44:27,958:INFO:   category_encoders: 2.6.3
2024-05-20 12:44:27,958:INFO:            lightgbm: 4.3.0
2024-05-20 12:44:27,958:INFO:               numba: 0.59.1
2024-05-20 12:44:27,958:INFO:            requests: 2.31.0
2024-05-20 12:44:27,958:INFO:          matplotlib: 3.7.5
2024-05-20 12:44:27,959:INFO:          scikitplot: 0.3.7
2024-05-20 12:44:27,959:INFO:         yellowbrick: 1.5
2024-05-20 12:44:27,959:INFO:              plotly: 5.22.0
2024-05-20 12:44:27,959:INFO:    plotly-resampler: Not installed
2024-05-20 12:44:27,959:INFO:             kaleido: 0.2.1
2024-05-20 12:44:27,959:INFO:           schemdraw: 0.15
2024-05-20 12:44:27,959:INFO:         statsmodels: 0.14.2
2024-05-20 12:44:27,959:INFO:              sktime: 0.26.0
2024-05-20 12:44:27,959:INFO:               tbats: 1.1.3
2024-05-20 12:44:27,959:INFO:            pmdarima: 2.0.4
2024-05-20 12:44:27,959:INFO:              psutil: 5.9.8
2024-05-20 12:44:27,959:INFO:          markupsafe: 2.1.3
2024-05-20 12:44:27,959:INFO:             pickle5: Not installed
2024-05-20 12:44:27,959:INFO:         cloudpickle: 3.0.0
2024-05-20 12:44:27,959:INFO:         deprecation: 2.1.0
2024-05-20 12:44:27,959:INFO:              xxhash: 3.4.1
2024-05-20 12:44:27,959:INFO:           wurlitzer: Not installed
2024-05-20 12:44:27,960:INFO:PyCaret optional dependencies:
2024-05-20 12:44:27,960:INFO:                shap: Not installed
2024-05-20 12:44:27,960:INFO:           interpret: Not installed
2024-05-20 12:44:27,960:INFO:                umap: Not installed
2024-05-20 12:44:27,960:INFO:     ydata_profiling: Not installed
2024-05-20 12:44:27,960:INFO:  explainerdashboard: Not installed
2024-05-20 12:44:27,960:INFO:             autoviz: Not installed
2024-05-20 12:44:27,960:INFO:           fairlearn: Not installed
2024-05-20 12:44:27,960:INFO:          deepchecks: Not installed
2024-05-20 12:44:27,960:INFO:             xgboost: 2.0.3
2024-05-20 12:44:27,960:INFO:            catboost: Not installed
2024-05-20 12:44:27,960:INFO:              kmodes: Not installed
2024-05-20 12:44:27,960:INFO:             mlxtend: Not installed
2024-05-20 12:44:27,960:INFO:       statsforecast: Not installed
2024-05-20 12:44:27,960:INFO:        tune_sklearn: Not installed
2024-05-20 12:44:27,960:INFO:                 ray: Not installed
2024-05-20 12:44:27,961:INFO:            hyperopt: Not installed
2024-05-20 12:44:27,961:INFO:              optuna: 3.6.1
2024-05-20 12:44:27,961:INFO:               skopt: Not installed
2024-05-20 12:44:27,961:INFO:              mlflow: Not installed
2024-05-20 12:44:27,961:INFO:              gradio: Not installed
2024-05-20 12:44:27,961:INFO:             fastapi: Not installed
2024-05-20 12:44:27,961:INFO:             uvicorn: Not installed
2024-05-20 12:44:27,961:INFO:              m2cgen: Not installed
2024-05-20 12:44:27,961:INFO:           evidently: Not installed
2024-05-20 12:44:27,961:INFO:               fugue: Not installed
2024-05-20 12:44:27,961:INFO:           streamlit: Not installed
2024-05-20 12:44:27,961:INFO:             prophet: Not installed
2024-05-20 12:44:27,961:INFO:None
2024-05-20 12:44:27,961:INFO:Set up data.
2024-05-20 12:44:28,264:INFO:Set up folding strategy.
2024-05-20 12:44:28,264:INFO:Set up train/test split.
2024-05-20 12:44:28,459:INFO:Set up index.
2024-05-20 12:44:28,463:INFO:Assigning column types.
2024-05-20 12:44:28,726:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:44:28,789:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:44:28,790:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:28,828:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:28,832:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:28,894:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:44:28,895:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:28,934:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:28,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:28,938:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:44:29,000:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:29,039:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:29,043:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:29,107:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:29,147:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:29,152:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:29,152:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:44:29,252:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:29,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:29,357:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:29,361:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:29,363:INFO:Preparing preprocessing pipeline...
2024-05-20 12:44:29,396:INFO:Set up label encoding.
2024-05-20 12:44:29,397:INFO:Set up simple imputation.
2024-05-20 12:44:29,490:INFO:Set up encoding of categorical features.
2024-05-20 12:44:30,015:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:44:30,025:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['spectraltype_esphs'],
                                    transformer=OneHotEncoder(cols=['spectraltype_esphs'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-05-20 12:44:30,025:INFO:Creating final display dataframe.
2024-05-20 12:44:31,132:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 345)
5        Transformed data shape      (14101, 354)
6   Transformed train set shape       (9870, 354)
7    Transformed test set shape       (4231, 354)
8              Numeric features               343
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              d019
2024-05-20 12:44:31,244:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:31,247:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:31,349:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:31,352:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:31,354:INFO:setup() successfully completed in 3.41s...............
2024-05-20 12:44:32,793:INFO:PyCaret ClassificationExperiment
2024-05-20 12:44:32,793:INFO:Logging name: clf-default-name
2024-05-20 12:44:32,793:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:44:32,793:INFO:version 3.3.2
2024-05-20 12:44:32,793:INFO:Initializing setup()
2024-05-20 12:44:32,793:INFO:self.USI: 8ffc
2024-05-20 12:44:32,793:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fix_imbalance', 'y_test', 'X_test', 'exp_id', 'seed', '_available_plots', 'log_plots_param', 'fold_generator', 'y', 'target_param', 'USI', 'fold_shuffle_param', 'fold_groups_param', 'pipeline', 'memory', 'X_train', 'exp_name_log', 'y_train', 'gpu_param', 'html_param', 'X', 'is_multiclass', 'idx', '_ml_usecase', 'data', 'logging_param', 'n_jobs_param'}
2024-05-20 12:44:32,793:INFO:Checking environment
2024-05-20 12:44:32,793:INFO:python_version: 3.10.0
2024-05-20 12:44:32,794:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:44:32,794:INFO:machine: AMD64
2024-05-20 12:44:32,794:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:44:32,800:INFO:Memory: svmem(total=16993001472, available=5612806144, percent=67.0, used=11380195328, free=5612806144)
2024-05-20 12:44:32,800:INFO:Physical Core: 6
2024-05-20 12:44:32,800:INFO:Logical Core: 12
2024-05-20 12:44:32,800:INFO:Checking libraries
2024-05-20 12:44:32,801:INFO:System:
2024-05-20 12:44:32,801:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:44:32,801:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:44:32,801:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:44:32,801:INFO:PyCaret required dependencies:
2024-05-20 12:44:32,801:INFO:                 pip: 24.0
2024-05-20 12:44:32,801:INFO:          setuptools: 57.4.0
2024-05-20 12:44:32,801:INFO:             pycaret: 3.3.2
2024-05-20 12:44:32,802:INFO:             IPython: 8.23.0
2024-05-20 12:44:32,802:INFO:          ipywidgets: 8.1.2
2024-05-20 12:44:32,802:INFO:                tqdm: 4.66.2
2024-05-20 12:44:32,802:INFO:               numpy: 1.26.3
2024-05-20 12:44:32,802:INFO:              pandas: 2.1.4
2024-05-20 12:44:32,802:INFO:              jinja2: 3.1.2
2024-05-20 12:44:32,802:INFO:               scipy: 1.11.4
2024-05-20 12:44:32,802:INFO:              joblib: 1.3.2
2024-05-20 12:44:32,802:INFO:             sklearn: 1.4.2
2024-05-20 12:44:32,803:INFO:                pyod: 1.1.3
2024-05-20 12:44:32,803:INFO:            imblearn: 0.12.2
2024-05-20 12:44:32,803:INFO:   category_encoders: 2.6.3
2024-05-20 12:44:32,803:INFO:            lightgbm: 4.3.0
2024-05-20 12:44:32,803:INFO:               numba: 0.59.1
2024-05-20 12:44:32,803:INFO:            requests: 2.31.0
2024-05-20 12:44:32,803:INFO:          matplotlib: 3.7.5
2024-05-20 12:44:32,803:INFO:          scikitplot: 0.3.7
2024-05-20 12:44:32,803:INFO:         yellowbrick: 1.5
2024-05-20 12:44:32,804:INFO:              plotly: 5.22.0
2024-05-20 12:44:32,804:INFO:    plotly-resampler: Not installed
2024-05-20 12:44:32,804:INFO:             kaleido: 0.2.1
2024-05-20 12:44:32,804:INFO:           schemdraw: 0.15
2024-05-20 12:44:32,804:INFO:         statsmodels: 0.14.2
2024-05-20 12:44:32,804:INFO:              sktime: 0.26.0
2024-05-20 12:44:32,804:INFO:               tbats: 1.1.3
2024-05-20 12:44:32,804:INFO:            pmdarima: 2.0.4
2024-05-20 12:44:32,805:INFO:              psutil: 5.9.8
2024-05-20 12:44:32,805:INFO:          markupsafe: 2.1.3
2024-05-20 12:44:32,805:INFO:             pickle5: Not installed
2024-05-20 12:44:32,805:INFO:         cloudpickle: 3.0.0
2024-05-20 12:44:32,805:INFO:         deprecation: 2.1.0
2024-05-20 12:44:32,805:INFO:              xxhash: 3.4.1
2024-05-20 12:44:32,805:INFO:           wurlitzer: Not installed
2024-05-20 12:44:32,805:INFO:PyCaret optional dependencies:
2024-05-20 12:44:32,805:INFO:                shap: Not installed
2024-05-20 12:44:32,806:INFO:           interpret: Not installed
2024-05-20 12:44:32,806:INFO:                umap: Not installed
2024-05-20 12:44:32,806:INFO:     ydata_profiling: Not installed
2024-05-20 12:44:32,806:INFO:  explainerdashboard: Not installed
2024-05-20 12:44:32,806:INFO:             autoviz: Not installed
2024-05-20 12:44:32,806:INFO:           fairlearn: Not installed
2024-05-20 12:44:32,806:INFO:          deepchecks: Not installed
2024-05-20 12:44:32,806:INFO:             xgboost: 2.0.3
2024-05-20 12:44:32,806:INFO:            catboost: Not installed
2024-05-20 12:44:32,807:INFO:              kmodes: Not installed
2024-05-20 12:44:32,807:INFO:             mlxtend: Not installed
2024-05-20 12:44:32,807:INFO:       statsforecast: Not installed
2024-05-20 12:44:32,807:INFO:        tune_sklearn: Not installed
2024-05-20 12:44:32,807:INFO:                 ray: Not installed
2024-05-20 12:44:32,807:INFO:            hyperopt: Not installed
2024-05-20 12:44:32,807:INFO:              optuna: 3.6.1
2024-05-20 12:44:32,807:INFO:               skopt: Not installed
2024-05-20 12:44:32,807:INFO:              mlflow: Not installed
2024-05-20 12:44:32,808:INFO:              gradio: Not installed
2024-05-20 12:44:32,808:INFO:             fastapi: Not installed
2024-05-20 12:44:32,808:INFO:             uvicorn: Not installed
2024-05-20 12:44:32,808:INFO:              m2cgen: Not installed
2024-05-20 12:44:32,808:INFO:           evidently: Not installed
2024-05-20 12:44:32,808:INFO:               fugue: Not installed
2024-05-20 12:44:32,808:INFO:           streamlit: Not installed
2024-05-20 12:44:32,808:INFO:             prophet: Not installed
2024-05-20 12:44:32,808:INFO:None
2024-05-20 12:44:32,809:INFO:Set up data.
2024-05-20 12:44:32,962:INFO:Set up folding strategy.
2024-05-20 12:44:32,962:INFO:Set up train/test split.
2024-05-20 12:44:33,245:INFO:Set up index.
2024-05-20 12:44:33,250:INFO:Assigning column types.
2024-05-20 12:44:33,530:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:44:33,592:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,593:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,632:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:33,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:33,699:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,709:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,749:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:33,753:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:33,753:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:44:33,815:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,856:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:33,860:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:33,929:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:44:33,969:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:33,973:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:33,974:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:44:34,075:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:34,079:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:34,210:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:34,217:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:34,219:INFO:Preparing preprocessing pipeline...
2024-05-20 12:44:34,259:INFO:Set up label encoding.
2024-05-20 12:44:34,259:INFO:Set up simple imputation.
2024-05-20 12:44:34,353:INFO:Set up encoding of categorical features.
2024-05-20 12:44:34,865:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:44:34,875:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['spectraltype_esphs'],
                                    transformer=OneHotEncoder(cols=['spectraltype_esphs'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2024-05-20 12:44:34,875:INFO:Creating final display dataframe.
2024-05-20 12:44:35,911:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 345)
5        Transformed data shape      (14101, 354)
6   Transformed train set shape       (9870, 354)
7    Transformed test set shape       (4231, 354)
8              Numeric features               343
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              8ffc
2024-05-20 12:44:36,026:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:36,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:36,135:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:44:36,139:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:44:36,140:INFO:setup() successfully completed in 3.35s...............
2024-05-20 12:44:37,402:INFO:Initializing compare_models()
2024-05-20 12:44:37,403:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-20 12:44:37,403:INFO:Checking exceptions
2024-05-20 12:44:37,593:INFO:Preparing display monitor
2024-05-20 12:44:37,625:INFO:Initializing Logistic Regression
2024-05-20 12:44:37,625:INFO:Total runtime is 0.0 minutes
2024-05-20 12:44:37,630:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:37,630:INFO:Initializing create_model()
2024-05-20 12:44:37,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:37,630:INFO:Checking exceptions
2024-05-20 12:44:37,631:INFO:Importing libraries
2024-05-20 12:44:37,631:INFO:Copying training dataset
2024-05-20 12:44:37,893:INFO:Defining folds
2024-05-20 12:44:37,893:INFO:Declaring metric variables
2024-05-20 12:44:37,897:INFO:Importing untrained model
2024-05-20 12:44:37,902:INFO:Logistic Regression Imported successfully
2024-05-20 12:44:37,911:INFO:Starting cross validation
2024-05-20 12:44:37,914:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:44:45,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,579:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,579:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,595:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,616:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,641:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:45,913:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,017:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,038:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,177:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,281:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,383:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,393:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,406:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:46,428:INFO:Calculating mean and std
2024-05-20 12:44:46,430:INFO:Creating metrics dataframe
2024-05-20 12:44:46,433:INFO:Uploading results into container
2024-05-20 12:44:46,434:INFO:Uploading model into container now
2024-05-20 12:44:46,435:INFO:_master_model_container: 1
2024-05-20 12:44:46,435:INFO:_display_container: 2
2024-05-20 12:44:46,436:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-20 12:44:46,436:INFO:create_model() successfully completed......................................
2024-05-20 12:44:46,530:INFO:SubProcess create_model() end ==================================
2024-05-20 12:44:46,530:INFO:Creating metrics dataframe
2024-05-20 12:44:46,539:INFO:Initializing K Neighbors Classifier
2024-05-20 12:44:46,539:INFO:Total runtime is 0.14856614271799723 minutes
2024-05-20 12:44:46,544:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:46,544:INFO:Initializing create_model()
2024-05-20 12:44:46,545:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:46,545:INFO:Checking exceptions
2024-05-20 12:44:46,545:INFO:Importing libraries
2024-05-20 12:44:46,545:INFO:Copying training dataset
2024-05-20 12:44:46,778:INFO:Defining folds
2024-05-20 12:44:46,778:INFO:Declaring metric variables
2024-05-20 12:44:46,783:INFO:Importing untrained model
2024-05-20 12:44:46,787:INFO:K Neighbors Classifier Imported successfully
2024-05-20 12:44:46,797:INFO:Starting cross validation
2024-05-20 12:44:46,801:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:44:48,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:48,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:48,950:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,004:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,038:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,262:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,322:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,338:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,352:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,362:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,376:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,540:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,549:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:49,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,124:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,134:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,143:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,152:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,161:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:52,180:INFO:Calculating mean and std
2024-05-20 12:44:52,183:INFO:Creating metrics dataframe
2024-05-20 12:44:52,186:INFO:Uploading results into container
2024-05-20 12:44:52,187:INFO:Uploading model into container now
2024-05-20 12:44:52,188:INFO:_master_model_container: 2
2024-05-20 12:44:52,188:INFO:_display_container: 2
2024-05-20 12:44:52,188:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-20 12:44:52,189:INFO:create_model() successfully completed......................................
2024-05-20 12:44:52,277:INFO:SubProcess create_model() end ==================================
2024-05-20 12:44:52,277:INFO:Creating metrics dataframe
2024-05-20 12:44:52,314:INFO:Initializing Naive Bayes
2024-05-20 12:44:52,314:INFO:Total runtime is 0.2448222517967224 minutes
2024-05-20 12:44:52,321:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:52,321:INFO:Initializing create_model()
2024-05-20 12:44:52,321:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:52,321:INFO:Checking exceptions
2024-05-20 12:44:52,321:INFO:Importing libraries
2024-05-20 12:44:52,321:INFO:Copying training dataset
2024-05-20 12:44:52,555:INFO:Defining folds
2024-05-20 12:44:52,555:INFO:Declaring metric variables
2024-05-20 12:44:52,561:INFO:Importing untrained model
2024-05-20 12:44:52,566:INFO:Naive Bayes Imported successfully
2024-05-20 12:44:52,575:INFO:Starting cross validation
2024-05-20 12:44:52,579:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:44:53,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,524:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,677:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,693:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,859:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,944:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:53,961:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,037:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,055:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,277:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,340:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,350:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,424:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,434:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:54,561:INFO:Calculating mean and std
2024-05-20 12:44:54,563:INFO:Creating metrics dataframe
2024-05-20 12:44:54,567:INFO:Uploading results into container
2024-05-20 12:44:54,568:INFO:Uploading model into container now
2024-05-20 12:44:54,569:INFO:_master_model_container: 3
2024-05-20 12:44:54,569:INFO:_display_container: 2
2024-05-20 12:44:54,569:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-20 12:44:54,569:INFO:create_model() successfully completed......................................
2024-05-20 12:44:54,660:INFO:SubProcess create_model() end ==================================
2024-05-20 12:44:54,660:INFO:Creating metrics dataframe
2024-05-20 12:44:54,671:INFO:Initializing Decision Tree Classifier
2024-05-20 12:44:54,671:INFO:Total runtime is 0.2840958833694458 minutes
2024-05-20 12:44:54,675:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:54,675:INFO:Initializing create_model()
2024-05-20 12:44:54,676:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:54,676:INFO:Checking exceptions
2024-05-20 12:44:54,676:INFO:Importing libraries
2024-05-20 12:44:54,676:INFO:Copying training dataset
2024-05-20 12:44:54,954:INFO:Defining folds
2024-05-20 12:44:54,954:INFO:Declaring metric variables
2024-05-20 12:44:54,958:INFO:Importing untrained model
2024-05-20 12:44:54,963:INFO:Decision Tree Classifier Imported successfully
2024-05-20 12:44:54,973:INFO:Starting cross validation
2024-05-20 12:44:54,976:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:44:56,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,153:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,216:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,344:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,650:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,683:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,848:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:56,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:57,013:INFO:Calculating mean and std
2024-05-20 12:44:57,015:INFO:Creating metrics dataframe
2024-05-20 12:44:57,018:INFO:Uploading results into container
2024-05-20 12:44:57,019:INFO:Uploading model into container now
2024-05-20 12:44:57,019:INFO:_master_model_container: 4
2024-05-20 12:44:57,019:INFO:_display_container: 2
2024-05-20 12:44:57,020:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-20 12:44:57,020:INFO:create_model() successfully completed......................................
2024-05-20 12:44:57,108:INFO:SubProcess create_model() end ==================================
2024-05-20 12:44:57,108:INFO:Creating metrics dataframe
2024-05-20 12:44:57,119:INFO:Initializing SVM - Linear Kernel
2024-05-20 12:44:57,119:INFO:Total runtime is 0.3249009768168132 minutes
2024-05-20 12:44:57,123:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:57,124:INFO:Initializing create_model()
2024-05-20 12:44:57,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:57,124:INFO:Checking exceptions
2024-05-20 12:44:57,124:INFO:Importing libraries
2024-05-20 12:44:57,124:INFO:Copying training dataset
2024-05-20 12:44:57,345:INFO:Defining folds
2024-05-20 12:44:57,345:INFO:Declaring metric variables
2024-05-20 12:44:57,350:INFO:Importing untrained model
2024-05-20 12:44:57,355:INFO:SVM - Linear Kernel Imported successfully
2024-05-20 12:44:57,364:INFO:Starting cross validation
2024-05-20 12:44:57,367:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:44:58,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,566:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,577:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,590:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,654:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,685:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,782:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,840:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,856:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,907:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,917:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:58,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:44:59,264:INFO:Calculating mean and std
2024-05-20 12:44:59,266:INFO:Creating metrics dataframe
2024-05-20 12:44:59,269:INFO:Uploading results into container
2024-05-20 12:44:59,270:INFO:Uploading model into container now
2024-05-20 12:44:59,270:INFO:_master_model_container: 5
2024-05-20 12:44:59,270:INFO:_display_container: 2
2024-05-20 12:44:59,271:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-20 12:44:59,272:INFO:create_model() successfully completed......................................
2024-05-20 12:44:59,356:INFO:SubProcess create_model() end ==================================
2024-05-20 12:44:59,356:INFO:Creating metrics dataframe
2024-05-20 12:44:59,367:INFO:Initializing Ridge Classifier
2024-05-20 12:44:59,367:INFO:Total runtime is 0.3623749852180481 minutes
2024-05-20 12:44:59,372:INFO:SubProcess create_model() called ==================================
2024-05-20 12:44:59,372:INFO:Initializing create_model()
2024-05-20 12:44:59,372:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:44:59,373:INFO:Checking exceptions
2024-05-20 12:44:59,373:INFO:Importing libraries
2024-05-20 12:44:59,373:INFO:Copying training dataset
2024-05-20 12:44:59,604:INFO:Defining folds
2024-05-20 12:44:59,605:INFO:Declaring metric variables
2024-05-20 12:44:59,610:INFO:Importing untrained model
2024-05-20 12:44:59,616:INFO:Ridge Classifier Imported successfully
2024-05-20 12:44:59,624:INFO:Starting cross validation
2024-05-20 12:44:59,627:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:45:00,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,624:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,730:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,779:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,924:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,941:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:00,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,085:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,221:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,287:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,304:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,419:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,428:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:01,450:INFO:Calculating mean and std
2024-05-20 12:45:01,452:INFO:Creating metrics dataframe
2024-05-20 12:45:01,454:INFO:Uploading results into container
2024-05-20 12:45:01,455:INFO:Uploading model into container now
2024-05-20 12:45:01,455:INFO:_master_model_container: 6
2024-05-20 12:45:01,455:INFO:_display_container: 2
2024-05-20 12:45:01,456:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-20 12:45:01,456:INFO:create_model() successfully completed......................................
2024-05-20 12:45:01,539:INFO:SubProcess create_model() end ==================================
2024-05-20 12:45:01,540:INFO:Creating metrics dataframe
2024-05-20 12:45:01,550:INFO:Initializing Random Forest Classifier
2024-05-20 12:45:01,550:INFO:Total runtime is 0.3987462838490804 minutes
2024-05-20 12:45:01,555:INFO:SubProcess create_model() called ==================================
2024-05-20 12:45:01,555:INFO:Initializing create_model()
2024-05-20 12:45:01,555:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:45:01,555:INFO:Checking exceptions
2024-05-20 12:45:01,555:INFO:Importing libraries
2024-05-20 12:45:01,555:INFO:Copying training dataset
2024-05-20 12:45:01,796:INFO:Defining folds
2024-05-20 12:45:01,796:INFO:Declaring metric variables
2024-05-20 12:45:01,801:INFO:Importing untrained model
2024-05-20 12:45:01,806:INFO:Random Forest Classifier Imported successfully
2024-05-20 12:45:01,816:INFO:Starting cross validation
2024-05-20 12:45:01,819:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:45:23,710:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:23,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:23,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,181:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,198:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,212:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,216:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,241:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,248:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,273:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,387:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,430:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,485:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,494:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,504:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:24,521:INFO:Calculating mean and std
2024-05-20 12:45:24,523:INFO:Creating metrics dataframe
2024-05-20 12:45:24,527:INFO:Uploading results into container
2024-05-20 12:45:24,528:INFO:Uploading model into container now
2024-05-20 12:45:24,528:INFO:_master_model_container: 7
2024-05-20 12:45:24,528:INFO:_display_container: 2
2024-05-20 12:45:24,529:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-20 12:45:24,530:INFO:create_model() successfully completed......................................
2024-05-20 12:45:24,617:INFO:SubProcess create_model() end ==================================
2024-05-20 12:45:24,617:INFO:Creating metrics dataframe
2024-05-20 12:45:24,630:INFO:Initializing Quadratic Discriminant Analysis
2024-05-20 12:45:24,631:INFO:Total runtime is 0.7834405899047852 minutes
2024-05-20 12:45:24,635:INFO:SubProcess create_model() called ==================================
2024-05-20 12:45:24,636:INFO:Initializing create_model()
2024-05-20 12:45:24,636:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:45:24,636:INFO:Checking exceptions
2024-05-20 12:45:24,636:INFO:Importing libraries
2024-05-20 12:45:24,636:INFO:Copying training dataset
2024-05-20 12:45:24,886:INFO:Defining folds
2024-05-20 12:45:24,886:INFO:Declaring metric variables
2024-05-20 12:45:24,891:INFO:Importing untrained model
2024-05-20 12:45:24,897:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-20 12:45:24,906:INFO:Starting cross validation
2024-05-20 12:45:24,909:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:45:26,161:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,576:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,798:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:26,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,036:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:27,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:27,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:27,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:45:27,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,489:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,584:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,645:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,673:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,710:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,787:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,811:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:27,925:INFO:Calculating mean and std
2024-05-20 12:45:27,927:INFO:Creating metrics dataframe
2024-05-20 12:45:27,929:INFO:Uploading results into container
2024-05-20 12:45:27,930:INFO:Uploading model into container now
2024-05-20 12:45:27,930:INFO:_master_model_container: 8
2024-05-20 12:45:27,931:INFO:_display_container: 2
2024-05-20 12:45:27,931:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-20 12:45:27,932:INFO:create_model() successfully completed......................................
2024-05-20 12:45:28,016:INFO:SubProcess create_model() end ==================================
2024-05-20 12:45:28,016:INFO:Creating metrics dataframe
2024-05-20 12:45:28,029:INFO:Initializing Ada Boost Classifier
2024-05-20 12:45:28,029:INFO:Total runtime is 0.8400722304979961 minutes
2024-05-20 12:45:28,034:INFO:SubProcess create_model() called ==================================
2024-05-20 12:45:28,035:INFO:Initializing create_model()
2024-05-20 12:45:28,035:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:45:28,035:INFO:Checking exceptions
2024-05-20 12:45:28,035:INFO:Importing libraries
2024-05-20 12:45:28,035:INFO:Copying training dataset
2024-05-20 12:45:28,290:INFO:Defining folds
2024-05-20 12:45:28,290:INFO:Declaring metric variables
2024-05-20 12:45:28,295:INFO:Importing untrained model
2024-05-20 12:45:28,300:INFO:Ada Boost Classifier Imported successfully
2024-05-20 12:45:28,308:INFO:Starting cross validation
2024-05-20 12:45:28,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:45:28,878:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:28,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,030:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,137:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,495:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,684:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:29,764:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:45:54,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:54,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:54,915:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,029:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,043:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,049:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,548:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,563:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,571:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,730:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,859:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,881:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,884:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,890:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,899:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:45:55,921:INFO:Calculating mean and std
2024-05-20 12:45:55,923:INFO:Creating metrics dataframe
2024-05-20 12:45:55,926:INFO:Uploading results into container
2024-05-20 12:45:55,926:INFO:Uploading model into container now
2024-05-20 12:45:55,927:INFO:_master_model_container: 9
2024-05-20 12:45:55,927:INFO:_display_container: 2
2024-05-20 12:45:55,927:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-20 12:45:55,928:INFO:create_model() successfully completed......................................
2024-05-20 12:45:56,018:INFO:SubProcess create_model() end ==================================
2024-05-20 12:45:56,018:INFO:Creating metrics dataframe
2024-05-20 12:45:56,032:INFO:Initializing Gradient Boosting Classifier
2024-05-20 12:45:56,032:INFO:Total runtime is 1.3067873279253641 minutes
2024-05-20 12:45:56,037:INFO:SubProcess create_model() called ==================================
2024-05-20 12:45:56,037:INFO:Initializing create_model()
2024-05-20 12:45:56,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:45:56,037:INFO:Checking exceptions
2024-05-20 12:45:56,037:INFO:Importing libraries
2024-05-20 12:45:56,038:INFO:Copying training dataset
2024-05-20 12:45:56,292:INFO:Defining folds
2024-05-20 12:45:56,292:INFO:Declaring metric variables
2024-05-20 12:45:56,297:INFO:Importing untrained model
2024-05-20 12:45:56,303:INFO:Gradient Boosting Classifier Imported successfully
2024-05-20 12:45:56,312:INFO:Starting cross validation
2024-05-20 12:45:56,316:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:46:41,595:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,624:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,651:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,664:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,790:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,891:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,926:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,935:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:41,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,106:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,120:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,125:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,145:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,177:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,190:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,199:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,461:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,470:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,479:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:42,502:INFO:Calculating mean and std
2024-05-20 12:46:42,504:INFO:Creating metrics dataframe
2024-05-20 12:46:42,506:INFO:Uploading results into container
2024-05-20 12:46:42,507:INFO:Uploading model into container now
2024-05-20 12:46:42,507:INFO:_master_model_container: 10
2024-05-20 12:46:42,507:INFO:_display_container: 2
2024-05-20 12:46:42,508:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-20 12:46:42,508:INFO:create_model() successfully completed......................................
2024-05-20 12:46:42,594:INFO:SubProcess create_model() end ==================================
2024-05-20 12:46:42,594:INFO:Creating metrics dataframe
2024-05-20 12:46:42,613:INFO:Initializing Linear Discriminant Analysis
2024-05-20 12:46:42,614:INFO:Total runtime is 2.083151662349701 minutes
2024-05-20 12:46:42,618:INFO:SubProcess create_model() called ==================================
2024-05-20 12:46:42,618:INFO:Initializing create_model()
2024-05-20 12:46:42,618:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:46:42,619:INFO:Checking exceptions
2024-05-20 12:46:42,619:INFO:Importing libraries
2024-05-20 12:46:42,619:INFO:Copying training dataset
2024-05-20 12:46:42,861:INFO:Defining folds
2024-05-20 12:46:42,861:INFO:Declaring metric variables
2024-05-20 12:46:42,866:INFO:Importing untrained model
2024-05-20 12:46:42,870:INFO:Linear Discriminant Analysis Imported successfully
2024-05-20 12:46:42,879:INFO:Starting cross validation
2024-05-20 12:46:42,882:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:46:45,171:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,305:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,337:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,413:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,800:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:45,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,049:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,058:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,066:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,096:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,105:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,117:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:46,148:INFO:Calculating mean and std
2024-05-20 12:46:46,150:INFO:Creating metrics dataframe
2024-05-20 12:46:46,152:INFO:Uploading results into container
2024-05-20 12:46:46,153:INFO:Uploading model into container now
2024-05-20 12:46:46,153:INFO:_master_model_container: 11
2024-05-20 12:46:46,154:INFO:_display_container: 2
2024-05-20 12:46:46,154:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-20 12:46:46,155:INFO:create_model() successfully completed......................................
2024-05-20 12:46:46,233:INFO:SubProcess create_model() end ==================================
2024-05-20 12:46:46,234:INFO:Creating metrics dataframe
2024-05-20 12:46:46,247:INFO:Initializing Extra Trees Classifier
2024-05-20 12:46:46,247:INFO:Total runtime is 2.1436962127685546 minutes
2024-05-20 12:46:46,251:INFO:SubProcess create_model() called ==================================
2024-05-20 12:46:46,252:INFO:Initializing create_model()
2024-05-20 12:46:46,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:46:46,252:INFO:Checking exceptions
2024-05-20 12:46:46,252:INFO:Importing libraries
2024-05-20 12:46:46,252:INFO:Copying training dataset
2024-05-20 12:46:46,476:INFO:Defining folds
2024-05-20 12:46:46,476:INFO:Declaring metric variables
2024-05-20 12:46:46,482:INFO:Importing untrained model
2024-05-20 12:46:46,487:INFO:Extra Trees Classifier Imported successfully
2024-05-20 12:46:46,496:INFO:Starting cross validation
2024-05-20 12:46:46,500:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:46:48,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:48,823:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:48,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,277:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,808:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,847:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,861:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,868:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,937:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,937:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:49,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,014:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,024:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,124:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,134:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,143:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:46:50,176:INFO:Calculating mean and std
2024-05-20 12:46:50,178:INFO:Creating metrics dataframe
2024-05-20 12:46:50,180:INFO:Uploading results into container
2024-05-20 12:46:50,181:INFO:Uploading model into container now
2024-05-20 12:46:50,182:INFO:_master_model_container: 12
2024-05-20 12:46:50,182:INFO:_display_container: 2
2024-05-20 12:46:50,182:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-20 12:46:50,183:INFO:create_model() successfully completed......................................
2024-05-20 12:46:50,274:INFO:SubProcess create_model() end ==================================
2024-05-20 12:46:50,275:INFO:Creating metrics dataframe
2024-05-20 12:46:50,292:INFO:Initializing Extreme Gradient Boosting
2024-05-20 12:46:50,292:INFO:Total runtime is 2.2111209273338317 minutes
2024-05-20 12:46:50,296:INFO:SubProcess create_model() called ==================================
2024-05-20 12:46:50,297:INFO:Initializing create_model()
2024-05-20 12:46:50,297:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:46:50,297:INFO:Checking exceptions
2024-05-20 12:46:50,297:INFO:Importing libraries
2024-05-20 12:46:50,297:INFO:Copying training dataset
2024-05-20 12:46:50,542:INFO:Defining folds
2024-05-20 12:46:50,542:INFO:Declaring metric variables
2024-05-20 12:46:50,546:INFO:Importing untrained model
2024-05-20 12:46:50,551:INFO:Extreme Gradient Boosting Imported successfully
2024-05-20 12:46:50,560:INFO:Starting cross validation
2024-05-20 12:46:50,563:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:47:03,494:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,510:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,556:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,665:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,682:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,696:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,741:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,744:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,758:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,775:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,908:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,979:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:03,997:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:04,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:04,006:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:04,040:INFO:Calculating mean and std
2024-05-20 12:47:04,042:INFO:Creating metrics dataframe
2024-05-20 12:47:04,045:INFO:Uploading results into container
2024-05-20 12:47:04,046:INFO:Uploading model into container now
2024-05-20 12:47:04,047:INFO:_master_model_container: 13
2024-05-20 12:47:04,047:INFO:_display_container: 2
2024-05-20 12:47:04,048:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-20 12:47:04,048:INFO:create_model() successfully completed......................................
2024-05-20 12:47:04,134:INFO:SubProcess create_model() end ==================================
2024-05-20 12:47:04,134:INFO:Creating metrics dataframe
2024-05-20 12:47:04,147:INFO:Initializing Light Gradient Boosting Machine
2024-05-20 12:47:04,147:INFO:Total runtime is 2.442035710811615 minutes
2024-05-20 12:47:04,151:INFO:SubProcess create_model() called ==================================
2024-05-20 12:47:04,152:INFO:Initializing create_model()
2024-05-20 12:47:04,152:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:47:04,152:INFO:Checking exceptions
2024-05-20 12:47:04,152:INFO:Importing libraries
2024-05-20 12:47:04,152:INFO:Copying training dataset
2024-05-20 12:47:04,390:INFO:Defining folds
2024-05-20 12:47:04,390:INFO:Declaring metric variables
2024-05-20 12:47:04,395:INFO:Importing untrained model
2024-05-20 12:47:04,399:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 12:47:04,408:INFO:Starting cross validation
2024-05-20 12:47:04,411:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:47:19,465:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,502:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,556:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,571:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,589:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,691:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:19,743:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,424:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,790:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:20,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,065:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,347:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:21,383:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,737:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,752:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,763:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:22,799:INFO:Calculating mean and std
2024-05-20 12:47:22,802:INFO:Creating metrics dataframe
2024-05-20 12:47:22,807:INFO:Uploading results into container
2024-05-20 12:47:22,808:INFO:Uploading model into container now
2024-05-20 12:47:22,809:INFO:_master_model_container: 14
2024-05-20 12:47:22,809:INFO:_display_container: 2
2024-05-20 12:47:22,810:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:47:22,810:INFO:create_model() successfully completed......................................
2024-05-20 12:47:22,913:INFO:SubProcess create_model() end ==================================
2024-05-20 12:47:22,913:INFO:Creating metrics dataframe
2024-05-20 12:47:22,937:INFO:Initializing Dummy Classifier
2024-05-20 12:47:22,937:INFO:Total runtime is 2.755200306574504 minutes
2024-05-20 12:47:22,945:INFO:SubProcess create_model() called ==================================
2024-05-20 12:47:22,945:INFO:Initializing create_model()
2024-05-20 12:47:22,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ABD26CCEE0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:47:22,946:INFO:Checking exceptions
2024-05-20 12:47:22,946:INFO:Importing libraries
2024-05-20 12:47:22,946:INFO:Copying training dataset
2024-05-20 12:47:23,227:INFO:Defining folds
2024-05-20 12:47:23,227:INFO:Declaring metric variables
2024-05-20 12:47:23,232:INFO:Importing untrained model
2024-05-20 12:47:23,237:INFO:Dummy Classifier Imported successfully
2024-05-20 12:47:23,246:INFO:Starting cross validation
2024-05-20 12:47:23,249:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:47:23,965:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:23,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:23,995:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,094:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,103:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,111:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,336:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,344:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,424:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,432:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,440:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,505:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,634:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,647:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,657:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,722:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,803:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,812:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,846:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,851:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:47:24,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:47:24,878:INFO:Calculating mean and std
2024-05-20 12:47:24,880:INFO:Creating metrics dataframe
2024-05-20 12:47:24,884:INFO:Uploading results into container
2024-05-20 12:47:24,885:INFO:Uploading model into container now
2024-05-20 12:47:24,885:INFO:_master_model_container: 15
2024-05-20 12:47:24,886:INFO:_display_container: 2
2024-05-20 12:47:24,886:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-20 12:47:24,886:INFO:create_model() successfully completed......................................
2024-05-20 12:47:24,972:INFO:SubProcess create_model() end ==================================
2024-05-20 12:47:24,972:INFO:Creating metrics dataframe
2024-05-20 12:47:24,991:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-20 12:47:25,006:INFO:Initializing create_model()
2024-05-20 12:47:25,006:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ABD2873F70>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:47:25,006:INFO:Checking exceptions
2024-05-20 12:47:25,008:INFO:Importing libraries
2024-05-20 12:47:25,008:INFO:Copying training dataset
2024-05-20 12:47:25,254:INFO:Defining folds
2024-05-20 12:47:25,255:INFO:Declaring metric variables
2024-05-20 12:47:25,255:INFO:Importing untrained model
2024-05-20 12:47:25,255:INFO:Declaring custom model
2024-05-20 12:47:25,256:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 12:47:25,260:INFO:Cross validation set to False
2024-05-20 12:47:25,261:INFO:Fitting Model
2024-05-20 12:47:25,800:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-20 12:47:25,829:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.028930 seconds.
2024-05-20 12:47:25,830:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-20 12:47:25,844:INFO:[LightGBM] [Info] Total Bins 87481
2024-05-20 12:47:25,848:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 351
2024-05-20 12:47:25,851:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-20 12:47:25,851:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-20 12:47:27,021:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:47:27,021:INFO:create_model() successfully completed......................................
2024-05-20 12:47:27,172:INFO:_master_model_container: 15
2024-05-20 12:47:27,172:INFO:_display_container: 2
2024-05-20 12:47:27,173:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:47:27,173:INFO:compare_models() successfully completed......................................
2024-05-20 12:49:54,245:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:49:54,245:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:49:54,245:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:49:54,245:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 12:50:54,513:INFO:PyCaret ClassificationExperiment
2024-05-20 12:50:54,513:INFO:Logging name: clf-default-name
2024-05-20 12:50:54,513:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:50:54,513:INFO:version 3.3.2
2024-05-20 12:50:54,514:INFO:Initializing setup()
2024-05-20 12:50:54,514:INFO:self.USI: 17b3
2024-05-20 12:50:54,514:INFO:self._variable_keys: {'X_train', 'seed', 'idx', 'y_test', 'n_jobs_param', 'exp_name_log', 'memory', 'fix_imbalance', '_ml_usecase', 'y_train', 'USI', 'pipeline', 'fold_generator', 'target_param', 'gpu_param', 'gpu_n_jobs_param', 'fold_groups_param', 'X', 'y', '_available_plots', 'log_plots_param', 'exp_id', 'is_multiclass', 'X_test', 'data', 'logging_param', 'fold_shuffle_param', 'html_param'}
2024-05-20 12:50:54,514:INFO:Checking environment
2024-05-20 12:50:54,514:INFO:python_version: 3.10.0
2024-05-20 12:50:54,514:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:50:54,514:INFO:machine: AMD64
2024-05-20 12:50:54,514:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:50:54,520:INFO:Memory: svmem(total=16993001472, available=2340429824, percent=86.2, used=14652571648, free=2340429824)
2024-05-20 12:50:54,520:INFO:Physical Core: 6
2024-05-20 12:50:54,520:INFO:Logical Core: 12
2024-05-20 12:50:54,520:INFO:Checking libraries
2024-05-20 12:50:54,520:INFO:System:
2024-05-20 12:50:54,520:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:50:54,520:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:50:54,520:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:50:54,520:INFO:PyCaret required dependencies:
2024-05-20 12:50:54,632:INFO:                 pip: 24.0
2024-05-20 12:50:54,632:INFO:          setuptools: 57.4.0
2024-05-20 12:50:54,632:INFO:             pycaret: 3.3.2
2024-05-20 12:50:54,632:INFO:             IPython: 8.23.0
2024-05-20 12:50:54,632:INFO:          ipywidgets: 8.1.2
2024-05-20 12:50:54,632:INFO:                tqdm: 4.66.2
2024-05-20 12:50:54,632:INFO:               numpy: 1.26.3
2024-05-20 12:50:54,632:INFO:              pandas: 2.1.4
2024-05-20 12:50:54,633:INFO:              jinja2: 3.1.2
2024-05-20 12:50:54,633:INFO:               scipy: 1.11.4
2024-05-20 12:50:54,633:INFO:              joblib: 1.3.2
2024-05-20 12:50:54,633:INFO:             sklearn: 1.4.2
2024-05-20 12:50:54,633:INFO:                pyod: 1.1.3
2024-05-20 12:50:54,633:INFO:            imblearn: 0.12.2
2024-05-20 12:50:54,633:INFO:   category_encoders: 2.6.3
2024-05-20 12:50:54,633:INFO:            lightgbm: 4.3.0
2024-05-20 12:50:54,633:INFO:               numba: 0.59.1
2024-05-20 12:50:54,633:INFO:            requests: 2.31.0
2024-05-20 12:50:54,633:INFO:          matplotlib: 3.7.5
2024-05-20 12:50:54,633:INFO:          scikitplot: 0.3.7
2024-05-20 12:50:54,633:INFO:         yellowbrick: 1.5
2024-05-20 12:50:54,633:INFO:              plotly: 5.22.0
2024-05-20 12:50:54,633:INFO:    plotly-resampler: Not installed
2024-05-20 12:50:54,633:INFO:             kaleido: 0.2.1
2024-05-20 12:50:54,633:INFO:           schemdraw: 0.15
2024-05-20 12:50:54,633:INFO:         statsmodels: 0.14.2
2024-05-20 12:50:54,634:INFO:              sktime: 0.26.0
2024-05-20 12:50:54,634:INFO:               tbats: 1.1.3
2024-05-20 12:50:54,634:INFO:            pmdarima: 2.0.4
2024-05-20 12:50:54,634:INFO:              psutil: 5.9.8
2024-05-20 12:50:54,634:INFO:          markupsafe: 2.1.3
2024-05-20 12:50:54,634:INFO:             pickle5: Not installed
2024-05-20 12:50:54,634:INFO:         cloudpickle: 3.0.0
2024-05-20 12:50:54,634:INFO:         deprecation: 2.1.0
2024-05-20 12:50:54,635:INFO:              xxhash: 3.4.1
2024-05-20 12:50:54,635:INFO:           wurlitzer: Not installed
2024-05-20 12:50:54,635:INFO:PyCaret optional dependencies:
2024-05-20 12:50:54,705:INFO:                shap: Not installed
2024-05-20 12:50:54,706:INFO:           interpret: Not installed
2024-05-20 12:50:54,706:INFO:                umap: Not installed
2024-05-20 12:50:54,706:INFO:     ydata_profiling: Not installed
2024-05-20 12:50:54,706:INFO:  explainerdashboard: Not installed
2024-05-20 12:50:54,706:INFO:             autoviz: Not installed
2024-05-20 12:50:54,706:INFO:           fairlearn: Not installed
2024-05-20 12:50:54,706:INFO:          deepchecks: Not installed
2024-05-20 12:50:54,706:INFO:             xgboost: 2.0.3
2024-05-20 12:50:54,706:INFO:            catboost: Not installed
2024-05-20 12:50:54,706:INFO:              kmodes: Not installed
2024-05-20 12:50:54,706:INFO:             mlxtend: Not installed
2024-05-20 12:50:54,706:INFO:       statsforecast: Not installed
2024-05-20 12:50:54,706:INFO:        tune_sklearn: Not installed
2024-05-20 12:50:54,706:INFO:                 ray: Not installed
2024-05-20 12:50:54,706:INFO:            hyperopt: Not installed
2024-05-20 12:50:54,706:INFO:              optuna: 3.6.1
2024-05-20 12:50:54,706:INFO:               skopt: Not installed
2024-05-20 12:50:54,706:INFO:              mlflow: Not installed
2024-05-20 12:50:54,707:INFO:              gradio: Not installed
2024-05-20 12:50:54,707:INFO:             fastapi: Not installed
2024-05-20 12:50:54,707:INFO:             uvicorn: Not installed
2024-05-20 12:50:54,707:INFO:              m2cgen: Not installed
2024-05-20 12:50:54,707:INFO:           evidently: Not installed
2024-05-20 12:50:54,707:INFO:               fugue: Not installed
2024-05-20 12:50:54,707:INFO:           streamlit: Not installed
2024-05-20 12:50:54,707:INFO:             prophet: Not installed
2024-05-20 12:50:54,707:INFO:None
2024-05-20 12:50:54,707:INFO:Set up data.
2024-05-20 12:50:54,884:INFO:Set up folding strategy.
2024-05-20 12:50:54,885:INFO:Set up train/test split.
2024-05-20 12:50:55,097:INFO:Set up index.
2024-05-20 12:50:55,103:INFO:Assigning column types.
2024-05-20 12:50:55,357:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:50:55,418:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,423:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,471:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,475:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,536:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,537:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,576:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,580:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,580:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:50:55,643:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,681:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,685:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,747:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:50:55,785:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,788:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,789:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:50:55,887:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,891:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,992:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:55,996:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:55,998:INFO:Preparing preprocessing pipeline...
2024-05-20 12:50:56,034:INFO:Set up label encoding.
2024-05-20 12:50:56,034:INFO:Set up simple imputation.
2024-05-20 12:50:56,505:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:50:56,522:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-20 12:50:56,522:INFO:Creating final display dataframe.
2024-05-20 12:50:58,045:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              17b3
2024-05-20 12:50:58,161:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:58,165:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:58,269:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:50:58,273:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:50:58,274:INFO:setup() successfully completed in 3.77s...............
2024-05-20 12:50:59,498:INFO:PyCaret ClassificationExperiment
2024-05-20 12:50:59,498:INFO:Logging name: clf-default-name
2024-05-20 12:50:59,498:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 12:50:59,498:INFO:version 3.3.2
2024-05-20 12:50:59,498:INFO:Initializing setup()
2024-05-20 12:50:59,499:INFO:self.USI: 8e76
2024-05-20 12:50:59,499:INFO:self._variable_keys: {'X_train', 'seed', 'idx', 'y_test', 'n_jobs_param', 'exp_name_log', 'memory', 'fix_imbalance', '_ml_usecase', 'y_train', 'USI', 'pipeline', 'fold_generator', 'target_param', 'gpu_param', 'gpu_n_jobs_param', 'fold_groups_param', 'X', 'y', '_available_plots', 'log_plots_param', 'exp_id', 'is_multiclass', 'X_test', 'data', 'logging_param', 'fold_shuffle_param', 'html_param'}
2024-05-20 12:50:59,499:INFO:Checking environment
2024-05-20 12:50:59,499:INFO:python_version: 3.10.0
2024-05-20 12:50:59,499:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 12:50:59,499:INFO:machine: AMD64
2024-05-20 12:50:59,499:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 12:50:59,505:INFO:Memory: svmem(total=16993001472, available=2295738368, percent=86.5, used=14697263104, free=2295738368)
2024-05-20 12:50:59,506:INFO:Physical Core: 6
2024-05-20 12:50:59,506:INFO:Logical Core: 12
2024-05-20 12:50:59,506:INFO:Checking libraries
2024-05-20 12:50:59,506:INFO:System:
2024-05-20 12:50:59,506:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 12:50:59,506:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 12:50:59,506:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 12:50:59,506:INFO:PyCaret required dependencies:
2024-05-20 12:50:59,506:INFO:                 pip: 24.0
2024-05-20 12:50:59,506:INFO:          setuptools: 57.4.0
2024-05-20 12:50:59,506:INFO:             pycaret: 3.3.2
2024-05-20 12:50:59,506:INFO:             IPython: 8.23.0
2024-05-20 12:50:59,506:INFO:          ipywidgets: 8.1.2
2024-05-20 12:50:59,507:INFO:                tqdm: 4.66.2
2024-05-20 12:50:59,507:INFO:               numpy: 1.26.3
2024-05-20 12:50:59,507:INFO:              pandas: 2.1.4
2024-05-20 12:50:59,507:INFO:              jinja2: 3.1.2
2024-05-20 12:50:59,507:INFO:               scipy: 1.11.4
2024-05-20 12:50:59,507:INFO:              joblib: 1.3.2
2024-05-20 12:50:59,507:INFO:             sklearn: 1.4.2
2024-05-20 12:50:59,507:INFO:                pyod: 1.1.3
2024-05-20 12:50:59,507:INFO:            imblearn: 0.12.2
2024-05-20 12:50:59,507:INFO:   category_encoders: 2.6.3
2024-05-20 12:50:59,507:INFO:            lightgbm: 4.3.0
2024-05-20 12:50:59,507:INFO:               numba: 0.59.1
2024-05-20 12:50:59,507:INFO:            requests: 2.31.0
2024-05-20 12:50:59,507:INFO:          matplotlib: 3.7.5
2024-05-20 12:50:59,507:INFO:          scikitplot: 0.3.7
2024-05-20 12:50:59,507:INFO:         yellowbrick: 1.5
2024-05-20 12:50:59,507:INFO:              plotly: 5.22.0
2024-05-20 12:50:59,508:INFO:    plotly-resampler: Not installed
2024-05-20 12:50:59,508:INFO:             kaleido: 0.2.1
2024-05-20 12:50:59,508:INFO:           schemdraw: 0.15
2024-05-20 12:50:59,508:INFO:         statsmodels: 0.14.2
2024-05-20 12:50:59,508:INFO:              sktime: 0.26.0
2024-05-20 12:50:59,508:INFO:               tbats: 1.1.3
2024-05-20 12:50:59,508:INFO:            pmdarima: 2.0.4
2024-05-20 12:50:59,508:INFO:              psutil: 5.9.8
2024-05-20 12:50:59,508:INFO:          markupsafe: 2.1.3
2024-05-20 12:50:59,508:INFO:             pickle5: Not installed
2024-05-20 12:50:59,508:INFO:         cloudpickle: 3.0.0
2024-05-20 12:50:59,508:INFO:         deprecation: 2.1.0
2024-05-20 12:50:59,508:INFO:              xxhash: 3.4.1
2024-05-20 12:50:59,508:INFO:           wurlitzer: Not installed
2024-05-20 12:50:59,508:INFO:PyCaret optional dependencies:
2024-05-20 12:50:59,508:INFO:                shap: Not installed
2024-05-20 12:50:59,509:INFO:           interpret: Not installed
2024-05-20 12:50:59,509:INFO:                umap: Not installed
2024-05-20 12:50:59,509:INFO:     ydata_profiling: Not installed
2024-05-20 12:50:59,509:INFO:  explainerdashboard: Not installed
2024-05-20 12:50:59,509:INFO:             autoviz: Not installed
2024-05-20 12:50:59,509:INFO:           fairlearn: Not installed
2024-05-20 12:50:59,509:INFO:          deepchecks: Not installed
2024-05-20 12:50:59,509:INFO:             xgboost: 2.0.3
2024-05-20 12:50:59,509:INFO:            catboost: Not installed
2024-05-20 12:50:59,509:INFO:              kmodes: Not installed
2024-05-20 12:50:59,509:INFO:             mlxtend: Not installed
2024-05-20 12:50:59,509:INFO:       statsforecast: Not installed
2024-05-20 12:50:59,509:INFO:        tune_sklearn: Not installed
2024-05-20 12:50:59,509:INFO:                 ray: Not installed
2024-05-20 12:50:59,509:INFO:            hyperopt: Not installed
2024-05-20 12:50:59,509:INFO:              optuna: 3.6.1
2024-05-20 12:50:59,509:INFO:               skopt: Not installed
2024-05-20 12:50:59,509:INFO:              mlflow: Not installed
2024-05-20 12:50:59,510:INFO:              gradio: Not installed
2024-05-20 12:50:59,510:INFO:             fastapi: Not installed
2024-05-20 12:50:59,510:INFO:             uvicorn: Not installed
2024-05-20 12:50:59,510:INFO:              m2cgen: Not installed
2024-05-20 12:50:59,510:INFO:           evidently: Not installed
2024-05-20 12:50:59,510:INFO:               fugue: Not installed
2024-05-20 12:50:59,510:INFO:           streamlit: Not installed
2024-05-20 12:50:59,510:INFO:             prophet: Not installed
2024-05-20 12:50:59,510:INFO:None
2024-05-20 12:50:59,510:INFO:Set up data.
2024-05-20 12:50:59,655:INFO:Set up folding strategy.
2024-05-20 12:50:59,655:INFO:Set up train/test split.
2024-05-20 12:50:59,966:INFO:Set up index.
2024-05-20 12:50:59,971:INFO:Assigning column types.
2024-05-20 12:51:00,259:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 12:51:00,321:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,323:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,366:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,371:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,432:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,433:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,471:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,474:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,475:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 12:51:00,539:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,579:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,583:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,649:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 12:51:00,689:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,693:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,694:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 12:51:00,804:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,809:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,928:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:00,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:00,934:INFO:Preparing preprocessing pipeline...
2024-05-20 12:51:00,968:INFO:Set up label encoding.
2024-05-20 12:51:00,968:INFO:Set up simple imputation.
2024-05-20 12:51:01,469:INFO:Finished creating preprocessing pipeline.
2024-05-20 12:51:01,477:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-20 12:51:01,477:INFO:Creating final display dataframe.
2024-05-20 12:51:02,483:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              8e76
2024-05-20 12:51:02,626:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:02,630:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:02,729:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 12:51:02,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 12:51:02,734:INFO:setup() successfully completed in 3.24s...............
2024-05-20 12:51:04,340:INFO:Initializing compare_models()
2024-05-20 12:51:04,340:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-20 12:51:04,340:INFO:Checking exceptions
2024-05-20 12:51:04,502:INFO:Preparing display monitor
2024-05-20 12:51:04,532:INFO:Initializing Logistic Regression
2024-05-20 12:51:04,532:INFO:Total runtime is 0.0 minutes
2024-05-20 12:51:04,537:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:04,537:INFO:Initializing create_model()
2024-05-20 12:51:04,537:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:04,537:INFO:Checking exceptions
2024-05-20 12:51:04,538:INFO:Importing libraries
2024-05-20 12:51:04,538:INFO:Copying training dataset
2024-05-20 12:51:04,870:INFO:Defining folds
2024-05-20 12:51:04,870:INFO:Declaring metric variables
2024-05-20 12:51:04,875:INFO:Importing untrained model
2024-05-20 12:51:04,880:INFO:Logistic Regression Imported successfully
2024-05-20 12:51:04,890:INFO:Starting cross validation
2024-05-20 12:51:04,893:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:11,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,283:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,378:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,532:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,541:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,548:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,585:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,613:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,621:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,761:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,770:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,849:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,854:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,862:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:11,992:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:11,999:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,046:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:12,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:12,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:12,106:INFO:Calculating mean and std
2024-05-20 12:51:12,108:INFO:Creating metrics dataframe
2024-05-20 12:51:12,112:INFO:Uploading results into container
2024-05-20 12:51:12,113:INFO:Uploading model into container now
2024-05-20 12:51:12,114:INFO:_master_model_container: 1
2024-05-20 12:51:12,114:INFO:_display_container: 2
2024-05-20 12:51:12,115:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-20 12:51:12,115:INFO:create_model() successfully completed......................................
2024-05-20 12:51:12,238:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:12,238:INFO:Creating metrics dataframe
2024-05-20 12:51:12,247:INFO:Initializing K Neighbors Classifier
2024-05-20 12:51:12,247:INFO:Total runtime is 0.12857633431752521 minutes
2024-05-20 12:51:12,251:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:12,251:INFO:Initializing create_model()
2024-05-20 12:51:12,251:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:12,252:INFO:Checking exceptions
2024-05-20 12:51:12,252:INFO:Importing libraries
2024-05-20 12:51:12,252:INFO:Copying training dataset
2024-05-20 12:51:12,490:INFO:Defining folds
2024-05-20 12:51:12,490:INFO:Declaring metric variables
2024-05-20 12:51:12,496:INFO:Importing untrained model
2024-05-20 12:51:12,502:INFO:K Neighbors Classifier Imported successfully
2024-05-20 12:51:12,514:INFO:Starting cross validation
2024-05-20 12:51:12,517:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:14,447:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,462:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,480:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,523:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,677:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:14,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,012:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,026:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,038:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,119:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:15,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,620:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,630:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,744:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,754:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:17,773:INFO:Calculating mean and std
2024-05-20 12:51:17,776:INFO:Creating metrics dataframe
2024-05-20 12:51:17,779:INFO:Uploading results into container
2024-05-20 12:51:17,780:INFO:Uploading model into container now
2024-05-20 12:51:17,780:INFO:_master_model_container: 2
2024-05-20 12:51:17,781:INFO:_display_container: 2
2024-05-20 12:51:17,781:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-20 12:51:17,781:INFO:create_model() successfully completed......................................
2024-05-20 12:51:17,908:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:17,908:INFO:Creating metrics dataframe
2024-05-20 12:51:17,918:INFO:Initializing Naive Bayes
2024-05-20 12:51:17,918:INFO:Total runtime is 0.22309165000915526 minutes
2024-05-20 12:51:17,923:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:17,923:INFO:Initializing create_model()
2024-05-20 12:51:17,923:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:17,924:INFO:Checking exceptions
2024-05-20 12:51:17,924:INFO:Importing libraries
2024-05-20 12:51:17,924:INFO:Copying training dataset
2024-05-20 12:51:18,180:INFO:Defining folds
2024-05-20 12:51:18,180:INFO:Declaring metric variables
2024-05-20 12:51:18,185:INFO:Importing untrained model
2024-05-20 12:51:18,190:INFO:Naive Bayes Imported successfully
2024-05-20 12:51:18,201:INFO:Starting cross validation
2024-05-20 12:51:18,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:18,622:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,648:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,745:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,807:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,875:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,903:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:18,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,296:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,313:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,501:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,510:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:19,533:INFO:Calculating mean and std
2024-05-20 12:51:19,536:INFO:Creating metrics dataframe
2024-05-20 12:51:19,538:INFO:Uploading results into container
2024-05-20 12:51:19,539:INFO:Uploading model into container now
2024-05-20 12:51:19,539:INFO:_master_model_container: 3
2024-05-20 12:51:19,540:INFO:_display_container: 2
2024-05-20 12:51:19,540:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-20 12:51:19,540:INFO:create_model() successfully completed......................................
2024-05-20 12:51:19,670:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:19,670:INFO:Creating metrics dataframe
2024-05-20 12:51:19,681:INFO:Initializing Decision Tree Classifier
2024-05-20 12:51:19,692:INFO:Total runtime is 0.2526701172192891 minutes
2024-05-20 12:51:19,697:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:19,697:INFO:Initializing create_model()
2024-05-20 12:51:19,698:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:19,698:INFO:Checking exceptions
2024-05-20 12:51:19,698:INFO:Importing libraries
2024-05-20 12:51:19,698:INFO:Copying training dataset
2024-05-20 12:51:19,950:INFO:Defining folds
2024-05-20 12:51:19,950:INFO:Declaring metric variables
2024-05-20 12:51:19,955:INFO:Importing untrained model
2024-05-20 12:51:19,960:INFO:Decision Tree Classifier Imported successfully
2024-05-20 12:51:19,969:INFO:Starting cross validation
2024-05-20 12:51:19,971:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:20,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:20,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:20,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:20,890:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,006:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,022:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,037:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,089:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,106:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,111:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,118:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,163:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,179:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,264:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,281:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,289:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,295:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,305:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,324:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,472:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,583:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,595:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,600:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,650:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,664:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,668:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:21,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:21,750:INFO:Calculating mean and std
2024-05-20 12:51:21,753:INFO:Creating metrics dataframe
2024-05-20 12:51:21,756:INFO:Uploading results into container
2024-05-20 12:51:21,756:INFO:Uploading model into container now
2024-05-20 12:51:21,757:INFO:_master_model_container: 4
2024-05-20 12:51:21,758:INFO:_display_container: 2
2024-05-20 12:51:21,758:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-20 12:51:21,758:INFO:create_model() successfully completed......................................
2024-05-20 12:51:21,862:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:21,862:INFO:Creating metrics dataframe
2024-05-20 12:51:21,872:INFO:Initializing SVM - Linear Kernel
2024-05-20 12:51:21,872:INFO:Total runtime is 0.288998277982076 minutes
2024-05-20 12:51:21,877:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:21,877:INFO:Initializing create_model()
2024-05-20 12:51:21,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:21,878:INFO:Checking exceptions
2024-05-20 12:51:21,878:INFO:Importing libraries
2024-05-20 12:51:21,878:INFO:Copying training dataset
2024-05-20 12:51:22,117:INFO:Defining folds
2024-05-20 12:51:22,117:INFO:Declaring metric variables
2024-05-20 12:51:22,122:INFO:Importing untrained model
2024-05-20 12:51:22,128:INFO:SVM - Linear Kernel Imported successfully
2024-05-20 12:51:22,139:INFO:Starting cross validation
2024-05-20 12:51:22,142:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:22,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,016:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,024:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,106:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,124:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,156:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,182:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,189:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,274:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,376:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,470:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,476:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,481:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,542:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,549:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,636:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,696:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,763:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,789:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:23,798:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:23,824:INFO:Calculating mean and std
2024-05-20 12:51:23,826:INFO:Creating metrics dataframe
2024-05-20 12:51:23,828:INFO:Uploading results into container
2024-05-20 12:51:23,829:INFO:Uploading model into container now
2024-05-20 12:51:23,830:INFO:_master_model_container: 5
2024-05-20 12:51:23,830:INFO:_display_container: 2
2024-05-20 12:51:23,831:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-20 12:51:23,831:INFO:create_model() successfully completed......................................
2024-05-20 12:51:23,951:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:23,951:INFO:Creating metrics dataframe
2024-05-20 12:51:23,961:INFO:Initializing Ridge Classifier
2024-05-20 12:51:23,962:INFO:Total runtime is 0.32383406162261963 minutes
2024-05-20 12:51:23,966:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:23,967:INFO:Initializing create_model()
2024-05-20 12:51:23,967:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:23,967:INFO:Checking exceptions
2024-05-20 12:51:23,967:INFO:Importing libraries
2024-05-20 12:51:23,967:INFO:Copying training dataset
2024-05-20 12:51:24,214:INFO:Defining folds
2024-05-20 12:51:24,214:INFO:Declaring metric variables
2024-05-20 12:51:24,219:INFO:Importing untrained model
2024-05-20 12:51:24,223:INFO:Ridge Classifier Imported successfully
2024-05-20 12:51:24,232:INFO:Starting cross validation
2024-05-20 12:51:24,234:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:24,787:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:24,815:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,845:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,853:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:24,861:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,950:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:24,955:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:24,959:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,066:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,161:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,215:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,400:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,463:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,467:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,544:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:25,548:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:25,578:INFO:Calculating mean and std
2024-05-20 12:51:25,581:INFO:Creating metrics dataframe
2024-05-20 12:51:25,587:INFO:Uploading results into container
2024-05-20 12:51:25,588:INFO:Uploading model into container now
2024-05-20 12:51:25,589:INFO:_master_model_container: 6
2024-05-20 12:51:25,589:INFO:_display_container: 2
2024-05-20 12:51:25,590:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-20 12:51:25,590:INFO:create_model() successfully completed......................................
2024-05-20 12:51:25,719:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:25,719:INFO:Creating metrics dataframe
2024-05-20 12:51:25,734:INFO:Initializing Random Forest Classifier
2024-05-20 12:51:25,734:INFO:Total runtime is 0.35336756308873496 minutes
2024-05-20 12:51:25,741:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:25,741:INFO:Initializing create_model()
2024-05-20 12:51:25,741:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:25,741:INFO:Checking exceptions
2024-05-20 12:51:25,741:INFO:Importing libraries
2024-05-20 12:51:25,742:INFO:Copying training dataset
2024-05-20 12:51:25,984:INFO:Defining folds
2024-05-20 12:51:25,984:INFO:Declaring metric variables
2024-05-20 12:51:25,989:INFO:Importing untrained model
2024-05-20 12:51:25,993:INFO:Random Forest Classifier Imported successfully
2024-05-20 12:51:26,002:INFO:Starting cross validation
2024-05-20 12:51:26,005:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:50,406:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:50,422:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:50,602:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:50,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,257:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,274:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,302:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,321:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,334:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,347:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,358:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,359:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,387:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,388:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,463:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:51,467:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:51,487:INFO:Calculating mean and std
2024-05-20 12:51:51,489:INFO:Creating metrics dataframe
2024-05-20 12:51:51,491:INFO:Uploading results into container
2024-05-20 12:51:51,492:INFO:Uploading model into container now
2024-05-20 12:51:51,492:INFO:_master_model_container: 7
2024-05-20 12:51:51,492:INFO:_display_container: 2
2024-05-20 12:51:51,493:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-20 12:51:51,493:INFO:create_model() successfully completed......................................
2024-05-20 12:51:51,600:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:51,600:INFO:Creating metrics dataframe
2024-05-20 12:51:51,611:INFO:Initializing Quadratic Discriminant Analysis
2024-05-20 12:51:51,612:INFO:Total runtime is 0.7846722165743509 minutes
2024-05-20 12:51:51,617:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:51,617:INFO:Initializing create_model()
2024-05-20 12:51:51,617:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:51,617:INFO:Checking exceptions
2024-05-20 12:51:51,617:INFO:Importing libraries
2024-05-20 12:51:51,618:INFO:Copying training dataset
2024-05-20 12:51:51,857:INFO:Defining folds
2024-05-20 12:51:51,857:INFO:Declaring metric variables
2024-05-20 12:51:51,862:INFO:Importing untrained model
2024-05-20 12:51:51,867:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-20 12:51:51,875:INFO:Starting cross validation
2024-05-20 12:51:51,877:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:52,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:52,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,378:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,387:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,410:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,532:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,559:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:53,566:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:53,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,569:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,593:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,593:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:53,602:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:53,604:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,639:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:53,646:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,656:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,659:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,665:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:53,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,755:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,777:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,824:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:53,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,848:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:53,856:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,892:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:53,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:53,922:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:53,932:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:53,938:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,954:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:53,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:53,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:54,014:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,036:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,056:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:54,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 12:51:54,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:54,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,126:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,166:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:54,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,189:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:54,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,241:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,259:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:54,263:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,273:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,274:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:54,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,303:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,309:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:54,313:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,323:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:54,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,346:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-20 12:51:54,364:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-20 12:51:54,372:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-20 12:51:54,378:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,393:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:51:54,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:51:54,425:INFO:Calculating mean and std
2024-05-20 12:51:54,447:INFO:Creating metrics dataframe
2024-05-20 12:51:54,449:INFO:Uploading results into container
2024-05-20 12:51:54,450:INFO:Uploading model into container now
2024-05-20 12:51:54,450:INFO:_master_model_container: 8
2024-05-20 12:51:54,451:INFO:_display_container: 2
2024-05-20 12:51:54,451:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-20 12:51:54,451:INFO:create_model() successfully completed......................................
2024-05-20 12:51:54,563:INFO:SubProcess create_model() end ==================================
2024-05-20 12:51:54,563:INFO:Creating metrics dataframe
2024-05-20 12:51:54,576:INFO:Initializing Ada Boost Classifier
2024-05-20 12:51:54,576:INFO:Total runtime is 0.8340587854385375 minutes
2024-05-20 12:51:54,580:INFO:SubProcess create_model() called ==================================
2024-05-20 12:51:54,581:INFO:Initializing create_model()
2024-05-20 12:51:54,581:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:51:54,581:INFO:Checking exceptions
2024-05-20 12:51:54,581:INFO:Importing libraries
2024-05-20 12:51:54,581:INFO:Copying training dataset
2024-05-20 12:51:54,818:INFO:Defining folds
2024-05-20 12:51:54,818:INFO:Declaring metric variables
2024-05-20 12:51:54,823:INFO:Importing untrained model
2024-05-20 12:51:54,828:INFO:Ada Boost Classifier Imported successfully
2024-05-20 12:51:54,837:INFO:Starting cross validation
2024-05-20 12:51:54,839:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:51:55,168:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,337:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,423:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,585:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,695:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:51:55,961:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 12:52:18,225:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,324:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,420:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,434:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,450:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,524:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,532:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:18,991:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,995:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:18,997:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:19,001:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,025:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,030:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:19,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,119:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:52:19,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:52:19,150:INFO:Calculating mean and std
2024-05-20 12:52:19,152:INFO:Creating metrics dataframe
2024-05-20 12:52:19,154:INFO:Uploading results into container
2024-05-20 12:52:19,155:INFO:Uploading model into container now
2024-05-20 12:52:19,156:INFO:_master_model_container: 9
2024-05-20 12:52:19,156:INFO:_display_container: 2
2024-05-20 12:52:19,156:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-20 12:52:19,157:INFO:create_model() successfully completed......................................
2024-05-20 12:52:19,273:INFO:SubProcess create_model() end ==================================
2024-05-20 12:52:19,274:INFO:Creating metrics dataframe
2024-05-20 12:52:19,286:INFO:Initializing Gradient Boosting Classifier
2024-05-20 12:52:19,286:INFO:Total runtime is 1.2458979884783425 minutes
2024-05-20 12:52:19,290:INFO:SubProcess create_model() called ==================================
2024-05-20 12:52:19,291:INFO:Initializing create_model()
2024-05-20 12:52:19,291:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:52:19,291:INFO:Checking exceptions
2024-05-20 12:52:19,291:INFO:Importing libraries
2024-05-20 12:52:19,291:INFO:Copying training dataset
2024-05-20 12:52:19,522:INFO:Defining folds
2024-05-20 12:52:19,522:INFO:Declaring metric variables
2024-05-20 12:52:19,529:INFO:Importing untrained model
2024-05-20 12:52:19,535:INFO:Gradient Boosting Classifier Imported successfully
2024-05-20 12:52:19,544:INFO:Starting cross validation
2024-05-20 12:52:19,547:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:03,550:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,564:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,573:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:03,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,650:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,690:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:03,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,807:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,823:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:03,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:03,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:03,834:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,044:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,055:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,084:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,096:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,113:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,120:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,145:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,165:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:04,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:04,340:INFO:Calculating mean and std
2024-05-20 12:53:04,341:INFO:Creating metrics dataframe
2024-05-20 12:53:04,345:INFO:Uploading results into container
2024-05-20 12:53:04,345:INFO:Uploading model into container now
2024-05-20 12:53:04,345:INFO:_master_model_container: 10
2024-05-20 12:53:04,346:INFO:_display_container: 2
2024-05-20 12:53:04,347:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-20 12:53:04,347:INFO:create_model() successfully completed......................................
2024-05-20 12:53:04,455:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:04,455:INFO:Creating metrics dataframe
2024-05-20 12:53:04,467:INFO:Initializing Linear Discriminant Analysis
2024-05-20 12:53:04,467:INFO:Total runtime is 1.9989199837048846 minutes
2024-05-20 12:53:04,471:INFO:SubProcess create_model() called ==================================
2024-05-20 12:53:04,471:INFO:Initializing create_model()
2024-05-20 12:53:04,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:04,471:INFO:Checking exceptions
2024-05-20 12:53:04,471:INFO:Importing libraries
2024-05-20 12:53:04,472:INFO:Copying training dataset
2024-05-20 12:53:04,703:INFO:Defining folds
2024-05-20 12:53:04,703:INFO:Declaring metric variables
2024-05-20 12:53:04,708:INFO:Importing untrained model
2024-05-20 12:53:04,713:INFO:Linear Discriminant Analysis Imported successfully
2024-05-20 12:53:04,723:INFO:Starting cross validation
2024-05-20 12:53:04,726:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:05,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,678:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,689:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,937:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,954:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:05,997:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,013:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,212:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,263:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,397:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,415:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,501:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,510:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:06,543:INFO:Calculating mean and std
2024-05-20 12:53:06,545:INFO:Creating metrics dataframe
2024-05-20 12:53:06,547:INFO:Uploading results into container
2024-05-20 12:53:06,548:INFO:Uploading model into container now
2024-05-20 12:53:06,548:INFO:_master_model_container: 11
2024-05-20 12:53:06,549:INFO:_display_container: 2
2024-05-20 12:53:06,549:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-20 12:53:06,550:INFO:create_model() successfully completed......................................
2024-05-20 12:53:06,657:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:06,657:INFO:Creating metrics dataframe
2024-05-20 12:53:06,669:INFO:Initializing Extra Trees Classifier
2024-05-20 12:53:06,689:INFO:Total runtime is 2.0359537998835244 minutes
2024-05-20 12:53:06,693:INFO:SubProcess create_model() called ==================================
2024-05-20 12:53:06,693:INFO:Initializing create_model()
2024-05-20 12:53:06,694:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:06,694:INFO:Checking exceptions
2024-05-20 12:53:06,694:INFO:Importing libraries
2024-05-20 12:53:06,694:INFO:Copying training dataset
2024-05-20 12:53:06,916:INFO:Defining folds
2024-05-20 12:53:06,916:INFO:Declaring metric variables
2024-05-20 12:53:06,921:INFO:Importing untrained model
2024-05-20 12:53:06,926:INFO:Extra Trees Classifier Imported successfully
2024-05-20 12:53:06,935:INFO:Starting cross validation
2024-05-20 12:53:06,938:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:08,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,412:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,428:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,452:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,518:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,775:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,861:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:08,936:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,979:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:08,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:09,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,191:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,210:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:09,217:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,257:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:09,261:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,281:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,290:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,295:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:09,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:09,320:INFO:Calculating mean and std
2024-05-20 12:53:09,322:INFO:Creating metrics dataframe
2024-05-20 12:53:09,326:INFO:Uploading results into container
2024-05-20 12:53:09,327:INFO:Uploading model into container now
2024-05-20 12:53:09,327:INFO:_master_model_container: 12
2024-05-20 12:53:09,328:INFO:_display_container: 2
2024-05-20 12:53:09,328:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-20 12:53:09,329:INFO:create_model() successfully completed......................................
2024-05-20 12:53:09,446:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:09,447:INFO:Creating metrics dataframe
2024-05-20 12:53:09,469:INFO:Initializing Extreme Gradient Boosting
2024-05-20 12:53:09,469:INFO:Total runtime is 2.082286496957143 minutes
2024-05-20 12:53:09,473:INFO:SubProcess create_model() called ==================================
2024-05-20 12:53:09,474:INFO:Initializing create_model()
2024-05-20 12:53:09,474:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:09,474:INFO:Checking exceptions
2024-05-20 12:53:09,474:INFO:Importing libraries
2024-05-20 12:53:09,474:INFO:Copying training dataset
2024-05-20 12:53:09,735:INFO:Defining folds
2024-05-20 12:53:09,735:INFO:Declaring metric variables
2024-05-20 12:53:09,740:INFO:Importing untrained model
2024-05-20 12:53:09,746:INFO:Extreme Gradient Boosting Imported successfully
2024-05-20 12:53:09,755:INFO:Starting cross validation
2024-05-20 12:53:09,759:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:22,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,403:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,413:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,416:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,429:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,545:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,578:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,967:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,977:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,980:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:22,997:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:23,007:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:23,109:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:23,118:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:23,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:23,145:INFO:Calculating mean and std
2024-05-20 12:53:23,147:INFO:Creating metrics dataframe
2024-05-20 12:53:23,149:INFO:Uploading results into container
2024-05-20 12:53:23,150:INFO:Uploading model into container now
2024-05-20 12:53:23,151:INFO:_master_model_container: 13
2024-05-20 12:53:23,151:INFO:_display_container: 2
2024-05-20 12:53:23,152:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-20 12:53:23,152:INFO:create_model() successfully completed......................................
2024-05-20 12:53:23,265:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:23,265:INFO:Creating metrics dataframe
2024-05-20 12:53:23,278:INFO:Initializing Light Gradient Boosting Machine
2024-05-20 12:53:23,278:INFO:Total runtime is 2.312433044115702 minutes
2024-05-20 12:53:23,282:INFO:SubProcess create_model() called ==================================
2024-05-20 12:53:23,283:INFO:Initializing create_model()
2024-05-20 12:53:23,283:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:23,283:INFO:Checking exceptions
2024-05-20 12:53:23,283:INFO:Importing libraries
2024-05-20 12:53:23,283:INFO:Copying training dataset
2024-05-20 12:53:23,515:INFO:Defining folds
2024-05-20 12:53:23,515:INFO:Declaring metric variables
2024-05-20 12:53:23,520:INFO:Importing untrained model
2024-05-20 12:53:23,525:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 12:53:23,535:INFO:Starting cross validation
2024-05-20 12:53:23,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:37,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:37,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:37,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:37,951:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:37,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:37,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,063:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,591:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,602:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,621:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,634:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,651:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:38,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,678:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,690:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:39,733:INFO:Calculating mean and std
2024-05-20 12:53:39,735:INFO:Creating metrics dataframe
2024-05-20 12:53:39,741:INFO:Uploading results into container
2024-05-20 12:53:39,743:INFO:Uploading model into container now
2024-05-20 12:53:39,744:INFO:_master_model_container: 14
2024-05-20 12:53:39,744:INFO:_display_container: 2
2024-05-20 12:53:39,745:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:53:39,745:INFO:create_model() successfully completed......................................
2024-05-20 12:53:39,946:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:39,946:INFO:Creating metrics dataframe
2024-05-20 12:53:39,961:INFO:Initializing Dummy Classifier
2024-05-20 12:53:39,961:INFO:Total runtime is 2.5904852668444316 minutes
2024-05-20 12:53:39,966:INFO:SubProcess create_model() called ==================================
2024-05-20 12:53:39,966:INFO:Initializing create_model()
2024-05-20 12:53:39,966:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002103C3BB460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:39,966:INFO:Checking exceptions
2024-05-20 12:53:39,966:INFO:Importing libraries
2024-05-20 12:53:39,966:INFO:Copying training dataset
2024-05-20 12:53:40,214:INFO:Defining folds
2024-05-20 12:53:40,214:INFO:Declaring metric variables
2024-05-20 12:53:40,219:INFO:Importing untrained model
2024-05-20 12:53:40,225:INFO:Dummy Classifier Imported successfully
2024-05-20 12:53:40,241:INFO:Starting cross validation
2024-05-20 12:53:40,243:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 12:53:40,571:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,583:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:40,598:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,648:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,666:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:40,671:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,732:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,742:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:40,753:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:40,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:40,908:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,987:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:40,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:41,003:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:41,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,146:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,163:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:41,176:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:41,223:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 12:53:41,289:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 12:53:41,311:INFO:Calculating mean and std
2024-05-20 12:53:41,313:INFO:Creating metrics dataframe
2024-05-20 12:53:41,315:INFO:Uploading results into container
2024-05-20 12:53:41,316:INFO:Uploading model into container now
2024-05-20 12:53:41,317:INFO:_master_model_container: 15
2024-05-20 12:53:41,317:INFO:_display_container: 2
2024-05-20 12:53:41,317:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-20 12:53:41,318:INFO:create_model() successfully completed......................................
2024-05-20 12:53:41,432:INFO:SubProcess create_model() end ==================================
2024-05-20 12:53:41,432:INFO:Creating metrics dataframe
2024-05-20 12:53:41,468:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-20 12:53:41,480:INFO:Initializing create_model()
2024-05-20 12:53:41,480:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002103BE4AE30>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 12:53:41,480:INFO:Checking exceptions
2024-05-20 12:53:41,482:INFO:Importing libraries
2024-05-20 12:53:41,483:INFO:Copying training dataset
2024-05-20 12:53:41,717:INFO:Defining folds
2024-05-20 12:53:41,717:INFO:Declaring metric variables
2024-05-20 12:53:41,717:INFO:Importing untrained model
2024-05-20 12:53:41,717:INFO:Declaring custom model
2024-05-20 12:53:41,718:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 12:53:41,721:INFO:Cross validation set to False
2024-05-20 12:53:41,721:INFO:Fitting Model
2024-05-20 12:53:42,046:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-20 12:53:42,089:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023060 seconds.
2024-05-20 12:53:42,090:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-20 12:53:42,093:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-20 12:53:42,096:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-20 12:53:42,099:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-20 12:53:42,099:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-20 12:53:43,312:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:53:43,312:INFO:create_model() successfully completed......................................
2024-05-20 12:53:43,482:INFO:_master_model_container: 15
2024-05-20 12:53:43,483:INFO:_display_container: 2
2024-05-20 12:53:43,483:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 12:53:43,483:INFO:compare_models() successfully completed......................................
2024-05-20 14:10:49,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 14:10:49,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 14:10:49,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 14:10:49,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-20 14:11:09,783:INFO:PyCaret ClassificationExperiment
2024-05-20 14:11:09,784:INFO:Logging name: clf-default-name
2024-05-20 14:11:09,784:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 14:11:09,784:INFO:version 3.3.2
2024-05-20 14:11:09,784:INFO:Initializing setup()
2024-05-20 14:11:09,784:INFO:self.USI: eeb2
2024-05-20 14:11:09,784:INFO:self._variable_keys: {'fold_shuffle_param', 'exp_id', 'y', 'X_test', 'fold_generator', 'logging_param', 'idx', 'y_test', 'exp_name_log', 'seed', 'X_train', '_ml_usecase', '_available_plots', 'fix_imbalance', 'n_jobs_param', 'is_multiclass', 'pipeline', 'fold_groups_param', 'data', 'y_train', 'html_param', 'memory', 'target_param', 'gpu_param', 'gpu_n_jobs_param', 'USI', 'log_plots_param', 'X'}
2024-05-20 14:11:09,784:INFO:Checking environment
2024-05-20 14:11:09,784:INFO:python_version: 3.10.0
2024-05-20 14:11:09,784:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 14:11:09,784:INFO:machine: AMD64
2024-05-20 14:11:09,784:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 14:11:09,794:INFO:Memory: svmem(total=16993001472, available=8126312448, percent=52.2, used=8866689024, free=8126312448)
2024-05-20 14:11:09,794:INFO:Physical Core: 6
2024-05-20 14:11:09,794:INFO:Logical Core: 12
2024-05-20 14:11:09,795:INFO:Checking libraries
2024-05-20 14:11:09,795:INFO:System:
2024-05-20 14:11:09,795:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 14:11:09,795:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 14:11:09,795:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 14:11:09,795:INFO:PyCaret required dependencies:
2024-05-20 14:11:09,955:INFO:                 pip: 24.0
2024-05-20 14:11:09,955:INFO:          setuptools: 57.4.0
2024-05-20 14:11:09,955:INFO:             pycaret: 3.3.2
2024-05-20 14:11:09,955:INFO:             IPython: 8.23.0
2024-05-20 14:11:09,956:INFO:          ipywidgets: 8.1.2
2024-05-20 14:11:09,956:INFO:                tqdm: 4.66.2
2024-05-20 14:11:09,956:INFO:               numpy: 1.26.3
2024-05-20 14:11:09,956:INFO:              pandas: 2.1.4
2024-05-20 14:11:09,956:INFO:              jinja2: 3.1.2
2024-05-20 14:11:09,956:INFO:               scipy: 1.11.4
2024-05-20 14:11:09,956:INFO:              joblib: 1.3.2
2024-05-20 14:11:09,956:INFO:             sklearn: 1.4.2
2024-05-20 14:11:09,956:INFO:                pyod: 1.1.3
2024-05-20 14:11:09,956:INFO:            imblearn: 0.12.2
2024-05-20 14:11:09,956:INFO:   category_encoders: 2.6.3
2024-05-20 14:11:09,956:INFO:            lightgbm: 4.3.0
2024-05-20 14:11:09,956:INFO:               numba: 0.59.1
2024-05-20 14:11:09,956:INFO:            requests: 2.31.0
2024-05-20 14:11:09,957:INFO:          matplotlib: 3.7.5
2024-05-20 14:11:09,957:INFO:          scikitplot: 0.3.7
2024-05-20 14:11:09,957:INFO:         yellowbrick: 1.5
2024-05-20 14:11:09,957:INFO:              plotly: 5.22.0
2024-05-20 14:11:09,957:INFO:    plotly-resampler: Not installed
2024-05-20 14:11:09,957:INFO:             kaleido: 0.2.1
2024-05-20 14:11:09,957:INFO:           schemdraw: 0.15
2024-05-20 14:11:09,957:INFO:         statsmodels: 0.14.2
2024-05-20 14:11:09,957:INFO:              sktime: 0.26.0
2024-05-20 14:11:09,957:INFO:               tbats: 1.1.3
2024-05-20 14:11:09,957:INFO:            pmdarima: 2.0.4
2024-05-20 14:11:09,957:INFO:              psutil: 5.9.8
2024-05-20 14:11:09,957:INFO:          markupsafe: 2.1.3
2024-05-20 14:11:09,957:INFO:             pickle5: Not installed
2024-05-20 14:11:09,957:INFO:         cloudpickle: 3.0.0
2024-05-20 14:11:09,957:INFO:         deprecation: 2.1.0
2024-05-20 14:11:09,957:INFO:              xxhash: 3.4.1
2024-05-20 14:11:09,958:INFO:           wurlitzer: Not installed
2024-05-20 14:11:09,958:INFO:PyCaret optional dependencies:
2024-05-20 14:11:10,028:INFO:                shap: Not installed
2024-05-20 14:11:10,028:INFO:           interpret: Not installed
2024-05-20 14:11:10,028:INFO:                umap: Not installed
2024-05-20 14:11:10,029:INFO:     ydata_profiling: Not installed
2024-05-20 14:11:10,029:INFO:  explainerdashboard: Not installed
2024-05-20 14:11:10,029:INFO:             autoviz: Not installed
2024-05-20 14:11:10,029:INFO:           fairlearn: Not installed
2024-05-20 14:11:10,029:INFO:          deepchecks: Not installed
2024-05-20 14:11:10,029:INFO:             xgboost: 2.0.3
2024-05-20 14:11:10,029:INFO:            catboost: Not installed
2024-05-20 14:11:10,029:INFO:              kmodes: Not installed
2024-05-20 14:11:10,029:INFO:             mlxtend: Not installed
2024-05-20 14:11:10,029:INFO:       statsforecast: Not installed
2024-05-20 14:11:10,029:INFO:        tune_sklearn: Not installed
2024-05-20 14:11:10,029:INFO:                 ray: Not installed
2024-05-20 14:11:10,029:INFO:            hyperopt: Not installed
2024-05-20 14:11:10,029:INFO:              optuna: 3.6.1
2024-05-20 14:11:10,029:INFO:               skopt: Not installed
2024-05-20 14:11:10,029:INFO:              mlflow: Not installed
2024-05-20 14:11:10,029:INFO:              gradio: Not installed
2024-05-20 14:11:10,030:INFO:             fastapi: Not installed
2024-05-20 14:11:10,030:INFO:             uvicorn: Not installed
2024-05-20 14:11:10,030:INFO:              m2cgen: Not installed
2024-05-20 14:11:10,030:INFO:           evidently: Not installed
2024-05-20 14:11:10,030:INFO:               fugue: Not installed
2024-05-20 14:11:10,030:INFO:           streamlit: Not installed
2024-05-20 14:11:10,030:INFO:             prophet: Not installed
2024-05-20 14:11:10,030:INFO:None
2024-05-20 14:11:10,030:INFO:Set up data.
2024-05-20 14:11:10,192:INFO:Set up folding strategy.
2024-05-20 14:11:10,193:INFO:Set up train/test split.
2024-05-20 14:11:10,425:INFO:Set up index.
2024-05-20 14:11:10,432:INFO:Assigning column types.
2024-05-20 14:11:10,686:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 14:11:10,746:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 14:11:10,751:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:10,821:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:10,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:10,888:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 14:11:10,889:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:10,926:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:10,930:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:10,930:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 14:11:10,991:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:11,027:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:11,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:11,092:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:11,130:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:11,133:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:11,133:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 14:11:11,230:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:11,235:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:11,333:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:11,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:11,340:INFO:Preparing preprocessing pipeline...
2024-05-20 14:11:11,374:INFO:Set up label encoding.
2024-05-20 14:11:11,375:INFO:Set up simple imputation.
2024-05-20 14:11:11,835:INFO:Finished creating preprocessing pipeline.
2024-05-20 14:11:11,865:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['teff_gspphot', 'logg_gspphot',
                                             'mh_gspphot', '0', '1', '2', '3',
                                             '4', '5', '6', '7', '8', '9', '10',
                                             '11', '12', '1...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-20 14:11:11,865:INFO:Creating final display dataframe.
2024-05-20 14:11:13,488:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 347)
5        Transformed data shape      (14101, 347)
6   Transformed train set shape       (9870, 347)
7    Transformed test set shape       (4231, 347)
8              Numeric features               346
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              eeb2
2024-05-20 14:11:13,618:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:13,622:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:13,729:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:13,733:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:13,734:INFO:setup() successfully completed in 3.96s...............
2024-05-20 14:11:13,785:INFO:PyCaret ClassificationExperiment
2024-05-20 14:11:13,785:INFO:Logging name: clf-default-name
2024-05-20 14:11:13,786:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-20 14:11:13,786:INFO:version 3.3.2
2024-05-20 14:11:13,786:INFO:Initializing setup()
2024-05-20 14:11:13,786:INFO:self.USI: b793
2024-05-20 14:11:13,786:INFO:self._variable_keys: {'fold_shuffle_param', 'exp_id', 'y', 'X_test', 'fold_generator', 'logging_param', 'idx', 'y_test', 'exp_name_log', 'seed', 'X_train', '_ml_usecase', '_available_plots', 'fix_imbalance', 'n_jobs_param', 'is_multiclass', 'pipeline', 'fold_groups_param', 'data', 'y_train', 'html_param', 'memory', 'target_param', 'gpu_param', 'gpu_n_jobs_param', 'USI', 'log_plots_param', 'X'}
2024-05-20 14:11:13,786:INFO:Checking environment
2024-05-20 14:11:13,786:INFO:python_version: 3.10.0
2024-05-20 14:11:13,786:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-20 14:11:13,786:INFO:machine: AMD64
2024-05-20 14:11:13,786:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-20 14:11:13,792:INFO:Memory: svmem(total=16993001472, available=7990448128, percent=53.0, used=9002553344, free=7990448128)
2024-05-20 14:11:13,792:INFO:Physical Core: 6
2024-05-20 14:11:13,792:INFO:Logical Core: 12
2024-05-20 14:11:13,792:INFO:Checking libraries
2024-05-20 14:11:13,792:INFO:System:
2024-05-20 14:11:13,792:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-20 14:11:13,792:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-20 14:11:13,792:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-20 14:11:13,792:INFO:PyCaret required dependencies:
2024-05-20 14:11:13,793:INFO:                 pip: 24.0
2024-05-20 14:11:13,793:INFO:          setuptools: 57.4.0
2024-05-20 14:11:13,793:INFO:             pycaret: 3.3.2
2024-05-20 14:11:13,793:INFO:             IPython: 8.23.0
2024-05-20 14:11:13,793:INFO:          ipywidgets: 8.1.2
2024-05-20 14:11:13,793:INFO:                tqdm: 4.66.2
2024-05-20 14:11:13,793:INFO:               numpy: 1.26.3
2024-05-20 14:11:13,793:INFO:              pandas: 2.1.4
2024-05-20 14:11:13,793:INFO:              jinja2: 3.1.2
2024-05-20 14:11:13,793:INFO:               scipy: 1.11.4
2024-05-20 14:11:13,793:INFO:              joblib: 1.3.2
2024-05-20 14:11:13,793:INFO:             sklearn: 1.4.2
2024-05-20 14:11:13,793:INFO:                pyod: 1.1.3
2024-05-20 14:11:13,793:INFO:            imblearn: 0.12.2
2024-05-20 14:11:13,793:INFO:   category_encoders: 2.6.3
2024-05-20 14:11:13,794:INFO:            lightgbm: 4.3.0
2024-05-20 14:11:13,794:INFO:               numba: 0.59.1
2024-05-20 14:11:13,794:INFO:            requests: 2.31.0
2024-05-20 14:11:13,794:INFO:          matplotlib: 3.7.5
2024-05-20 14:11:13,794:INFO:          scikitplot: 0.3.7
2024-05-20 14:11:13,794:INFO:         yellowbrick: 1.5
2024-05-20 14:11:13,794:INFO:              plotly: 5.22.0
2024-05-20 14:11:13,794:INFO:    plotly-resampler: Not installed
2024-05-20 14:11:13,794:INFO:             kaleido: 0.2.1
2024-05-20 14:11:13,794:INFO:           schemdraw: 0.15
2024-05-20 14:11:13,794:INFO:         statsmodels: 0.14.2
2024-05-20 14:11:13,794:INFO:              sktime: 0.26.0
2024-05-20 14:11:13,794:INFO:               tbats: 1.1.3
2024-05-20 14:11:13,794:INFO:            pmdarima: 2.0.4
2024-05-20 14:11:13,794:INFO:              psutil: 5.9.8
2024-05-20 14:11:13,794:INFO:          markupsafe: 2.1.3
2024-05-20 14:11:13,794:INFO:             pickle5: Not installed
2024-05-20 14:11:13,794:INFO:         cloudpickle: 3.0.0
2024-05-20 14:11:13,795:INFO:         deprecation: 2.1.0
2024-05-20 14:11:13,795:INFO:              xxhash: 3.4.1
2024-05-20 14:11:13,795:INFO:           wurlitzer: Not installed
2024-05-20 14:11:13,795:INFO:PyCaret optional dependencies:
2024-05-20 14:11:13,795:INFO:                shap: Not installed
2024-05-20 14:11:13,795:INFO:           interpret: Not installed
2024-05-20 14:11:13,795:INFO:                umap: Not installed
2024-05-20 14:11:13,795:INFO:     ydata_profiling: Not installed
2024-05-20 14:11:13,795:INFO:  explainerdashboard: Not installed
2024-05-20 14:11:13,795:INFO:             autoviz: Not installed
2024-05-20 14:11:13,795:INFO:           fairlearn: Not installed
2024-05-20 14:11:13,795:INFO:          deepchecks: Not installed
2024-05-20 14:11:13,795:INFO:             xgboost: 2.0.3
2024-05-20 14:11:13,795:INFO:            catboost: Not installed
2024-05-20 14:11:13,795:INFO:              kmodes: Not installed
2024-05-20 14:11:13,795:INFO:             mlxtend: Not installed
2024-05-20 14:11:13,796:INFO:       statsforecast: Not installed
2024-05-20 14:11:13,796:INFO:        tune_sklearn: Not installed
2024-05-20 14:11:13,796:INFO:                 ray: Not installed
2024-05-20 14:11:13,796:INFO:            hyperopt: Not installed
2024-05-20 14:11:13,796:INFO:              optuna: 3.6.1
2024-05-20 14:11:13,796:INFO:               skopt: Not installed
2024-05-20 14:11:13,796:INFO:              mlflow: Not installed
2024-05-20 14:11:13,796:INFO:              gradio: Not installed
2024-05-20 14:11:13,796:INFO:             fastapi: Not installed
2024-05-20 14:11:13,796:INFO:             uvicorn: Not installed
2024-05-20 14:11:13,796:INFO:              m2cgen: Not installed
2024-05-20 14:11:13,796:INFO:           evidently: Not installed
2024-05-20 14:11:13,796:INFO:               fugue: Not installed
2024-05-20 14:11:13,797:INFO:           streamlit: Not installed
2024-05-20 14:11:13,797:INFO:             prophet: Not installed
2024-05-20 14:11:13,797:INFO:None
2024-05-20 14:11:13,797:INFO:Set up data.
2024-05-20 14:11:13,971:INFO:Set up folding strategy.
2024-05-20 14:11:13,971:INFO:Set up train/test split.
2024-05-20 14:11:14,172:INFO:Set up index.
2024-05-20 14:11:14,178:INFO:Assigning column types.
2024-05-20 14:11:14,430:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-20 14:11:14,491:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,530:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:14,534:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:14,595:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,596:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,634:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:14,638:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:14,639:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-20 14:11:14,699:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,736:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:14,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:14,801:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-20 14:11:14,839:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:14,842:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:14,842:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-20 14:11:14,945:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:14,948:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:15,045:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:15,049:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:15,051:INFO:Preparing preprocessing pipeline...
2024-05-20 14:11:15,085:INFO:Set up label encoding.
2024-05-20 14:11:15,085:INFO:Set up simple imputation.
2024-05-20 14:11:15,533:INFO:Finished creating preprocessing pipeline.
2024-05-20 14:11:15,546:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['teff_gspphot', 'logg_gspphot',
                                             'mh_gspphot', '0', '1', '2', '3',
                                             '4', '5', '6', '7', '8', '9', '10',
                                             '11', '12', '1...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-20 14:11:15,547:INFO:Creating final display dataframe.
2024-05-20 14:11:16,595:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 347)
5        Transformed data shape      (14101, 347)
6   Transformed train set shape       (9870, 347)
7    Transformed test set shape       (4231, 347)
8              Numeric features               346
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              b793
2024-05-20 14:11:16,701:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:16,704:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:16,803:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-20 14:11:16,806:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-20 14:11:16,808:INFO:setup() successfully completed in 3.03s...............
2024-05-20 14:11:21,812:INFO:Initializing compare_models()
2024-05-20 14:11:21,813:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-20 14:11:21,813:INFO:Checking exceptions
2024-05-20 14:11:21,988:INFO:Preparing display monitor
2024-05-20 14:11:22,018:INFO:Initializing Logistic Regression
2024-05-20 14:11:22,019:INFO:Total runtime is 1.6697247823079427e-05 minutes
2024-05-20 14:11:22,024:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:22,024:INFO:Initializing create_model()
2024-05-20 14:11:22,024:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:22,025:INFO:Checking exceptions
2024-05-20 14:11:22,025:INFO:Importing libraries
2024-05-20 14:11:22,025:INFO:Copying training dataset
2024-05-20 14:11:22,279:INFO:Defining folds
2024-05-20 14:11:22,280:INFO:Declaring metric variables
2024-05-20 14:11:22,284:INFO:Importing untrained model
2024-05-20 14:11:22,289:INFO:Logistic Regression Imported successfully
2024-05-20 14:11:22,297:INFO:Starting cross validation
2024-05-20 14:11:22,300:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:29,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,379:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,781:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,784:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,797:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,800:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,816:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,942:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:29,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,058:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,078:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,269:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,279:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,326:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,510:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,545:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,554:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,694:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:30,745:INFO:Calculating mean and std
2024-05-20 14:11:30,747:INFO:Creating metrics dataframe
2024-05-20 14:11:30,749:INFO:Uploading results into container
2024-05-20 14:11:30,750:INFO:Uploading model into container now
2024-05-20 14:11:30,750:INFO:_master_model_container: 1
2024-05-20 14:11:30,751:INFO:_display_container: 2
2024-05-20 14:11:30,751:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-20 14:11:30,751:INFO:create_model() successfully completed......................................
2024-05-20 14:11:30,827:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:30,828:INFO:Creating metrics dataframe
2024-05-20 14:11:30,836:INFO:Initializing K Neighbors Classifier
2024-05-20 14:11:30,836:INFO:Total runtime is 0.14697158336639404 minutes
2024-05-20 14:11:30,841:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:30,841:INFO:Initializing create_model()
2024-05-20 14:11:30,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:30,841:INFO:Checking exceptions
2024-05-20 14:11:30,841:INFO:Importing libraries
2024-05-20 14:11:30,841:INFO:Copying training dataset
2024-05-20 14:11:31,081:INFO:Defining folds
2024-05-20 14:11:31,081:INFO:Declaring metric variables
2024-05-20 14:11:31,086:INFO:Importing untrained model
2024-05-20 14:11:31,091:INFO:K Neighbors Classifier Imported successfully
2024-05-20 14:11:31,100:INFO:Starting cross validation
2024-05-20 14:11:31,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:32,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:32,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:32,876:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:32,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:32,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,045:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,062:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,078:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,130:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,140:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,156:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,279:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,322:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,334:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,462:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:33,472:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:35,912:INFO:Calculating mean and std
2024-05-20 14:11:35,914:INFO:Creating metrics dataframe
2024-05-20 14:11:35,916:INFO:Uploading results into container
2024-05-20 14:11:35,917:INFO:Uploading model into container now
2024-05-20 14:11:35,918:INFO:_master_model_container: 2
2024-05-20 14:11:35,918:INFO:_display_container: 2
2024-05-20 14:11:35,919:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-20 14:11:35,919:INFO:create_model() successfully completed......................................
2024-05-20 14:11:35,996:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:35,996:INFO:Creating metrics dataframe
2024-05-20 14:11:36,005:INFO:Initializing Naive Bayes
2024-05-20 14:11:36,005:INFO:Total runtime is 0.23311542669932048 minutes
2024-05-20 14:11:36,010:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:36,010:INFO:Initializing create_model()
2024-05-20 14:11:36,010:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:36,010:INFO:Checking exceptions
2024-05-20 14:11:36,011:INFO:Importing libraries
2024-05-20 14:11:36,011:INFO:Copying training dataset
2024-05-20 14:11:36,246:INFO:Defining folds
2024-05-20 14:11:36,246:INFO:Declaring metric variables
2024-05-20 14:11:36,250:INFO:Importing untrained model
2024-05-20 14:11:36,254:INFO:Naive Bayes Imported successfully
2024-05-20 14:11:36,262:INFO:Starting cross validation
2024-05-20 14:11:36,265:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:36,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,849:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,927:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,943:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:36,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,011:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,220:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,406:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,468:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,531:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,546:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,561:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:37,582:INFO:Calculating mean and std
2024-05-20 14:11:37,584:INFO:Creating metrics dataframe
2024-05-20 14:11:37,586:INFO:Uploading results into container
2024-05-20 14:11:37,587:INFO:Uploading model into container now
2024-05-20 14:11:37,587:INFO:_master_model_container: 3
2024-05-20 14:11:37,587:INFO:_display_container: 2
2024-05-20 14:11:37,588:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-20 14:11:37,588:INFO:create_model() successfully completed......................................
2024-05-20 14:11:37,661:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:37,662:INFO:Creating metrics dataframe
2024-05-20 14:11:37,671:INFO:Initializing Decision Tree Classifier
2024-05-20 14:11:37,671:INFO:Total runtime is 0.2608816822369893 minutes
2024-05-20 14:11:37,675:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:37,676:INFO:Initializing create_model()
2024-05-20 14:11:37,676:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:37,676:INFO:Checking exceptions
2024-05-20 14:11:37,676:INFO:Importing libraries
2024-05-20 14:11:37,676:INFO:Copying training dataset
2024-05-20 14:11:37,904:INFO:Defining folds
2024-05-20 14:11:37,904:INFO:Declaring metric variables
2024-05-20 14:11:37,909:INFO:Importing untrained model
2024-05-20 14:11:37,915:INFO:Decision Tree Classifier Imported successfully
2024-05-20 14:11:37,924:INFO:Starting cross validation
2024-05-20 14:11:37,926:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:38,691:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,745:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,856:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,926:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,941:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:38,994:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,003:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,087:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,151:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,169:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,340:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,400:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:39,520:INFO:Calculating mean and std
2024-05-20 14:11:39,522:INFO:Creating metrics dataframe
2024-05-20 14:11:39,525:INFO:Uploading results into container
2024-05-20 14:11:39,525:INFO:Uploading model into container now
2024-05-20 14:11:39,526:INFO:_master_model_container: 4
2024-05-20 14:11:39,526:INFO:_display_container: 2
2024-05-20 14:11:39,527:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-20 14:11:39,527:INFO:create_model() successfully completed......................................
2024-05-20 14:11:39,599:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:39,600:INFO:Creating metrics dataframe
2024-05-20 14:11:39,610:INFO:Initializing SVM - Linear Kernel
2024-05-20 14:11:39,610:INFO:Total runtime is 0.29320719242095944 minutes
2024-05-20 14:11:39,614:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:39,615:INFO:Initializing create_model()
2024-05-20 14:11:39,615:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:39,615:INFO:Checking exceptions
2024-05-20 14:11:39,615:INFO:Importing libraries
2024-05-20 14:11:39,615:INFO:Copying training dataset
2024-05-20 14:11:39,851:INFO:Defining folds
2024-05-20 14:11:39,851:INFO:Declaring metric variables
2024-05-20 14:11:39,856:INFO:Importing untrained model
2024-05-20 14:11:39,860:INFO:SVM - Linear Kernel Imported successfully
2024-05-20 14:11:39,868:INFO:Starting cross validation
2024-05-20 14:11:39,871:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:41,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:41,913:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:41,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:41,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,097:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,118:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,128:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,632:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,688:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,694:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,875:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,884:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:42,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,987:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:42,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,162:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:43,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,413:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:11:43,417:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:43,437:INFO:Calculating mean and std
2024-05-20 14:11:43,439:INFO:Creating metrics dataframe
2024-05-20 14:11:43,443:INFO:Uploading results into container
2024-05-20 14:11:43,443:INFO:Uploading model into container now
2024-05-20 14:11:43,444:INFO:_master_model_container: 5
2024-05-20 14:11:43,444:INFO:_display_container: 2
2024-05-20 14:11:43,445:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-20 14:11:43,445:INFO:create_model() successfully completed......................................
2024-05-20 14:11:43,514:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:43,515:INFO:Creating metrics dataframe
2024-05-20 14:11:43,528:INFO:Initializing Ridge Classifier
2024-05-20 14:11:43,528:INFO:Total runtime is 0.35849629640579217 minutes
2024-05-20 14:11:43,533:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:43,533:INFO:Initializing create_model()
2024-05-20 14:11:43,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:43,534:INFO:Checking exceptions
2024-05-20 14:11:43,534:INFO:Importing libraries
2024-05-20 14:11:43,534:INFO:Copying training dataset
2024-05-20 14:11:43,757:INFO:Defining folds
2024-05-20 14:11:43,757:INFO:Declaring metric variables
2024-05-20 14:11:43,763:INFO:Importing untrained model
2024-05-20 14:11:43,768:INFO:Ridge Classifier Imported successfully
2024-05-20 14:11:43,778:INFO:Starting cross validation
2024-05-20 14:11:43,780:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:11:44,171:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28479e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,250:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.2941e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,266:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,334:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.29835e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,340:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,397:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28781e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,421:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,467:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28657e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26575e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,690:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.3125e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,732:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,751:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.30378e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,862:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26876e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,915:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,926:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,932:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-20 14:11:44,977:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:44,995:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:11:45,021:INFO:Calculating mean and std
2024-05-20 14:11:45,023:INFO:Creating metrics dataframe
2024-05-20 14:11:45,025:INFO:Uploading results into container
2024-05-20 14:11:45,026:INFO:Uploading model into container now
2024-05-20 14:11:45,027:INFO:_master_model_container: 6
2024-05-20 14:11:45,027:INFO:_display_container: 2
2024-05-20 14:11:45,028:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-20 14:11:45,028:INFO:create_model() successfully completed......................................
2024-05-20 14:11:45,112:INFO:SubProcess create_model() end ==================================
2024-05-20 14:11:45,112:INFO:Creating metrics dataframe
2024-05-20 14:11:45,123:INFO:Initializing Random Forest Classifier
2024-05-20 14:11:45,123:INFO:Total runtime is 0.38507933219273877 minutes
2024-05-20 14:11:45,128:INFO:SubProcess create_model() called ==================================
2024-05-20 14:11:45,128:INFO:Initializing create_model()
2024-05-20 14:11:45,128:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:11:45,128:INFO:Checking exceptions
2024-05-20 14:11:45,128:INFO:Importing libraries
2024-05-20 14:11:45,128:INFO:Copying training dataset
2024-05-20 14:11:45,354:INFO:Defining folds
2024-05-20 14:11:45,355:INFO:Declaring metric variables
2024-05-20 14:11:45,359:INFO:Importing untrained model
2024-05-20 14:11:45,364:INFO:Random Forest Classifier Imported successfully
2024-05-20 14:11:45,372:INFO:Starting cross validation
2024-05-20 14:11:45,375:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:12:05,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,631:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,748:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,748:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,919:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,955:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:05,994:INFO:Calculating mean and std
2024-05-20 14:12:05,996:INFO:Creating metrics dataframe
2024-05-20 14:12:05,999:INFO:Uploading results into container
2024-05-20 14:12:06,000:INFO:Uploading model into container now
2024-05-20 14:12:06,000:INFO:_master_model_container: 7
2024-05-20 14:12:06,000:INFO:_display_container: 2
2024-05-20 14:12:06,001:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-20 14:12:06,001:INFO:create_model() successfully completed......................................
2024-05-20 14:12:06,084:INFO:SubProcess create_model() end ==================================
2024-05-20 14:12:06,084:INFO:Creating metrics dataframe
2024-05-20 14:12:06,097:INFO:Initializing Quadratic Discriminant Analysis
2024-05-20 14:12:06,097:INFO:Total runtime is 0.7346620678901672 minutes
2024-05-20 14:12:06,102:INFO:SubProcess create_model() called ==================================
2024-05-20 14:12:06,102:INFO:Initializing create_model()
2024-05-20 14:12:06,102:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:12:06,102:INFO:Checking exceptions
2024-05-20 14:12:06,102:INFO:Importing libraries
2024-05-20 14:12:06,102:INFO:Copying training dataset
2024-05-20 14:12:06,322:INFO:Defining folds
2024-05-20 14:12:06,322:INFO:Declaring metric variables
2024-05-20 14:12:06,327:INFO:Importing untrained model
2024-05-20 14:12:06,332:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-20 14:12:06,342:INFO:Starting cross validation
2024-05-20 14:12:06,345:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:12:07,152:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:07,330:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:07,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:07,711:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:07,808:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:07,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:07,845:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:07,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:07,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,012:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,029:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:08,161:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,180:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:12:08,185:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:08,283:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,318:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,393:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:08,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:12:08,413:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:08,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,513:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-20 14:12:08,517:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:12:08,532:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,732:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,742:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,774:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,783:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:12:08,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,826:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:12:08,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:08,864:INFO:Calculating mean and std
2024-05-20 14:12:08,866:INFO:Creating metrics dataframe
2024-05-20 14:12:08,868:INFO:Uploading results into container
2024-05-20 14:12:08,869:INFO:Uploading model into container now
2024-05-20 14:12:08,870:INFO:_master_model_container: 8
2024-05-20 14:12:08,870:INFO:_display_container: 2
2024-05-20 14:12:08,871:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-20 14:12:08,871:INFO:create_model() successfully completed......................................
2024-05-20 14:12:08,943:INFO:SubProcess create_model() end ==================================
2024-05-20 14:12:08,943:INFO:Creating metrics dataframe
2024-05-20 14:12:08,961:INFO:Initializing Ada Boost Classifier
2024-05-20 14:12:08,961:INFO:Total runtime is 0.7823840181032816 minutes
2024-05-20 14:12:08,965:INFO:SubProcess create_model() called ==================================
2024-05-20 14:12:08,965:INFO:Initializing create_model()
2024-05-20 14:12:08,965:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:12:08,965:INFO:Checking exceptions
2024-05-20 14:12:08,965:INFO:Importing libraries
2024-05-20 14:12:08,965:INFO:Copying training dataset
2024-05-20 14:12:09,190:INFO:Defining folds
2024-05-20 14:12:09,191:INFO:Declaring metric variables
2024-05-20 14:12:09,195:INFO:Importing untrained model
2024-05-20 14:12:09,200:INFO:Ada Boost Classifier Imported successfully
2024-05-20 14:12:09,208:INFO:Starting cross validation
2024-05-20 14:12:09,211:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:12:09,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:09,600:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:09,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:09,781:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:09,876:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:09,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:10,044:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:10,137:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:10,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:10,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-20 14:12:32,346:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,379:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,506:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,641:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,786:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,802:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,845:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,872:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,881:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,884:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:32,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,106:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,119:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,125:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,128:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:12:33,146:INFO:Calculating mean and std
2024-05-20 14:12:33,148:INFO:Creating metrics dataframe
2024-05-20 14:12:33,150:INFO:Uploading results into container
2024-05-20 14:12:33,151:INFO:Uploading model into container now
2024-05-20 14:12:33,152:INFO:_master_model_container: 9
2024-05-20 14:12:33,152:INFO:_display_container: 2
2024-05-20 14:12:33,152:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-20 14:12:33,153:INFO:create_model() successfully completed......................................
2024-05-20 14:12:33,229:INFO:SubProcess create_model() end ==================================
2024-05-20 14:12:33,230:INFO:Creating metrics dataframe
2024-05-20 14:12:33,242:INFO:Initializing Gradient Boosting Classifier
2024-05-20 14:12:33,242:INFO:Total runtime is 1.1870674649874369 minutes
2024-05-20 14:12:33,246:INFO:SubProcess create_model() called ==================================
2024-05-20 14:12:33,247:INFO:Initializing create_model()
2024-05-20 14:12:33,247:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:12:33,247:INFO:Checking exceptions
2024-05-20 14:12:33,247:INFO:Importing libraries
2024-05-20 14:12:33,247:INFO:Copying training dataset
2024-05-20 14:12:33,481:INFO:Defining folds
2024-05-20 14:12:33,481:INFO:Declaring metric variables
2024-05-20 14:12:33,486:INFO:Importing untrained model
2024-05-20 14:12:33,492:INFO:Gradient Boosting Classifier Imported successfully
2024-05-20 14:12:33,500:INFO:Starting cross validation
2024-05-20 14:12:33,503:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:19,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,642:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,946:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,960:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:19,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,031:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,038:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,043:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,279:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,289:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,290:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,308:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,334:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,343:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,352:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,431:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,440:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:20,472:INFO:Calculating mean and std
2024-05-20 14:13:20,474:INFO:Creating metrics dataframe
2024-05-20 14:13:20,477:INFO:Uploading results into container
2024-05-20 14:13:20,478:INFO:Uploading model into container now
2024-05-20 14:13:20,478:INFO:_master_model_container: 10
2024-05-20 14:13:20,478:INFO:_display_container: 2
2024-05-20 14:13:20,479:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-20 14:13:20,479:INFO:create_model() successfully completed......................................
2024-05-20 14:13:20,558:INFO:SubProcess create_model() end ==================================
2024-05-20 14:13:20,559:INFO:Creating metrics dataframe
2024-05-20 14:13:20,571:INFO:Initializing Linear Discriminant Analysis
2024-05-20 14:13:20,571:INFO:Total runtime is 1.9758800427118937 minutes
2024-05-20 14:13:20,576:INFO:SubProcess create_model() called ==================================
2024-05-20 14:13:20,576:INFO:Initializing create_model()
2024-05-20 14:13:20,576:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:13:20,577:INFO:Checking exceptions
2024-05-20 14:13:20,577:INFO:Importing libraries
2024-05-20 14:13:20,577:INFO:Copying training dataset
2024-05-20 14:13:20,801:INFO:Defining folds
2024-05-20 14:13:20,801:INFO:Declaring metric variables
2024-05-20 14:13:20,806:INFO:Importing untrained model
2024-05-20 14:13:20,811:INFO:Linear Discriminant Analysis Imported successfully
2024-05-20 14:13:20,819:INFO:Starting cross validation
2024-05-20 14:13:20,822:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:21,684:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:21,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:21,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:21,860:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:21,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:21,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,003:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,106:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,137:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,288:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,309:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,344:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,447:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,497:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,506:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,591:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,601:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,648:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,657:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:22,680:INFO:Calculating mean and std
2024-05-20 14:13:22,682:INFO:Creating metrics dataframe
2024-05-20 14:13:22,684:INFO:Uploading results into container
2024-05-20 14:13:22,685:INFO:Uploading model into container now
2024-05-20 14:13:22,686:INFO:_master_model_container: 11
2024-05-20 14:13:22,686:INFO:_display_container: 2
2024-05-20 14:13:22,686:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-20 14:13:22,686:INFO:create_model() successfully completed......................................
2024-05-20 14:13:22,758:INFO:SubProcess create_model() end ==================================
2024-05-20 14:13:22,758:INFO:Creating metrics dataframe
2024-05-20 14:13:22,770:INFO:Initializing Extra Trees Classifier
2024-05-20 14:13:22,771:INFO:Total runtime is 2.0125465790430703 minutes
2024-05-20 14:13:22,775:INFO:SubProcess create_model() called ==================================
2024-05-20 14:13:22,775:INFO:Initializing create_model()
2024-05-20 14:13:22,776:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:13:22,776:INFO:Checking exceptions
2024-05-20 14:13:22,776:INFO:Importing libraries
2024-05-20 14:13:22,776:INFO:Copying training dataset
2024-05-20 14:13:23,001:INFO:Defining folds
2024-05-20 14:13:23,001:INFO:Declaring metric variables
2024-05-20 14:13:23,006:INFO:Importing untrained model
2024-05-20 14:13:23,011:INFO:Extra Trees Classifier Imported successfully
2024-05-20 14:13:23,020:INFO:Starting cross validation
2024-05-20 14:13:23,023:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:24,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:24,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:24,959:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:25,336:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:25,362:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:25,494:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,101:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,117:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,162:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,303:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,305:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,415:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:26,565:INFO:Calculating mean and std
2024-05-20 14:13:26,567:INFO:Creating metrics dataframe
2024-05-20 14:13:26,569:INFO:Uploading results into container
2024-05-20 14:13:26,570:INFO:Uploading model into container now
2024-05-20 14:13:26,571:INFO:_master_model_container: 12
2024-05-20 14:13:26,571:INFO:_display_container: 2
2024-05-20 14:13:26,572:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-20 14:13:26,572:INFO:create_model() successfully completed......................................
2024-05-20 14:13:26,654:INFO:SubProcess create_model() end ==================================
2024-05-20 14:13:26,654:INFO:Creating metrics dataframe
2024-05-20 14:13:26,672:INFO:Initializing Extreme Gradient Boosting
2024-05-20 14:13:26,672:INFO:Total runtime is 2.0775662183761594 minutes
2024-05-20 14:13:26,677:INFO:SubProcess create_model() called ==================================
2024-05-20 14:13:26,677:INFO:Initializing create_model()
2024-05-20 14:13:26,677:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:13:26,678:INFO:Checking exceptions
2024-05-20 14:13:26,678:INFO:Importing libraries
2024-05-20 14:13:26,678:INFO:Copying training dataset
2024-05-20 14:13:26,922:INFO:Defining folds
2024-05-20 14:13:26,923:INFO:Declaring metric variables
2024-05-20 14:13:26,928:INFO:Importing untrained model
2024-05-20 14:13:26,933:INFO:Extreme Gradient Boosting Imported successfully
2024-05-20 14:13:26,946:INFO:Starting cross validation
2024-05-20 14:13:26,949:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:41,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,378:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,412:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,422:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,534:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,547:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,617:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,632:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,639:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,648:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,651:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:41,718:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:42,044:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:42,053:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:42,062:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:42,091:INFO:Calculating mean and std
2024-05-20 14:13:42,092:INFO:Creating metrics dataframe
2024-05-20 14:13:42,095:INFO:Uploading results into container
2024-05-20 14:13:42,096:INFO:Uploading model into container now
2024-05-20 14:13:42,097:INFO:_master_model_container: 13
2024-05-20 14:13:42,097:INFO:_display_container: 2
2024-05-20 14:13:42,098:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-20 14:13:42,098:INFO:create_model() successfully completed......................................
2024-05-20 14:13:42,174:INFO:SubProcess create_model() end ==================================
2024-05-20 14:13:42,174:INFO:Creating metrics dataframe
2024-05-20 14:13:42,187:INFO:Initializing Light Gradient Boosting Machine
2024-05-20 14:13:42,187:INFO:Total runtime is 2.336161589622497 minutes
2024-05-20 14:13:42,192:INFO:SubProcess create_model() called ==================================
2024-05-20 14:13:42,192:INFO:Initializing create_model()
2024-05-20 14:13:42,192:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:13:42,192:INFO:Checking exceptions
2024-05-20 14:13:42,192:INFO:Importing libraries
2024-05-20 14:13:42,192:INFO:Copying training dataset
2024-05-20 14:13:42,421:INFO:Defining folds
2024-05-20 14:13:42,422:INFO:Declaring metric variables
2024-05-20 14:13:42,426:INFO:Importing untrained model
2024-05-20 14:13:42,431:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 14:13:42,440:INFO:Starting cross validation
2024-05-20 14:13:42,443:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:56,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:56,927:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:56,946:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,591:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,686:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,891:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,927:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,944:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:57,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,098:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,578:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:58,639:INFO:Calculating mean and std
2024-05-20 14:13:58,642:INFO:Creating metrics dataframe
2024-05-20 14:13:58,646:INFO:Uploading results into container
2024-05-20 14:13:58,647:INFO:Uploading model into container now
2024-05-20 14:13:58,648:INFO:_master_model_container: 14
2024-05-20 14:13:58,648:INFO:_display_container: 2
2024-05-20 14:13:58,650:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 14:13:58,650:INFO:create_model() successfully completed......................................
2024-05-20 14:13:58,750:INFO:SubProcess create_model() end ==================================
2024-05-20 14:13:58,750:INFO:Creating metrics dataframe
2024-05-20 14:13:58,769:INFO:Initializing Dummy Classifier
2024-05-20 14:13:58,769:INFO:Total runtime is 2.6125230948130285 minutes
2024-05-20 14:13:58,774:INFO:SubProcess create_model() called ==================================
2024-05-20 14:13:58,775:INFO:Initializing create_model()
2024-05-20 14:13:58,775:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000024489085180>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:13:58,775:INFO:Checking exceptions
2024-05-20 14:13:58,775:INFO:Importing libraries
2024-05-20 14:13:58,775:INFO:Copying training dataset
2024-05-20 14:13:59,067:INFO:Defining folds
2024-05-20 14:13:59,067:INFO:Declaring metric variables
2024-05-20 14:13:59,074:INFO:Importing untrained model
2024-05-20 14:13:59,079:INFO:Dummy Classifier Imported successfully
2024-05-20 14:13:59,090:INFO:Starting cross validation
2024-05-20 14:13:59,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-20 14:13:59,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,412:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,420:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,493:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,504:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,576:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,586:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,602:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,666:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,682:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,744:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,823:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,971:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:13:59,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:13:59,980:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,045:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:14:00,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,124:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,129:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-20 14:14:00,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-20 14:14:00,150:INFO:Calculating mean and std
2024-05-20 14:14:00,152:INFO:Creating metrics dataframe
2024-05-20 14:14:00,154:INFO:Uploading results into container
2024-05-20 14:14:00,155:INFO:Uploading model into container now
2024-05-20 14:14:00,155:INFO:_master_model_container: 15
2024-05-20 14:14:00,155:INFO:_display_container: 2
2024-05-20 14:14:00,156:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-20 14:14:00,156:INFO:create_model() successfully completed......................................
2024-05-20 14:14:00,225:INFO:SubProcess create_model() end ==================================
2024-05-20 14:14:00,225:INFO:Creating metrics dataframe
2024-05-20 14:14:00,241:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-20 14:14:00,252:INFO:Initializing create_model()
2024-05-20 14:14:00,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000244850F3FD0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-20 14:14:00,252:INFO:Checking exceptions
2024-05-20 14:14:00,255:INFO:Importing libraries
2024-05-20 14:14:00,255:INFO:Copying training dataset
2024-05-20 14:14:00,491:INFO:Defining folds
2024-05-20 14:14:00,491:INFO:Declaring metric variables
2024-05-20 14:14:00,491:INFO:Importing untrained model
2024-05-20 14:14:00,491:INFO:Declaring custom model
2024-05-20 14:14:00,493:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-20 14:14:00,496:INFO:Cross validation set to False
2024-05-20 14:14:00,496:INFO:Fitting Model
2024-05-20 14:14:00,837:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-20 14:14:00,867:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.029438 seconds.
2024-05-20 14:14:00,868:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-20 14:14:00,871:INFO:[LightGBM] [Info] Total Bins 88230
2024-05-20 14:14:00,875:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 346
2024-05-20 14:14:00,878:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-20 14:14:00,878:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-20 14:14:02,094:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 14:14:02,094:INFO:create_model() successfully completed......................................
2024-05-20 14:14:02,223:INFO:_master_model_container: 15
2024-05-20 14:14:02,224:INFO:_display_container: 2
2024-05-20 14:14:02,224:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-20 14:14:02,225:INFO:compare_models() successfully completed......................................
2024-05-21 12:31:16,318:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 12:31:16,318:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 12:31:16,318:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 12:31:16,318:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 13:50:50,405:INFO:PyCaret ClassificationExperiment
2024-05-21 13:50:50,407:INFO:Logging name: clf-default-name
2024-05-21 13:50:50,407:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 13:50:50,407:INFO:version 3.3.2
2024-05-21 13:50:50,407:INFO:Initializing setup()
2024-05-21 13:50:50,407:INFO:self.USI: d6a5
2024-05-21 13:50:50,407:INFO:self._variable_keys: {'is_multiclass', 'y_train', 'exp_id', 'y', 'X', '_available_plots', 'n_jobs_param', 'y_test', 'X_test', 'fold_groups_param', 'data', 'X_train', 'memory', 'idx', 'gpu_param', '_ml_usecase', 'fold_generator', 'target_param', 'html_param', 'exp_name_log', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'USI', 'pipeline', 'gpu_n_jobs_param'}
2024-05-21 13:50:50,408:INFO:Checking environment
2024-05-21 13:50:50,409:INFO:python_version: 3.10.0
2024-05-21 13:50:50,409:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 13:50:50,409:INFO:machine: AMD64
2024-05-21 13:50:50,409:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 13:50:50,421:INFO:Memory: svmem(total=16993001472, available=2877943808, percent=83.1, used=14115057664, free=2877943808)
2024-05-21 13:50:50,422:INFO:Physical Core: 6
2024-05-21 13:50:50,422:INFO:Logical Core: 12
2024-05-21 13:50:50,422:INFO:Checking libraries
2024-05-21 13:50:50,423:INFO:System:
2024-05-21 13:50:50,423:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 13:50:50,423:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 13:50:50,423:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 13:50:50,423:INFO:PyCaret required dependencies:
2024-05-21 13:50:50,703:INFO:                 pip: 24.0
2024-05-21 13:50:50,703:INFO:          setuptools: 57.4.0
2024-05-21 13:50:50,703:INFO:             pycaret: 3.3.2
2024-05-21 13:50:50,703:INFO:             IPython: 8.23.0
2024-05-21 13:50:50,703:INFO:          ipywidgets: 8.1.2
2024-05-21 13:50:50,703:INFO:                tqdm: 4.66.2
2024-05-21 13:50:50,703:INFO:               numpy: 1.26.3
2024-05-21 13:50:50,703:INFO:              pandas: 2.1.4
2024-05-21 13:50:50,703:INFO:              jinja2: 3.1.2
2024-05-21 13:50:50,703:INFO:               scipy: 1.11.4
2024-05-21 13:50:50,703:INFO:              joblib: 1.3.2
2024-05-21 13:50:50,703:INFO:             sklearn: 1.4.2
2024-05-21 13:50:50,703:INFO:                pyod: 1.1.3
2024-05-21 13:50:50,703:INFO:            imblearn: 0.12.2
2024-05-21 13:50:50,703:INFO:   category_encoders: 2.6.3
2024-05-21 13:50:50,703:INFO:            lightgbm: 4.3.0
2024-05-21 13:50:50,703:INFO:               numba: 0.59.1
2024-05-21 13:50:50,703:INFO:            requests: 2.31.0
2024-05-21 13:50:50,703:INFO:          matplotlib: 3.7.5
2024-05-21 13:50:50,703:INFO:          scikitplot: 0.3.7
2024-05-21 13:50:50,705:INFO:         yellowbrick: 1.5
2024-05-21 13:50:50,705:INFO:              plotly: 5.22.0
2024-05-21 13:50:50,705:INFO:    plotly-resampler: Not installed
2024-05-21 13:50:50,705:INFO:             kaleido: 0.2.1
2024-05-21 13:50:50,705:INFO:           schemdraw: 0.15
2024-05-21 13:50:50,705:INFO:         statsmodels: 0.14.2
2024-05-21 13:50:50,705:INFO:              sktime: 0.26.0
2024-05-21 13:50:50,705:INFO:               tbats: 1.1.3
2024-05-21 13:50:50,705:INFO:            pmdarima: 2.0.4
2024-05-21 13:50:50,705:INFO:              psutil: 5.9.8
2024-05-21 13:50:50,705:INFO:          markupsafe: 2.1.3
2024-05-21 13:50:50,706:INFO:             pickle5: Not installed
2024-05-21 13:50:50,706:INFO:         cloudpickle: 3.0.0
2024-05-21 13:50:50,706:INFO:         deprecation: 2.1.0
2024-05-21 13:50:50,706:INFO:              xxhash: 3.4.1
2024-05-21 13:50:50,706:INFO:           wurlitzer: Not installed
2024-05-21 13:50:50,706:INFO:PyCaret optional dependencies:
2024-05-21 13:50:55,623:INFO:                shap: Not installed
2024-05-21 13:50:55,625:INFO:           interpret: Not installed
2024-05-21 13:50:55,625:INFO:                umap: Not installed
2024-05-21 13:50:55,625:INFO:     ydata_profiling: Not installed
2024-05-21 13:50:55,625:INFO:  explainerdashboard: Not installed
2024-05-21 13:50:55,625:INFO:             autoviz: Not installed
2024-05-21 13:50:55,625:INFO:           fairlearn: Not installed
2024-05-21 13:50:55,625:INFO:          deepchecks: Not installed
2024-05-21 13:50:55,625:INFO:             xgboost: 2.0.3
2024-05-21 13:50:55,625:INFO:            catboost: Not installed
2024-05-21 13:50:55,625:INFO:              kmodes: Not installed
2024-05-21 13:50:55,625:INFO:             mlxtend: Not installed
2024-05-21 13:50:55,626:INFO:       statsforecast: Not installed
2024-05-21 13:50:55,626:INFO:        tune_sklearn: Not installed
2024-05-21 13:50:55,626:INFO:                 ray: Not installed
2024-05-21 13:50:55,626:INFO:            hyperopt: Not installed
2024-05-21 13:50:55,626:INFO:              optuna: 3.6.1
2024-05-21 13:50:55,626:INFO:               skopt: Not installed
2024-05-21 13:50:55,626:INFO:              mlflow: 2.13.0
2024-05-21 13:50:55,626:INFO:              gradio: 4.31.4
2024-05-21 13:50:55,626:INFO:             fastapi: 0.111.0
2024-05-21 13:50:55,626:INFO:             uvicorn: 0.29.0
2024-05-21 13:50:55,626:INFO:              m2cgen: 0.10.0
2024-05-21 13:50:55,626:INFO:           evidently: 0.4.23
2024-05-21 13:50:55,626:INFO:               fugue: Not installed
2024-05-21 13:50:55,626:INFO:           streamlit: Not installed
2024-05-21 13:50:55,626:INFO:             prophet: Not installed
2024-05-21 13:50:55,626:INFO:None
2024-05-21 13:50:55,627:INFO:Set up data.
2024-05-21 13:50:55,811:INFO:Set up folding strategy.
2024-05-21 13:50:55,811:INFO:Set up train/test split.
2024-05-21 13:50:56,107:INFO:Set up index.
2024-05-21 13:50:56,115:INFO:Assigning column types.
2024-05-21 13:50:56,575:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 13:50:56,636:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:50:56,663:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:50:56,716:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:56,720:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:56,783:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:50:56,784:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:50:56,823:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:56,827:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:56,827:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 13:50:56,889:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:50:56,929:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:56,933:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:57,005:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:50:57,047:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:57,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:57,051:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 13:50:57,153:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:57,157:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:57,258:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:57,262:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:57,264:INFO:Preparing preprocessing pipeline...
2024-05-21 13:50:57,306:INFO:Set up label encoding.
2024-05-21 13:50:57,306:INFO:Set up simple imputation.
2024-05-21 13:50:57,825:INFO:Finished creating preprocessing pipeline.
2024-05-21 13:50:57,855:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['teff_gspphot', 'logg_gspphot',
                                             'mh_gspphot', '0', '1', '2', '3',
                                             '4', '5', '6', '7', '8', '9', '10',
                                             '11', '12', '1...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 13:50:57,855:INFO:Creating final display dataframe.
2024-05-21 13:50:59,024:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 347)
5        Transformed data shape      (14101, 347)
6   Transformed train set shape       (9870, 347)
7    Transformed test set shape       (4231, 347)
8              Numeric features               346
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              d6a5
2024-05-21 13:50:59,144:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:59,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:59,258:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:50:59,262:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:50:59,263:INFO:setup() successfully completed in 8.96s...............
2024-05-21 13:50:59,330:INFO:PyCaret ClassificationExperiment
2024-05-21 13:50:59,330:INFO:Logging name: clf-default-name
2024-05-21 13:50:59,330:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 13:50:59,330:INFO:version 3.3.2
2024-05-21 13:50:59,331:INFO:Initializing setup()
2024-05-21 13:50:59,331:INFO:self.USI: 1c68
2024-05-21 13:50:59,331:INFO:self._variable_keys: {'is_multiclass', 'y_train', 'exp_id', 'y', 'X', '_available_plots', 'n_jobs_param', 'y_test', 'X_test', 'fold_groups_param', 'data', 'X_train', 'memory', 'idx', 'gpu_param', '_ml_usecase', 'fold_generator', 'target_param', 'html_param', 'exp_name_log', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'USI', 'pipeline', 'gpu_n_jobs_param'}
2024-05-21 13:50:59,331:INFO:Checking environment
2024-05-21 13:50:59,331:INFO:python_version: 3.10.0
2024-05-21 13:50:59,331:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 13:50:59,331:INFO:machine: AMD64
2024-05-21 13:50:59,331:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 13:50:59,340:INFO:Memory: svmem(total=16993001472, available=2375856128, percent=86.0, used=14617145344, free=2375856128)
2024-05-21 13:50:59,340:INFO:Physical Core: 6
2024-05-21 13:50:59,340:INFO:Logical Core: 12
2024-05-21 13:50:59,340:INFO:Checking libraries
2024-05-21 13:50:59,340:INFO:System:
2024-05-21 13:50:59,340:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 13:50:59,340:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 13:50:59,341:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 13:50:59,341:INFO:PyCaret required dependencies:
2024-05-21 13:50:59,341:INFO:                 pip: 24.0
2024-05-21 13:50:59,341:INFO:          setuptools: 57.4.0
2024-05-21 13:50:59,341:INFO:             pycaret: 3.3.2
2024-05-21 13:50:59,341:INFO:             IPython: 8.23.0
2024-05-21 13:50:59,341:INFO:          ipywidgets: 8.1.2
2024-05-21 13:50:59,341:INFO:                tqdm: 4.66.2
2024-05-21 13:50:59,341:INFO:               numpy: 1.26.3
2024-05-21 13:50:59,341:INFO:              pandas: 2.1.4
2024-05-21 13:50:59,342:INFO:              jinja2: 3.1.2
2024-05-21 13:50:59,342:INFO:               scipy: 1.11.4
2024-05-21 13:50:59,342:INFO:              joblib: 1.3.2
2024-05-21 13:50:59,342:INFO:             sklearn: 1.4.2
2024-05-21 13:50:59,342:INFO:                pyod: 1.1.3
2024-05-21 13:50:59,342:INFO:            imblearn: 0.12.2
2024-05-21 13:50:59,342:INFO:   category_encoders: 2.6.3
2024-05-21 13:50:59,342:INFO:            lightgbm: 4.3.0
2024-05-21 13:50:59,342:INFO:               numba: 0.59.1
2024-05-21 13:50:59,342:INFO:            requests: 2.31.0
2024-05-21 13:50:59,343:INFO:          matplotlib: 3.7.5
2024-05-21 13:50:59,343:INFO:          scikitplot: 0.3.7
2024-05-21 13:50:59,343:INFO:         yellowbrick: 1.5
2024-05-21 13:50:59,343:INFO:              plotly: 5.22.0
2024-05-21 13:50:59,343:INFO:    plotly-resampler: Not installed
2024-05-21 13:50:59,343:INFO:             kaleido: 0.2.1
2024-05-21 13:50:59,343:INFO:           schemdraw: 0.15
2024-05-21 13:50:59,343:INFO:         statsmodels: 0.14.2
2024-05-21 13:50:59,343:INFO:              sktime: 0.26.0
2024-05-21 13:50:59,343:INFO:               tbats: 1.1.3
2024-05-21 13:50:59,343:INFO:            pmdarima: 2.0.4
2024-05-21 13:50:59,344:INFO:              psutil: 5.9.8
2024-05-21 13:50:59,344:INFO:          markupsafe: 2.1.3
2024-05-21 13:50:59,344:INFO:             pickle5: Not installed
2024-05-21 13:50:59,344:INFO:         cloudpickle: 3.0.0
2024-05-21 13:50:59,344:INFO:         deprecation: 2.1.0
2024-05-21 13:50:59,344:INFO:              xxhash: 3.4.1
2024-05-21 13:50:59,344:INFO:           wurlitzer: Not installed
2024-05-21 13:50:59,344:INFO:PyCaret optional dependencies:
2024-05-21 13:50:59,344:INFO:                shap: Not installed
2024-05-21 13:50:59,344:INFO:           interpret: Not installed
2024-05-21 13:50:59,345:INFO:                umap: Not installed
2024-05-21 13:50:59,345:INFO:     ydata_profiling: Not installed
2024-05-21 13:50:59,345:INFO:  explainerdashboard: Not installed
2024-05-21 13:50:59,345:INFO:             autoviz: Not installed
2024-05-21 13:50:59,345:INFO:           fairlearn: Not installed
2024-05-21 13:50:59,345:INFO:          deepchecks: Not installed
2024-05-21 13:50:59,345:INFO:             xgboost: 2.0.3
2024-05-21 13:50:59,345:INFO:            catboost: Not installed
2024-05-21 13:50:59,345:INFO:              kmodes: Not installed
2024-05-21 13:50:59,345:INFO:             mlxtend: Not installed
2024-05-21 13:50:59,345:INFO:       statsforecast: Not installed
2024-05-21 13:50:59,345:INFO:        tune_sklearn: Not installed
2024-05-21 13:50:59,345:INFO:                 ray: Not installed
2024-05-21 13:50:59,345:INFO:            hyperopt: Not installed
2024-05-21 13:50:59,345:INFO:              optuna: 3.6.1
2024-05-21 13:50:59,345:INFO:               skopt: Not installed
2024-05-21 13:50:59,345:INFO:              mlflow: 2.13.0
2024-05-21 13:50:59,346:INFO:              gradio: 4.31.4
2024-05-21 13:50:59,346:INFO:             fastapi: 0.111.0
2024-05-21 13:50:59,346:INFO:             uvicorn: 0.29.0
2024-05-21 13:50:59,346:INFO:              m2cgen: 0.10.0
2024-05-21 13:50:59,346:INFO:           evidently: 0.4.23
2024-05-21 13:50:59,346:INFO:               fugue: Not installed
2024-05-21 13:50:59,346:INFO:           streamlit: Not installed
2024-05-21 13:50:59,346:INFO:             prophet: Not installed
2024-05-21 13:50:59,347:INFO:None
2024-05-21 13:50:59,347:INFO:Set up data.
2024-05-21 13:50:59,523:INFO:Set up folding strategy.
2024-05-21 13:50:59,523:INFO:Set up train/test split.
2024-05-21 13:50:59,748:INFO:Set up index.
2024-05-21 13:50:59,753:INFO:Assigning column types.
2024-05-21 13:51:00,021:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 13:51:00,099:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,100:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,139:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,143:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,205:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,205:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,244:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,248:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 13:51:00,312:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,352:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,357:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,421:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:51:00,460:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,464:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,464:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 13:51:00,577:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,582:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,688:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:00,692:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:00,693:INFO:Preparing preprocessing pipeline...
2024-05-21 13:51:00,728:INFO:Set up label encoding.
2024-05-21 13:51:00,728:INFO:Set up simple imputation.
2024-05-21 13:51:01,211:INFO:Finished creating preprocessing pipeline.
2024-05-21 13:51:01,219:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['teff_gspphot', 'logg_gspphot',
                                             'mh_gspphot', '0', '1', '2', '3',
                                             '4', '5', '6', '7', '8', '9', '10',
                                             '11', '12', '1...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 13:51:01,220:INFO:Creating final display dataframe.
2024-05-21 13:51:02,379:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 347)
5        Transformed data shape      (14101, 347)
6   Transformed train set shape       (9870, 347)
7    Transformed test set shape       (4231, 347)
8              Numeric features               346
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              1c68
2024-05-21 13:51:02,522:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:02,526:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:02,660:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:51:02,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:51:02,665:INFO:setup() successfully completed in 3.34s...............
2024-05-21 13:51:02,798:INFO:Initializing compare_models()
2024-05-21 13:51:02,798:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 13:51:02,799:INFO:Checking exceptions
2024-05-21 13:51:03,032:INFO:Preparing display monitor
2024-05-21 13:51:03,079:INFO:Initializing Logistic Regression
2024-05-21 13:51:03,079:INFO:Total runtime is 0.0 minutes
2024-05-21 13:51:03,085:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:03,086:INFO:Initializing create_model()
2024-05-21 13:51:03,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:03,086:INFO:Checking exceptions
2024-05-21 13:51:03,086:INFO:Importing libraries
2024-05-21 13:51:03,086:INFO:Copying training dataset
2024-05-21 13:51:03,399:INFO:Defining folds
2024-05-21 13:51:03,399:INFO:Declaring metric variables
2024-05-21 13:51:03,404:INFO:Importing untrained model
2024-05-21 13:51:03,409:INFO:Logistic Regression Imported successfully
2024-05-21 13:51:03,419:INFO:Starting cross validation
2024-05-21 13:51:03,421:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:14,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,318:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,688:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,743:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,750:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,817:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,847:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:14,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,070:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,182:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:15,233:INFO:Calculating mean and std
2024-05-21 13:51:15,236:INFO:Creating metrics dataframe
2024-05-21 13:51:15,240:INFO:Uploading results into container
2024-05-21 13:51:15,261:INFO:Uploading model into container now
2024-05-21 13:51:15,262:INFO:_master_model_container: 1
2024-05-21 13:51:15,262:INFO:_display_container: 2
2024-05-21 13:51:15,263:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 13:51:15,263:INFO:create_model() successfully completed......................................
2024-05-21 13:51:15,397:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:15,397:INFO:Creating metrics dataframe
2024-05-21 13:51:15,408:INFO:Initializing K Neighbors Classifier
2024-05-21 13:51:15,408:INFO:Total runtime is 0.20547430912653605 minutes
2024-05-21 13:51:15,413:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:15,413:INFO:Initializing create_model()
2024-05-21 13:51:15,413:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:15,413:INFO:Checking exceptions
2024-05-21 13:51:15,413:INFO:Importing libraries
2024-05-21 13:51:15,414:INFO:Copying training dataset
2024-05-21 13:51:15,653:INFO:Defining folds
2024-05-21 13:51:15,653:INFO:Declaring metric variables
2024-05-21 13:51:15,658:INFO:Importing untrained model
2024-05-21 13:51:15,663:INFO:K Neighbors Classifier Imported successfully
2024-05-21 13:51:15,672:INFO:Starting cross validation
2024-05-21 13:51:15,675:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:17,784:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:17,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:17,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:17,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:17,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:17,820:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,044:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,077:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,344:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,585:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:18,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,515:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,548:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,561:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:21,602:INFO:Calculating mean and std
2024-05-21 13:51:21,604:INFO:Creating metrics dataframe
2024-05-21 13:51:21,609:INFO:Uploading results into container
2024-05-21 13:51:21,609:INFO:Uploading model into container now
2024-05-21 13:51:21,610:INFO:_master_model_container: 2
2024-05-21 13:51:21,610:INFO:_display_container: 2
2024-05-21 13:51:21,611:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 13:51:21,611:INFO:create_model() successfully completed......................................
2024-05-21 13:51:21,736:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:21,737:INFO:Creating metrics dataframe
2024-05-21 13:51:21,766:INFO:Initializing Naive Bayes
2024-05-21 13:51:21,766:INFO:Total runtime is 0.31144880056381224 minutes
2024-05-21 13:51:21,771:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:21,771:INFO:Initializing create_model()
2024-05-21 13:51:21,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:21,772:INFO:Checking exceptions
2024-05-21 13:51:21,772:INFO:Importing libraries
2024-05-21 13:51:21,772:INFO:Copying training dataset
2024-05-21 13:51:22,013:INFO:Defining folds
2024-05-21 13:51:22,013:INFO:Declaring metric variables
2024-05-21 13:51:22,019:INFO:Importing untrained model
2024-05-21 13:51:22,024:INFO:Naive Bayes Imported successfully
2024-05-21 13:51:22,033:INFO:Starting cross validation
2024-05-21 13:51:22,036:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:22,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,547:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,564:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,677:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,691:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,815:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:22,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,003:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,170:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,238:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,302:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,311:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:23,340:INFO:Calculating mean and std
2024-05-21 13:51:23,342:INFO:Creating metrics dataframe
2024-05-21 13:51:23,344:INFO:Uploading results into container
2024-05-21 13:51:23,345:INFO:Uploading model into container now
2024-05-21 13:51:23,345:INFO:_master_model_container: 3
2024-05-21 13:51:23,345:INFO:_display_container: 2
2024-05-21 13:51:23,346:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 13:51:23,346:INFO:create_model() successfully completed......................................
2024-05-21 13:51:23,451:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:23,451:INFO:Creating metrics dataframe
2024-05-21 13:51:23,461:INFO:Initializing Decision Tree Classifier
2024-05-21 13:51:23,461:INFO:Total runtime is 0.33969454765319823 minutes
2024-05-21 13:51:23,465:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:23,466:INFO:Initializing create_model()
2024-05-21 13:51:23,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:23,466:INFO:Checking exceptions
2024-05-21 13:51:23,466:INFO:Importing libraries
2024-05-21 13:51:23,466:INFO:Copying training dataset
2024-05-21 13:51:23,697:INFO:Defining folds
2024-05-21 13:51:23,698:INFO:Declaring metric variables
2024-05-21 13:51:23,702:INFO:Importing untrained model
2024-05-21 13:51:23,707:INFO:Decision Tree Classifier Imported successfully
2024-05-21 13:51:23,716:INFO:Starting cross validation
2024-05-21 13:51:23,719:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:24,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,613:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,633:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,666:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,754:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,790:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,868:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,954:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:24,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,039:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,055:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,146:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,325:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:25,409:INFO:Calculating mean and std
2024-05-21 13:51:25,410:INFO:Creating metrics dataframe
2024-05-21 13:51:25,413:INFO:Uploading results into container
2024-05-21 13:51:25,413:INFO:Uploading model into container now
2024-05-21 13:51:25,414:INFO:_master_model_container: 4
2024-05-21 13:51:25,414:INFO:_display_container: 2
2024-05-21 13:51:25,415:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 13:51:25,415:INFO:create_model() successfully completed......................................
2024-05-21 13:51:25,532:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:25,532:INFO:Creating metrics dataframe
2024-05-21 13:51:25,561:INFO:Initializing SVM - Linear Kernel
2024-05-21 13:51:25,561:INFO:Total runtime is 0.3746924877166748 minutes
2024-05-21 13:51:25,566:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:25,566:INFO:Initializing create_model()
2024-05-21 13:51:25,567:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:25,567:INFO:Checking exceptions
2024-05-21 13:51:25,567:INFO:Importing libraries
2024-05-21 13:51:25,567:INFO:Copying training dataset
2024-05-21 13:51:25,811:INFO:Defining folds
2024-05-21 13:51:25,811:INFO:Declaring metric variables
2024-05-21 13:51:25,816:INFO:Importing untrained model
2024-05-21 13:51:25,821:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 13:51:25,831:INFO:Starting cross validation
2024-05-21 13:51:25,833:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:27,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:27,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:27,927:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:27,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,087:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,107:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,117:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,145:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,150:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,644:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,675:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,685:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,762:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,783:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,789:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:28,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:28,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,276:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:29,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,478:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:29,498:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:29,520:INFO:Calculating mean and std
2024-05-21 13:51:29,524:INFO:Creating metrics dataframe
2024-05-21 13:51:29,527:INFO:Uploading results into container
2024-05-21 13:51:29,528:INFO:Uploading model into container now
2024-05-21 13:51:29,529:INFO:_master_model_container: 5
2024-05-21 13:51:29,529:INFO:_display_container: 2
2024-05-21 13:51:29,529:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 13:51:29,529:INFO:create_model() successfully completed......................................
2024-05-21 13:51:29,664:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:29,664:INFO:Creating metrics dataframe
2024-05-21 13:51:29,675:INFO:Initializing Ridge Classifier
2024-05-21 13:51:29,675:INFO:Total runtime is 0.4432593703269958 minutes
2024-05-21 13:51:29,679:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:29,680:INFO:Initializing create_model()
2024-05-21 13:51:29,680:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:29,680:INFO:Checking exceptions
2024-05-21 13:51:29,680:INFO:Importing libraries
2024-05-21 13:51:29,680:INFO:Copying training dataset
2024-05-21 13:51:29,927:INFO:Defining folds
2024-05-21 13:51:29,927:INFO:Declaring metric variables
2024-05-21 13:51:29,932:INFO:Importing untrained model
2024-05-21 13:51:29,936:INFO:Ridge Classifier Imported successfully
2024-05-21 13:51:29,946:INFO:Starting cross validation
2024-05-21 13:51:29,949:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:30,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28479e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,421:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.2941e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.29835e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,572:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,584:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,593:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28781e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,686:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,703:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.28657e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,781:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,797:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26575e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,862:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.3125e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:30,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:30,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.30378e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:31,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,043:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,052:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,053:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26876e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:31,094:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,103:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,112:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\linear_model\_ridge.py:204: LinAlgWarning: Ill-conditioned matrix (rcond=2.26823e-12): result may not be accurate.
  return linalg.solve(A, Xy, assume_a="pos", overwrite_a=True).T

2024-05-21 13:51:31,163:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,181:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:31,207:INFO:Calculating mean and std
2024-05-21 13:51:31,209:INFO:Creating metrics dataframe
2024-05-21 13:51:31,211:INFO:Uploading results into container
2024-05-21 13:51:31,212:INFO:Uploading model into container now
2024-05-21 13:51:31,212:INFO:_master_model_container: 6
2024-05-21 13:51:31,212:INFO:_display_container: 2
2024-05-21 13:51:31,213:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 13:51:31,213:INFO:create_model() successfully completed......................................
2024-05-21 13:51:31,320:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:31,320:INFO:Creating metrics dataframe
2024-05-21 13:51:31,330:INFO:Initializing Random Forest Classifier
2024-05-21 13:51:31,330:INFO:Total runtime is 0.47085460424423214 minutes
2024-05-21 13:51:31,336:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:31,336:INFO:Initializing create_model()
2024-05-21 13:51:31,337:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:31,337:INFO:Checking exceptions
2024-05-21 13:51:31,337:INFO:Importing libraries
2024-05-21 13:51:31,337:INFO:Copying training dataset
2024-05-21 13:51:31,577:INFO:Defining folds
2024-05-21 13:51:31,577:INFO:Declaring metric variables
2024-05-21 13:51:31,582:INFO:Importing untrained model
2024-05-21 13:51:31,587:INFO:Random Forest Classifier Imported successfully
2024-05-21 13:51:31,595:INFO:Starting cross validation
2024-05-21 13:51:31,598:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:52,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,217:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,908:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,927:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,967:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:52,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,006:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,019:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,029:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,078:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,103:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,121:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:53,172:INFO:Calculating mean and std
2024-05-21 13:51:53,174:INFO:Creating metrics dataframe
2024-05-21 13:51:53,176:INFO:Uploading results into container
2024-05-21 13:51:53,177:INFO:Uploading model into container now
2024-05-21 13:51:53,177:INFO:_master_model_container: 7
2024-05-21 13:51:53,177:INFO:_display_container: 2
2024-05-21 13:51:53,178:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 13:51:53,178:INFO:create_model() successfully completed......................................
2024-05-21 13:51:53,311:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:53,311:INFO:Creating metrics dataframe
2024-05-21 13:51:53,323:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 13:51:53,323:INFO:Total runtime is 0.8373892307281494 minutes
2024-05-21 13:51:53,327:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:53,328:INFO:Initializing create_model()
2024-05-21 13:51:53,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:53,328:INFO:Checking exceptions
2024-05-21 13:51:53,328:INFO:Importing libraries
2024-05-21 13:51:53,328:INFO:Copying training dataset
2024-05-21 13:51:53,572:INFO:Defining folds
2024-05-21 13:51:53,572:INFO:Declaring metric variables
2024-05-21 13:51:53,577:INFO:Importing untrained model
2024-05-21 13:51:53,582:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 13:51:53,592:INFO:Starting cross validation
2024-05-21 13:51:53,594:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:55,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,125:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:55,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:55,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:55,970:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:55,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:55,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:56,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:56,046:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,085:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:56,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,266:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,303:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:56,330:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,356:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:56,365:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:56,419:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:51:56,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,547:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,563:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,569:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,582:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,684:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:56,703:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,775:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,780:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:51:56,784:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:51:56,802:INFO:Calculating mean and std
2024-05-21 13:51:56,805:INFO:Creating metrics dataframe
2024-05-21 13:51:56,808:INFO:Uploading results into container
2024-05-21 13:51:56,809:INFO:Uploading model into container now
2024-05-21 13:51:56,810:INFO:_master_model_container: 8
2024-05-21 13:51:56,810:INFO:_display_container: 2
2024-05-21 13:51:56,810:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 13:51:56,810:INFO:create_model() successfully completed......................................
2024-05-21 13:51:56,929:INFO:SubProcess create_model() end ==================================
2024-05-21 13:51:56,930:INFO:Creating metrics dataframe
2024-05-21 13:51:56,942:INFO:Initializing Ada Boost Classifier
2024-05-21 13:51:56,942:INFO:Total runtime is 0.8977062662442525 minutes
2024-05-21 13:51:56,948:INFO:SubProcess create_model() called ==================================
2024-05-21 13:51:56,949:INFO:Initializing create_model()
2024-05-21 13:51:56,949:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:51:56,949:INFO:Checking exceptions
2024-05-21 13:51:56,950:INFO:Importing libraries
2024-05-21 13:51:56,950:INFO:Copying training dataset
2024-05-21 13:51:57,203:INFO:Defining folds
2024-05-21 13:51:57,203:INFO:Declaring metric variables
2024-05-21 13:51:57,208:INFO:Importing untrained model
2024-05-21 13:51:57,213:INFO:Ada Boost Classifier Imported successfully
2024-05-21 13:51:57,223:INFO:Starting cross validation
2024-05-21 13:51:57,225:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:51:57,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:57,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:57,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:57,823:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:57,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:58,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:58,085:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:58,189:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:58,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:51:58,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:52:22,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,631:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,647:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,663:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,682:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,925:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,925:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,940:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:22,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,059:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,347:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,357:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:52:23,390:INFO:Calculating mean and std
2024-05-21 13:52:23,392:INFO:Creating metrics dataframe
2024-05-21 13:52:23,396:INFO:Uploading results into container
2024-05-21 13:52:23,397:INFO:Uploading model into container now
2024-05-21 13:52:23,397:INFO:_master_model_container: 9
2024-05-21 13:52:23,398:INFO:_display_container: 2
2024-05-21 13:52:23,398:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 13:52:23,398:INFO:create_model() successfully completed......................................
2024-05-21 13:52:23,533:INFO:SubProcess create_model() end ==================================
2024-05-21 13:52:23,533:INFO:Creating metrics dataframe
2024-05-21 13:52:23,546:INFO:Initializing Gradient Boosting Classifier
2024-05-21 13:52:23,546:INFO:Total runtime is 1.3411121805508932 minutes
2024-05-21 13:52:23,551:INFO:SubProcess create_model() called ==================================
2024-05-21 13:52:23,552:INFO:Initializing create_model()
2024-05-21 13:52:23,552:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:52:23,552:INFO:Checking exceptions
2024-05-21 13:52:23,552:INFO:Importing libraries
2024-05-21 13:52:23,552:INFO:Copying training dataset
2024-05-21 13:52:23,837:INFO:Defining folds
2024-05-21 13:52:23,838:INFO:Declaring metric variables
2024-05-21 13:52:23,845:INFO:Importing untrained model
2024-05-21 13:52:23,855:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 13:52:23,869:INFO:Starting cross validation
2024-05-21 13:52:23,872:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:53:12,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:12,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:12,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,269:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,313:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,430:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,462:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,500:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,573:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,724:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,798:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,820:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:13,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:14,132:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:14,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:14,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:14,176:INFO:Calculating mean and std
2024-05-21 13:53:14,178:INFO:Creating metrics dataframe
2024-05-21 13:53:14,181:INFO:Uploading results into container
2024-05-21 13:53:14,182:INFO:Uploading model into container now
2024-05-21 13:53:14,183:INFO:_master_model_container: 10
2024-05-21 13:53:14,183:INFO:_display_container: 2
2024-05-21 13:53:14,183:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 13:53:14,184:INFO:create_model() successfully completed......................................
2024-05-21 13:53:14,313:INFO:SubProcess create_model() end ==================================
2024-05-21 13:53:14,313:INFO:Creating metrics dataframe
2024-05-21 13:53:14,331:INFO:Initializing Linear Discriminant Analysis
2024-05-21 13:53:14,331:INFO:Total runtime is 2.18753289381663 minutes
2024-05-21 13:53:14,338:INFO:SubProcess create_model() called ==================================
2024-05-21 13:53:14,338:INFO:Initializing create_model()
2024-05-21 13:53:14,338:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:53:14,338:INFO:Checking exceptions
2024-05-21 13:53:14,338:INFO:Importing libraries
2024-05-21 13:53:14,338:INFO:Copying training dataset
2024-05-21 13:53:14,614:INFO:Defining folds
2024-05-21 13:53:14,614:INFO:Declaring metric variables
2024-05-21 13:53:14,619:INFO:Importing untrained model
2024-05-21 13:53:14,624:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 13:53:14,633:INFO:Starting cross validation
2024-05-21 13:53:14,636:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:53:15,781:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:15,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:15,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:15,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:15,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:15,863:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,218:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,450:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,467:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,523:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,601:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:16,737:INFO:Calculating mean and std
2024-05-21 13:53:16,739:INFO:Creating metrics dataframe
2024-05-21 13:53:16,742:INFO:Uploading results into container
2024-05-21 13:53:16,742:INFO:Uploading model into container now
2024-05-21 13:53:16,743:INFO:_master_model_container: 11
2024-05-21 13:53:16,743:INFO:_display_container: 2
2024-05-21 13:53:16,743:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 13:53:16,743:INFO:create_model() successfully completed......................................
2024-05-21 13:53:16,864:INFO:SubProcess create_model() end ==================================
2024-05-21 13:53:16,864:INFO:Creating metrics dataframe
2024-05-21 13:53:16,877:INFO:Initializing Extra Trees Classifier
2024-05-21 13:53:16,877:INFO:Total runtime is 2.2299644033114117 minutes
2024-05-21 13:53:16,882:INFO:SubProcess create_model() called ==================================
2024-05-21 13:53:16,882:INFO:Initializing create_model()
2024-05-21 13:53:16,882:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:53:16,883:INFO:Checking exceptions
2024-05-21 13:53:16,883:INFO:Importing libraries
2024-05-21 13:53:16,883:INFO:Copying training dataset
2024-05-21 13:53:17,143:INFO:Defining folds
2024-05-21 13:53:17,143:INFO:Declaring metric variables
2024-05-21 13:53:17,148:INFO:Importing untrained model
2024-05-21 13:53:17,153:INFO:Extra Trees Classifier Imported successfully
2024-05-21 13:53:17,163:INFO:Starting cross validation
2024-05-21 13:53:17,165:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:53:19,923:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:19,949:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:19,992:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,872:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,875:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,891:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,913:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,929:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,935:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,950:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,954:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,992:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:20,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,011:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,020:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,037:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:21,120:INFO:Calculating mean and std
2024-05-21 13:53:21,122:INFO:Creating metrics dataframe
2024-05-21 13:53:21,126:INFO:Uploading results into container
2024-05-21 13:53:21,127:INFO:Uploading model into container now
2024-05-21 13:53:21,127:INFO:_master_model_container: 12
2024-05-21 13:53:21,128:INFO:_display_container: 2
2024-05-21 13:53:21,128:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 13:53:21,129:INFO:create_model() successfully completed......................................
2024-05-21 13:53:21,254:INFO:SubProcess create_model() end ==================================
2024-05-21 13:53:21,254:INFO:Creating metrics dataframe
2024-05-21 13:53:21,267:INFO:Initializing Extreme Gradient Boosting
2024-05-21 13:53:21,267:INFO:Total runtime is 2.303132283687592 minutes
2024-05-21 13:53:21,271:INFO:SubProcess create_model() called ==================================
2024-05-21 13:53:21,271:INFO:Initializing create_model()
2024-05-21 13:53:21,271:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:53:21,271:INFO:Checking exceptions
2024-05-21 13:53:21,271:INFO:Importing libraries
2024-05-21 13:53:21,272:INFO:Copying training dataset
2024-05-21 13:53:21,510:INFO:Defining folds
2024-05-21 13:53:21,510:INFO:Declaring metric variables
2024-05-21 13:53:21,516:INFO:Importing untrained model
2024-05-21 13:53:21,522:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 13:53:21,533:INFO:Starting cross validation
2024-05-21 13:53:21,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:53:38,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,042:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,059:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,387:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,416:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,553:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,613:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,625:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,629:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,722:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,802:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,817:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,834:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:38,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:39,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:39,196:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:39,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:39,224:INFO:Calculating mean and std
2024-05-21 13:53:39,227:INFO:Creating metrics dataframe
2024-05-21 13:53:39,230:INFO:Uploading results into container
2024-05-21 13:53:39,230:INFO:Uploading model into container now
2024-05-21 13:53:39,231:INFO:_master_model_container: 13
2024-05-21 13:53:39,231:INFO:_display_container: 2
2024-05-21 13:53:39,232:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 13:53:39,233:INFO:create_model() successfully completed......................................
2024-05-21 13:53:39,357:INFO:SubProcess create_model() end ==================================
2024-05-21 13:53:39,357:INFO:Creating metrics dataframe
2024-05-21 13:53:39,375:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 13:53:39,375:INFO:Total runtime is 2.6049356023470565 minutes
2024-05-21 13:53:39,380:INFO:SubProcess create_model() called ==================================
2024-05-21 13:53:39,381:INFO:Initializing create_model()
2024-05-21 13:53:39,382:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:53:39,382:INFO:Checking exceptions
2024-05-21 13:53:39,382:INFO:Importing libraries
2024-05-21 13:53:39,382:INFO:Copying training dataset
2024-05-21 13:53:39,621:INFO:Defining folds
2024-05-21 13:53:39,621:INFO:Declaring metric variables
2024-05-21 13:53:39,625:INFO:Importing untrained model
2024-05-21 13:53:39,630:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 13:53:39,640:INFO:Starting cross validation
2024-05-21 13:53:39,643:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:53:59,811:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,812:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,828:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,844:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,847:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,851:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,870:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,873:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:53:59,890:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,001:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,017:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,025:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,026:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,046:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,191:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,207:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,844:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:00,886:INFO:Calculating mean and std
2024-05-21 13:54:00,889:INFO:Creating metrics dataframe
2024-05-21 13:54:00,893:INFO:Uploading results into container
2024-05-21 13:54:00,893:INFO:Uploading model into container now
2024-05-21 13:54:00,894:INFO:_master_model_container: 14
2024-05-21 13:54:00,894:INFO:_display_container: 2
2024-05-21 13:54:00,895:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:54:00,895:INFO:create_model() successfully completed......................................
2024-05-21 13:54:01,030:INFO:SubProcess create_model() end ==================================
2024-05-21 13:54:01,031:INFO:Creating metrics dataframe
2024-05-21 13:54:01,048:INFO:Initializing Dummy Classifier
2024-05-21 13:54:01,048:INFO:Total runtime is 2.96614500284195 minutes
2024-05-21 13:54:01,052:INFO:SubProcess create_model() called ==================================
2024-05-21 13:54:01,053:INFO:Initializing create_model()
2024-05-21 13:54:01,053:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000293865C5F00>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:54:01,053:INFO:Checking exceptions
2024-05-21 13:54:01,053:INFO:Importing libraries
2024-05-21 13:54:01,053:INFO:Copying training dataset
2024-05-21 13:54:01,305:INFO:Defining folds
2024-05-21 13:54:01,305:INFO:Declaring metric variables
2024-05-21 13:54:01,311:INFO:Importing untrained model
2024-05-21 13:54:01,314:INFO:Dummy Classifier Imported successfully
2024-05-21 13:54:01,324:INFO:Starting cross validation
2024-05-21 13:54:01,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:54:01,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,679:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:01,685:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:01,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,869:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,878:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:01,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,955:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:01,977:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:01,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,066:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,119:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,128:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,220:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,233:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,238:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,286:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,312:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,484:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:54:02,488:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:54:02,505:INFO:Calculating mean and std
2024-05-21 13:54:02,506:INFO:Creating metrics dataframe
2024-05-21 13:54:02,509:INFO:Uploading results into container
2024-05-21 13:54:02,510:INFO:Uploading model into container now
2024-05-21 13:54:02,511:INFO:_master_model_container: 15
2024-05-21 13:54:02,511:INFO:_display_container: 2
2024-05-21 13:54:02,512:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 13:54:02,512:INFO:create_model() successfully completed......................................
2024-05-21 13:54:02,635:INFO:SubProcess create_model() end ==================================
2024-05-21 13:54:02,635:INFO:Creating metrics dataframe
2024-05-21 13:54:02,673:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-21 13:54:02,684:INFO:Initializing create_model()
2024-05-21 13:54:02,685:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029397E3F2E0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:54:02,685:INFO:Checking exceptions
2024-05-21 13:54:02,687:INFO:Importing libraries
2024-05-21 13:54:02,687:INFO:Copying training dataset
2024-05-21 13:54:02,914:INFO:Defining folds
2024-05-21 13:54:02,914:INFO:Declaring metric variables
2024-05-21 13:54:02,914:INFO:Importing untrained model
2024-05-21 13:54:02,914:INFO:Declaring custom model
2024-05-21 13:54:02,915:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 13:54:02,917:INFO:Cross validation set to False
2024-05-21 13:54:02,917:INFO:Fitting Model
2024-05-21 13:54:03,293:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 13:54:03,318:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024968 seconds.
2024-05-21 13:54:03,318:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 13:54:03,321:INFO:[LightGBM] [Info] Total Bins 88230
2024-05-21 13:54:03,326:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 346
2024-05-21 13:54:03,328:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 13:54:03,328:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 13:54:04,391:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:54:04,391:INFO:create_model() successfully completed......................................
2024-05-21 13:54:04,565:INFO:_master_model_container: 15
2024-05-21 13:54:04,565:INFO:_display_container: 2
2024-05-21 13:54:04,566:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:54:04,566:INFO:compare_models() successfully completed......................................
2024-05-21 13:56:46,320:INFO:PyCaret ClassificationExperiment
2024-05-21 13:56:46,320:INFO:Logging name: clf-default-name
2024-05-21 13:56:46,320:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 13:56:46,320:INFO:version 3.3.2
2024-05-21 13:56:46,320:INFO:Initializing setup()
2024-05-21 13:56:46,320:INFO:self.USI: 1fb6
2024-05-21 13:56:46,320:INFO:self._variable_keys: {'is_multiclass', 'y_train', 'exp_id', 'y', 'X', '_available_plots', 'n_jobs_param', 'y_test', 'X_test', 'fold_groups_param', 'data', 'X_train', 'memory', 'idx', 'gpu_param', '_ml_usecase', 'fold_generator', 'target_param', 'html_param', 'exp_name_log', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'USI', 'pipeline', 'gpu_n_jobs_param'}
2024-05-21 13:56:46,320:INFO:Checking environment
2024-05-21 13:56:46,320:INFO:python_version: 3.10.0
2024-05-21 13:56:46,320:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 13:56:46,320:INFO:machine: AMD64
2024-05-21 13:56:46,321:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 13:56:46,328:INFO:Memory: svmem(total=16993001472, available=3636051968, percent=78.6, used=13356949504, free=3636051968)
2024-05-21 13:56:46,328:INFO:Physical Core: 6
2024-05-21 13:56:46,328:INFO:Logical Core: 12
2024-05-21 13:56:46,328:INFO:Checking libraries
2024-05-21 13:56:46,328:INFO:System:
2024-05-21 13:56:46,328:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 13:56:46,329:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 13:56:46,329:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 13:56:46,329:INFO:PyCaret required dependencies:
2024-05-21 13:56:46,329:INFO:                 pip: 24.0
2024-05-21 13:56:46,329:INFO:          setuptools: 57.4.0
2024-05-21 13:56:46,329:INFO:             pycaret: 3.3.2
2024-05-21 13:56:46,329:INFO:             IPython: 8.23.0
2024-05-21 13:56:46,329:INFO:          ipywidgets: 8.1.2
2024-05-21 13:56:46,329:INFO:                tqdm: 4.66.2
2024-05-21 13:56:46,329:INFO:               numpy: 1.26.3
2024-05-21 13:56:46,329:INFO:              pandas: 2.1.4
2024-05-21 13:56:46,329:INFO:              jinja2: 3.1.2
2024-05-21 13:56:46,329:INFO:               scipy: 1.11.4
2024-05-21 13:56:46,329:INFO:              joblib: 1.3.2
2024-05-21 13:56:46,329:INFO:             sklearn: 1.4.2
2024-05-21 13:56:46,330:INFO:                pyod: 1.1.3
2024-05-21 13:56:46,330:INFO:            imblearn: 0.12.2
2024-05-21 13:56:46,330:INFO:   category_encoders: 2.6.3
2024-05-21 13:56:46,330:INFO:            lightgbm: 4.3.0
2024-05-21 13:56:46,330:INFO:               numba: 0.59.1
2024-05-21 13:56:46,330:INFO:            requests: 2.31.0
2024-05-21 13:56:46,330:INFO:          matplotlib: 3.7.5
2024-05-21 13:56:46,330:INFO:          scikitplot: 0.3.7
2024-05-21 13:56:46,330:INFO:         yellowbrick: 1.5
2024-05-21 13:56:46,330:INFO:              plotly: 5.22.0
2024-05-21 13:56:46,331:INFO:    plotly-resampler: Not installed
2024-05-21 13:56:46,331:INFO:             kaleido: 0.2.1
2024-05-21 13:56:46,331:INFO:           schemdraw: 0.15
2024-05-21 13:56:46,331:INFO:         statsmodels: 0.14.2
2024-05-21 13:56:46,331:INFO:              sktime: 0.26.0
2024-05-21 13:56:46,331:INFO:               tbats: 1.1.3
2024-05-21 13:56:46,331:INFO:            pmdarima: 2.0.4
2024-05-21 13:56:46,331:INFO:              psutil: 5.9.8
2024-05-21 13:56:46,331:INFO:          markupsafe: 2.1.3
2024-05-21 13:56:46,331:INFO:             pickle5: Not installed
2024-05-21 13:56:46,332:INFO:         cloudpickle: 3.0.0
2024-05-21 13:56:46,332:INFO:         deprecation: 2.1.0
2024-05-21 13:56:46,332:INFO:              xxhash: 3.4.1
2024-05-21 13:56:46,332:INFO:           wurlitzer: Not installed
2024-05-21 13:56:46,332:INFO:PyCaret optional dependencies:
2024-05-21 13:56:46,332:INFO:                shap: Not installed
2024-05-21 13:56:46,332:INFO:           interpret: Not installed
2024-05-21 13:56:46,332:INFO:                umap: Not installed
2024-05-21 13:56:46,333:INFO:     ydata_profiling: Not installed
2024-05-21 13:56:46,333:INFO:  explainerdashboard: Not installed
2024-05-21 13:56:46,333:INFO:             autoviz: Not installed
2024-05-21 13:56:46,333:INFO:           fairlearn: Not installed
2024-05-21 13:56:46,333:INFO:          deepchecks: Not installed
2024-05-21 13:56:46,333:INFO:             xgboost: 2.0.3
2024-05-21 13:56:46,334:INFO:            catboost: Not installed
2024-05-21 13:56:46,334:INFO:              kmodes: Not installed
2024-05-21 13:56:46,334:INFO:             mlxtend: Not installed
2024-05-21 13:56:46,334:INFO:       statsforecast: Not installed
2024-05-21 13:56:46,334:INFO:        tune_sklearn: Not installed
2024-05-21 13:56:46,334:INFO:                 ray: Not installed
2024-05-21 13:56:46,334:INFO:            hyperopt: Not installed
2024-05-21 13:56:46,334:INFO:              optuna: 3.6.1
2024-05-21 13:56:46,334:INFO:               skopt: Not installed
2024-05-21 13:56:46,334:INFO:              mlflow: 2.13.0
2024-05-21 13:56:46,334:INFO:              gradio: 4.31.4
2024-05-21 13:56:46,335:INFO:             fastapi: 0.111.0
2024-05-21 13:56:46,335:INFO:             uvicorn: 0.29.0
2024-05-21 13:56:46,335:INFO:              m2cgen: 0.10.0
2024-05-21 13:56:46,335:INFO:           evidently: 0.4.23
2024-05-21 13:56:46,335:INFO:               fugue: Not installed
2024-05-21 13:56:46,335:INFO:           streamlit: Not installed
2024-05-21 13:56:46,335:INFO:             prophet: Not installed
2024-05-21 13:56:46,335:INFO:None
2024-05-21 13:56:46,335:INFO:Set up data.
2024-05-21 13:56:46,480:INFO:Set up folding strategy.
2024-05-21 13:56:46,480:INFO:Set up train/test split.
2024-05-21 13:56:46,662:INFO:Set up index.
2024-05-21 13:56:46,664:INFO:Assigning column types.
2024-05-21 13:56:46,875:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 13:56:46,935:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:56:46,936:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:46,975:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:46,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,039:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:56:47,040:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:47,078:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:47,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,082:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 13:56:47,148:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:47,187:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:47,190:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,255:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:47,293:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:47,297:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,297:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 13:56:47,397:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:47,400:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,500:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:47,504:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:47,507:INFO:Preparing preprocessing pipeline...
2024-05-21 13:56:47,540:INFO:Set up label encoding.
2024-05-21 13:56:47,540:INFO:Set up simple imputation.
2024-05-21 13:56:48,018:INFO:Finished creating preprocessing pipeline.
2024-05-21 13:56:48,026:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 13:56:48,026:INFO:Creating final display dataframe.
2024-05-21 13:56:49,105:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              1fb6
2024-05-21 13:56:49,252:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:49,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:49,407:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:49,411:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:49,413:INFO:setup() successfully completed in 3.1s...............
2024-05-21 13:56:49,635:INFO:PyCaret ClassificationExperiment
2024-05-21 13:56:49,635:INFO:Logging name: clf-default-name
2024-05-21 13:56:49,635:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 13:56:49,635:INFO:version 3.3.2
2024-05-21 13:56:49,635:INFO:Initializing setup()
2024-05-21 13:56:49,635:INFO:self.USI: 050e
2024-05-21 13:56:49,635:INFO:self._variable_keys: {'is_multiclass', 'y_train', 'exp_id', 'y', 'X', '_available_plots', 'n_jobs_param', 'y_test', 'X_test', 'fold_groups_param', 'data', 'X_train', 'memory', 'idx', 'gpu_param', '_ml_usecase', 'fold_generator', 'target_param', 'html_param', 'exp_name_log', 'fix_imbalance', 'seed', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'USI', 'pipeline', 'gpu_n_jobs_param'}
2024-05-21 13:56:49,635:INFO:Checking environment
2024-05-21 13:56:49,635:INFO:python_version: 3.10.0
2024-05-21 13:56:49,635:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 13:56:49,635:INFO:machine: AMD64
2024-05-21 13:56:49,636:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 13:56:49,645:INFO:Memory: svmem(total=16993001472, available=3581984768, percent=78.9, used=13411016704, free=3581984768)
2024-05-21 13:56:49,645:INFO:Physical Core: 6
2024-05-21 13:56:49,645:INFO:Logical Core: 12
2024-05-21 13:56:49,645:INFO:Checking libraries
2024-05-21 13:56:49,645:INFO:System:
2024-05-21 13:56:49,645:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 13:56:49,645:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 13:56:49,646:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 13:56:49,646:INFO:PyCaret required dependencies:
2024-05-21 13:56:49,646:INFO:                 pip: 24.0
2024-05-21 13:56:49,646:INFO:          setuptools: 57.4.0
2024-05-21 13:56:49,646:INFO:             pycaret: 3.3.2
2024-05-21 13:56:49,646:INFO:             IPython: 8.23.0
2024-05-21 13:56:49,646:INFO:          ipywidgets: 8.1.2
2024-05-21 13:56:49,646:INFO:                tqdm: 4.66.2
2024-05-21 13:56:49,646:INFO:               numpy: 1.26.3
2024-05-21 13:56:49,646:INFO:              pandas: 2.1.4
2024-05-21 13:56:49,647:INFO:              jinja2: 3.1.2
2024-05-21 13:56:49,647:INFO:               scipy: 1.11.4
2024-05-21 13:56:49,647:INFO:              joblib: 1.3.2
2024-05-21 13:56:49,647:INFO:             sklearn: 1.4.2
2024-05-21 13:56:49,647:INFO:                pyod: 1.1.3
2024-05-21 13:56:49,647:INFO:            imblearn: 0.12.2
2024-05-21 13:56:49,647:INFO:   category_encoders: 2.6.3
2024-05-21 13:56:49,647:INFO:            lightgbm: 4.3.0
2024-05-21 13:56:49,647:INFO:               numba: 0.59.1
2024-05-21 13:56:49,647:INFO:            requests: 2.31.0
2024-05-21 13:56:49,647:INFO:          matplotlib: 3.7.5
2024-05-21 13:56:49,648:INFO:          scikitplot: 0.3.7
2024-05-21 13:56:49,648:INFO:         yellowbrick: 1.5
2024-05-21 13:56:49,648:INFO:              plotly: 5.22.0
2024-05-21 13:56:49,648:INFO:    plotly-resampler: Not installed
2024-05-21 13:56:49,648:INFO:             kaleido: 0.2.1
2024-05-21 13:56:49,648:INFO:           schemdraw: 0.15
2024-05-21 13:56:49,648:INFO:         statsmodels: 0.14.2
2024-05-21 13:56:49,648:INFO:              sktime: 0.26.0
2024-05-21 13:56:49,648:INFO:               tbats: 1.1.3
2024-05-21 13:56:49,648:INFO:            pmdarima: 2.0.4
2024-05-21 13:56:49,649:INFO:              psutil: 5.9.8
2024-05-21 13:56:49,649:INFO:          markupsafe: 2.1.3
2024-05-21 13:56:49,649:INFO:             pickle5: Not installed
2024-05-21 13:56:49,649:INFO:         cloudpickle: 3.0.0
2024-05-21 13:56:49,649:INFO:         deprecation: 2.1.0
2024-05-21 13:56:49,649:INFO:              xxhash: 3.4.1
2024-05-21 13:56:49,649:INFO:           wurlitzer: Not installed
2024-05-21 13:56:49,649:INFO:PyCaret optional dependencies:
2024-05-21 13:56:49,650:INFO:                shap: Not installed
2024-05-21 13:56:49,650:INFO:           interpret: Not installed
2024-05-21 13:56:49,650:INFO:                umap: Not installed
2024-05-21 13:56:49,650:INFO:     ydata_profiling: Not installed
2024-05-21 13:56:49,650:INFO:  explainerdashboard: Not installed
2024-05-21 13:56:49,650:INFO:             autoviz: Not installed
2024-05-21 13:56:49,650:INFO:           fairlearn: Not installed
2024-05-21 13:56:49,650:INFO:          deepchecks: Not installed
2024-05-21 13:56:49,650:INFO:             xgboost: 2.0.3
2024-05-21 13:56:49,651:INFO:            catboost: Not installed
2024-05-21 13:56:49,651:INFO:              kmodes: Not installed
2024-05-21 13:56:49,651:INFO:             mlxtend: Not installed
2024-05-21 13:56:49,651:INFO:       statsforecast: Not installed
2024-05-21 13:56:49,651:INFO:        tune_sklearn: Not installed
2024-05-21 13:56:49,651:INFO:                 ray: Not installed
2024-05-21 13:56:49,651:INFO:            hyperopt: Not installed
2024-05-21 13:56:49,651:INFO:              optuna: 3.6.1
2024-05-21 13:56:49,651:INFO:               skopt: Not installed
2024-05-21 13:56:49,651:INFO:              mlflow: 2.13.0
2024-05-21 13:56:49,652:INFO:              gradio: 4.31.4
2024-05-21 13:56:49,652:INFO:             fastapi: 0.111.0
2024-05-21 13:56:49,652:INFO:             uvicorn: 0.29.0
2024-05-21 13:56:49,652:INFO:              m2cgen: 0.10.0
2024-05-21 13:56:49,652:INFO:           evidently: 0.4.23
2024-05-21 13:56:49,652:INFO:               fugue: Not installed
2024-05-21 13:56:49,652:INFO:           streamlit: Not installed
2024-05-21 13:56:49,652:INFO:             prophet: Not installed
2024-05-21 13:56:49,652:INFO:None
2024-05-21 13:56:49,652:INFO:Set up data.
2024-05-21 13:56:49,839:INFO:Set up folding strategy.
2024-05-21 13:56:49,839:INFO:Set up train/test split.
2024-05-21 13:56:50,026:INFO:Set up index.
2024-05-21 13:56:50,032:INFO:Assigning column types.
2024-05-21 13:56:50,268:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 13:56:50,334:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,335:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,376:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,379:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,442:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,443:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,482:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,488:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 13:56:50,553:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,592:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,596:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,665:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 13:56:50,705:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,714:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 13:56:50,818:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,821:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,921:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:50,925:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:50,927:INFO:Preparing preprocessing pipeline...
2024-05-21 13:56:50,955:INFO:Set up label encoding.
2024-05-21 13:56:50,955:INFO:Set up simple imputation.
2024-05-21 13:56:51,488:INFO:Finished creating preprocessing pipeline.
2024-05-21 13:56:51,496:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 13:56:51,496:INFO:Creating final display dataframe.
2024-05-21 13:56:52,476:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              050e
2024-05-21 13:56:52,619:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:52,622:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:52,732:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 13:56:52,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 13:56:52,742:INFO:setup() successfully completed in 3.12s...............
2024-05-21 13:56:52,801:INFO:Initializing compare_models()
2024-05-21 13:56:52,801:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 13:56:52,802:INFO:Checking exceptions
2024-05-21 13:56:52,975:INFO:Preparing display monitor
2024-05-21 13:56:53,008:INFO:Initializing Logistic Regression
2024-05-21 13:56:53,008:INFO:Total runtime is 0.0 minutes
2024-05-21 13:56:53,014:INFO:SubProcess create_model() called ==================================
2024-05-21 13:56:53,014:INFO:Initializing create_model()
2024-05-21 13:56:53,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:56:53,015:INFO:Checking exceptions
2024-05-21 13:56:53,015:INFO:Importing libraries
2024-05-21 13:56:53,016:INFO:Copying training dataset
2024-05-21 13:56:53,265:INFO:Defining folds
2024-05-21 13:56:53,265:INFO:Declaring metric variables
2024-05-21 13:56:53,269:INFO:Importing untrained model
2024-05-21 13:56:53,274:INFO:Logistic Regression Imported successfully
2024-05-21 13:56:53,282:INFO:Starting cross validation
2024-05-21 13:56:53,285:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:56:53,755:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,782:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:53,787:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,869:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:53,903:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:53,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:53,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,062:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,078:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,152:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,162:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,168:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,178:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,384:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,454:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,461:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,533:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,546:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,624:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:56:54,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:54,652:INFO:Calculating mean and std
2024-05-21 13:56:54,654:INFO:Creating metrics dataframe
2024-05-21 13:56:54,657:INFO:Uploading results into container
2024-05-21 13:56:54,657:INFO:Uploading model into container now
2024-05-21 13:56:54,658:INFO:_master_model_container: 1
2024-05-21 13:56:54,658:INFO:_display_container: 2
2024-05-21 13:56:54,658:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 13:56:54,659:INFO:create_model() successfully completed......................................
2024-05-21 13:56:54,787:INFO:SubProcess create_model() end ==================================
2024-05-21 13:56:54,797:INFO:Creating metrics dataframe
2024-05-21 13:56:54,820:INFO:Initializing K Neighbors Classifier
2024-05-21 13:56:54,820:INFO:Total runtime is 0.03019825617472331 minutes
2024-05-21 13:56:54,828:INFO:SubProcess create_model() called ==================================
2024-05-21 13:56:54,828:INFO:Initializing create_model()
2024-05-21 13:56:54,829:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:56:54,829:INFO:Checking exceptions
2024-05-21 13:56:54,829:INFO:Importing libraries
2024-05-21 13:56:54,829:INFO:Copying training dataset
2024-05-21 13:56:55,060:INFO:Defining folds
2024-05-21 13:56:55,060:INFO:Declaring metric variables
2024-05-21 13:56:55,065:INFO:Importing untrained model
2024-05-21 13:56:55,069:INFO:K Neighbors Classifier Imported successfully
2024-05-21 13:56:55,079:INFO:Starting cross validation
2024-05-21 13:56:55,082:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:56:56,518:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,565:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,762:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,781:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,799:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,815:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,845:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,863:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,951:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,967:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:56,982:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,022:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,145:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,218:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,305:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,505:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:57,560:INFO:Calculating mean and std
2024-05-21 13:56:57,562:INFO:Creating metrics dataframe
2024-05-21 13:56:57,566:INFO:Uploading results into container
2024-05-21 13:56:57,567:INFO:Uploading model into container now
2024-05-21 13:56:57,567:INFO:_master_model_container: 2
2024-05-21 13:56:57,567:INFO:_display_container: 2
2024-05-21 13:56:57,568:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 13:56:57,568:INFO:create_model() successfully completed......................................
2024-05-21 13:56:57,693:INFO:SubProcess create_model() end ==================================
2024-05-21 13:56:57,694:INFO:Creating metrics dataframe
2024-05-21 13:56:57,705:INFO:Initializing Naive Bayes
2024-05-21 13:56:57,705:INFO:Total runtime is 0.07827261686325074 minutes
2024-05-21 13:56:57,709:INFO:SubProcess create_model() called ==================================
2024-05-21 13:56:57,710:INFO:Initializing create_model()
2024-05-21 13:56:57,710:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:56:57,710:INFO:Checking exceptions
2024-05-21 13:56:57,710:INFO:Importing libraries
2024-05-21 13:56:57,710:INFO:Copying training dataset
2024-05-21 13:56:57,986:INFO:Defining folds
2024-05-21 13:56:57,986:INFO:Declaring metric variables
2024-05-21 13:56:57,991:INFO:Importing untrained model
2024-05-21 13:56:57,997:INFO:Naive Bayes Imported successfully
2024-05-21 13:56:58,007:INFO:Starting cross validation
2024-05-21 13:56:58,010:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:56:58,468:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,546:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,570:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,742:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,768:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,846:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,943:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:58,959:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,036:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,046:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,290:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,308:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:56:59,331:INFO:Calculating mean and std
2024-05-21 13:56:59,332:INFO:Creating metrics dataframe
2024-05-21 13:56:59,335:INFO:Uploading results into container
2024-05-21 13:56:59,336:INFO:Uploading model into container now
2024-05-21 13:56:59,337:INFO:_master_model_container: 3
2024-05-21 13:56:59,337:INFO:_display_container: 2
2024-05-21 13:56:59,337:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 13:56:59,337:INFO:create_model() successfully completed......................................
2024-05-21 13:56:59,472:INFO:SubProcess create_model() end ==================================
2024-05-21 13:56:59,472:INFO:Creating metrics dataframe
2024-05-21 13:56:59,482:INFO:Initializing Decision Tree Classifier
2024-05-21 13:56:59,482:INFO:Total runtime is 0.10789562463760377 minutes
2024-05-21 13:56:59,488:INFO:SubProcess create_model() called ==================================
2024-05-21 13:56:59,489:INFO:Initializing create_model()
2024-05-21 13:56:59,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:56:59,489:INFO:Checking exceptions
2024-05-21 13:56:59,490:INFO:Importing libraries
2024-05-21 13:56:59,490:INFO:Copying training dataset
2024-05-21 13:56:59,747:INFO:Defining folds
2024-05-21 13:56:59,747:INFO:Declaring metric variables
2024-05-21 13:56:59,752:INFO:Importing untrained model
2024-05-21 13:56:59,758:INFO:Decision Tree Classifier Imported successfully
2024-05-21 13:56:59,768:INFO:Starting cross validation
2024-05-21 13:56:59,772:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:00,586:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:00,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,728:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,737:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:00,745:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,844:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,861:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,870:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:00,878:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,965:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:00,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:00,979:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,098:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,107:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,207:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,354:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,362:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,438:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,448:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:01,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:01,551:INFO:Calculating mean and std
2024-05-21 13:57:01,553:INFO:Creating metrics dataframe
2024-05-21 13:57:01,557:INFO:Uploading results into container
2024-05-21 13:57:01,558:INFO:Uploading model into container now
2024-05-21 13:57:01,559:INFO:_master_model_container: 4
2024-05-21 13:57:01,559:INFO:_display_container: 2
2024-05-21 13:57:01,560:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 13:57:01,560:INFO:create_model() successfully completed......................................
2024-05-21 13:57:01,704:INFO:SubProcess create_model() end ==================================
2024-05-21 13:57:01,704:INFO:Creating metrics dataframe
2024-05-21 13:57:01,716:INFO:Initializing SVM - Linear Kernel
2024-05-21 13:57:01,716:INFO:Total runtime is 0.14512319564819337 minutes
2024-05-21 13:57:01,721:INFO:SubProcess create_model() called ==================================
2024-05-21 13:57:01,721:INFO:Initializing create_model()
2024-05-21 13:57:01,721:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:57:01,722:INFO:Checking exceptions
2024-05-21 13:57:01,722:INFO:Importing libraries
2024-05-21 13:57:01,722:INFO:Copying training dataset
2024-05-21 13:57:01,982:INFO:Defining folds
2024-05-21 13:57:01,982:INFO:Declaring metric variables
2024-05-21 13:57:01,989:INFO:Importing untrained model
2024-05-21 13:57:01,995:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 13:57:02,005:INFO:Starting cross validation
2024-05-21 13:57:02,007:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:02,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:02,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:02,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:02,826:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:02,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:02,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:02,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:02,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,024:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,049:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,169:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,354:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,364:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,372:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,379:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,429:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,540:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,553:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,611:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,622:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,630:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,637:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,693:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:03,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:03,746:INFO:Calculating mean and std
2024-05-21 13:57:03,748:INFO:Creating metrics dataframe
2024-05-21 13:57:03,751:INFO:Uploading results into container
2024-05-21 13:57:03,752:INFO:Uploading model into container now
2024-05-21 13:57:03,752:INFO:_master_model_container: 5
2024-05-21 13:57:03,752:INFO:_display_container: 2
2024-05-21 13:57:03,753:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 13:57:03,753:INFO:create_model() successfully completed......................................
2024-05-21 13:57:03,885:INFO:SubProcess create_model() end ==================================
2024-05-21 13:57:03,885:INFO:Creating metrics dataframe
2024-05-21 13:57:03,897:INFO:Initializing Ridge Classifier
2024-05-21 13:57:03,898:INFO:Total runtime is 0.18149060805638634 minutes
2024-05-21 13:57:03,903:INFO:SubProcess create_model() called ==================================
2024-05-21 13:57:03,904:INFO:Initializing create_model()
2024-05-21 13:57:03,904:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:57:03,904:INFO:Checking exceptions
2024-05-21 13:57:03,904:INFO:Importing libraries
2024-05-21 13:57:03,905:INFO:Copying training dataset
2024-05-21 13:57:04,145:INFO:Defining folds
2024-05-21 13:57:04,145:INFO:Declaring metric variables
2024-05-21 13:57:04,150:INFO:Importing untrained model
2024-05-21 13:57:04,156:INFO:Ridge Classifier Imported successfully
2024-05-21 13:57:04,165:INFO:Starting cross validation
2024-05-21 13:57:04,167:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:04,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,724:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:04,731:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,834:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:04,867:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,907:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,924:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:04,934:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:04,944:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,091:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,098:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,185:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,309:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,413:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,421:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,502:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,577:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,590:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,600:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,650:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,664:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:05,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:05,685:INFO:Calculating mean and std
2024-05-21 13:57:05,707:INFO:Creating metrics dataframe
2024-05-21 13:57:05,710:INFO:Uploading results into container
2024-05-21 13:57:05,710:INFO:Uploading model into container now
2024-05-21 13:57:05,711:INFO:_master_model_container: 6
2024-05-21 13:57:05,711:INFO:_display_container: 2
2024-05-21 13:57:05,712:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 13:57:05,712:INFO:create_model() successfully completed......................................
2024-05-21 13:57:05,862:INFO:SubProcess create_model() end ==================================
2024-05-21 13:57:05,862:INFO:Creating metrics dataframe
2024-05-21 13:57:05,873:INFO:Initializing Random Forest Classifier
2024-05-21 13:57:05,873:INFO:Total runtime is 0.2144190311431885 minutes
2024-05-21 13:57:05,877:INFO:SubProcess create_model() called ==================================
2024-05-21 13:57:05,878:INFO:Initializing create_model()
2024-05-21 13:57:05,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:57:05,878:INFO:Checking exceptions
2024-05-21 13:57:05,878:INFO:Importing libraries
2024-05-21 13:57:05,878:INFO:Copying training dataset
2024-05-21 13:57:06,167:INFO:Defining folds
2024-05-21 13:57:06,168:INFO:Declaring metric variables
2024-05-21 13:57:06,172:INFO:Importing untrained model
2024-05-21 13:57:06,178:INFO:Random Forest Classifier Imported successfully
2024-05-21 13:57:06,189:INFO:Starting cross validation
2024-05-21 13:57:06,192:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:31,826:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,852:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,865:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,873:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,876:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,892:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,903:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,908:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,919:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,971:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,992:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:31,997:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:31,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:32,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,045:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:32,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,073:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,085:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,091:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,094:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:32,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:32,101:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,108:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:32,139:INFO:Calculating mean and std
2024-05-21 13:57:32,141:INFO:Creating metrics dataframe
2024-05-21 13:57:32,146:INFO:Uploading results into container
2024-05-21 13:57:32,147:INFO:Uploading model into container now
2024-05-21 13:57:32,148:INFO:_master_model_container: 7
2024-05-21 13:57:32,148:INFO:_display_container: 2
2024-05-21 13:57:32,149:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 13:57:32,150:INFO:create_model() successfully completed......................................
2024-05-21 13:57:32,335:INFO:SubProcess create_model() end ==================================
2024-05-21 13:57:32,336:INFO:Creating metrics dataframe
2024-05-21 13:57:32,356:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 13:57:32,356:INFO:Total runtime is 0.6558000524838765 minutes
2024-05-21 13:57:32,364:INFO:SubProcess create_model() called ==================================
2024-05-21 13:57:32,365:INFO:Initializing create_model()
2024-05-21 13:57:32,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:57:32,365:INFO:Checking exceptions
2024-05-21 13:57:32,366:INFO:Importing libraries
2024-05-21 13:57:32,366:INFO:Copying training dataset
2024-05-21 13:57:32,656:INFO:Defining folds
2024-05-21 13:57:32,657:INFO:Declaring metric variables
2024-05-21 13:57:32,662:INFO:Importing untrained model
2024-05-21 13:57:32,671:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 13:57:32,683:INFO:Starting cross validation
2024-05-21 13:57:32,687:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:33,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,312:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,586:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,641:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,659:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,689:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,789:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:34,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,867:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,907:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:34,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:34,972:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:34,975:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:34,981:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:34,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:34,997:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:35,004:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,004:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,006:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,016:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,024:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:35,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,040:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,091:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,121:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,128:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,146:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,167:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,179:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,212:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,223:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,248:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,269:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:35,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 13:57:35,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,309:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,341:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,423:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,437:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,452:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,454:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,463:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,469:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,488:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,495:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,588:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 13:57:35,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,624:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,629:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 13:57:35,635:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 13:57:35,639:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,642:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,647:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,653:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:57:35,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:57:35,696:INFO:Calculating mean and std
2024-05-21 13:57:35,699:INFO:Creating metrics dataframe
2024-05-21 13:57:35,701:INFO:Uploading results into container
2024-05-21 13:57:35,702:INFO:Uploading model into container now
2024-05-21 13:57:35,702:INFO:_master_model_container: 8
2024-05-21 13:57:35,702:INFO:_display_container: 2
2024-05-21 13:57:35,703:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 13:57:35,703:INFO:create_model() successfully completed......................................
2024-05-21 13:57:35,832:INFO:SubProcess create_model() end ==================================
2024-05-21 13:57:35,833:INFO:Creating metrics dataframe
2024-05-21 13:57:35,845:INFO:Initializing Ada Boost Classifier
2024-05-21 13:57:35,845:INFO:Total runtime is 0.7139381249745687 minutes
2024-05-21 13:57:35,850:INFO:SubProcess create_model() called ==================================
2024-05-21 13:57:35,850:INFO:Initializing create_model()
2024-05-21 13:57:35,850:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:57:35,850:INFO:Checking exceptions
2024-05-21 13:57:35,851:INFO:Importing libraries
2024-05-21 13:57:35,851:INFO:Copying training dataset
2024-05-21 13:57:36,155:INFO:Defining folds
2024-05-21 13:57:36,155:INFO:Declaring metric variables
2024-05-21 13:57:36,160:INFO:Importing untrained model
2024-05-21 13:57:36,166:INFO:Ada Boost Classifier Imported successfully
2024-05-21 13:57:36,178:INFO:Starting cross validation
2024-05-21 13:57:36,181:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:57:36,501:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:36,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:36,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:36,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:36,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:36,982:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:37,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:37,176:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:37,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:57:37,452:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 13:58:00,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:00,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:00,999:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,007:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,293:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,303:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,312:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,375:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,436:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,461:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,468:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,744:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:01,840:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:01,855:INFO:Calculating mean and std
2024-05-21 13:58:01,858:INFO:Creating metrics dataframe
2024-05-21 13:58:01,861:INFO:Uploading results into container
2024-05-21 13:58:01,862:INFO:Uploading model into container now
2024-05-21 13:58:01,862:INFO:_master_model_container: 9
2024-05-21 13:58:01,863:INFO:_display_container: 2
2024-05-21 13:58:01,864:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 13:58:01,864:INFO:create_model() successfully completed......................................
2024-05-21 13:58:01,994:INFO:SubProcess create_model() end ==================================
2024-05-21 13:58:01,994:INFO:Creating metrics dataframe
2024-05-21 13:58:02,007:INFO:Initializing Gradient Boosting Classifier
2024-05-21 13:58:02,008:INFO:Total runtime is 1.1499900619188943 minutes
2024-05-21 13:58:02,015:INFO:SubProcess create_model() called ==================================
2024-05-21 13:58:02,015:INFO:Initializing create_model()
2024-05-21 13:58:02,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:58:02,016:INFO:Checking exceptions
2024-05-21 13:58:02,016:INFO:Importing libraries
2024-05-21 13:58:02,016:INFO:Copying training dataset
2024-05-21 13:58:02,296:INFO:Defining folds
2024-05-21 13:58:02,296:INFO:Declaring metric variables
2024-05-21 13:58:02,301:INFO:Importing untrained model
2024-05-21 13:58:02,306:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 13:58:02,315:INFO:Starting cross validation
2024-05-21 13:58:02,317:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:58:50,946:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:50,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:50,981:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:50,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,178:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,191:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,216:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,228:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,233:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,248:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,359:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,925:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:51,938:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:51,943:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:52,274:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:52,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:52,287:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:52,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:52,307:INFO:Calculating mean and std
2024-05-21 13:58:52,309:INFO:Creating metrics dataframe
2024-05-21 13:58:52,312:INFO:Uploading results into container
2024-05-21 13:58:52,312:INFO:Uploading model into container now
2024-05-21 13:58:52,312:INFO:_master_model_container: 10
2024-05-21 13:58:52,313:INFO:_display_container: 2
2024-05-21 13:58:52,314:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 13:58:52,314:INFO:create_model() successfully completed......................................
2024-05-21 13:58:52,437:INFO:SubProcess create_model() end ==================================
2024-05-21 13:58:52,437:INFO:Creating metrics dataframe
2024-05-21 13:58:52,450:INFO:Initializing Linear Discriminant Analysis
2024-05-21 13:58:52,450:INFO:Total runtime is 1.990690183639526 minutes
2024-05-21 13:58:52,454:INFO:SubProcess create_model() called ==================================
2024-05-21 13:58:52,455:INFO:Initializing create_model()
2024-05-21 13:58:52,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:58:52,455:INFO:Checking exceptions
2024-05-21 13:58:52,455:INFO:Importing libraries
2024-05-21 13:58:52,455:INFO:Copying training dataset
2024-05-21 13:58:52,712:INFO:Defining folds
2024-05-21 13:58:52,713:INFO:Declaring metric variables
2024-05-21 13:58:52,717:INFO:Importing untrained model
2024-05-21 13:58:52,723:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 13:58:52,733:INFO:Starting cross validation
2024-05-21 13:58:52,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:58:53,611:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,648:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,777:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,811:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,919:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,935:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:53,951:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,019:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,140:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,261:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,338:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,364:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,431:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,447:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,461:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:54,654:INFO:Calculating mean and std
2024-05-21 13:58:54,656:INFO:Creating metrics dataframe
2024-05-21 13:58:54,659:INFO:Uploading results into container
2024-05-21 13:58:54,660:INFO:Uploading model into container now
2024-05-21 13:58:54,660:INFO:_master_model_container: 11
2024-05-21 13:58:54,660:INFO:_display_container: 2
2024-05-21 13:58:54,660:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 13:58:54,661:INFO:create_model() successfully completed......................................
2024-05-21 13:58:54,777:INFO:SubProcess create_model() end ==================================
2024-05-21 13:58:54,777:INFO:Creating metrics dataframe
2024-05-21 13:58:54,791:INFO:Initializing Extra Trees Classifier
2024-05-21 13:58:54,791:INFO:Total runtime is 2.0297157168388362 minutes
2024-05-21 13:58:54,796:INFO:SubProcess create_model() called ==================================
2024-05-21 13:58:54,797:INFO:Initializing create_model()
2024-05-21 13:58:54,797:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:58:54,797:INFO:Checking exceptions
2024-05-21 13:58:54,797:INFO:Importing libraries
2024-05-21 13:58:54,797:INFO:Copying training dataset
2024-05-21 13:58:55,041:INFO:Defining folds
2024-05-21 13:58:55,042:INFO:Declaring metric variables
2024-05-21 13:58:55,046:INFO:Importing untrained model
2024-05-21 13:58:55,053:INFO:Extra Trees Classifier Imported successfully
2024-05-21 13:58:55,064:INFO:Starting cross validation
2024-05-21 13:58:55,067:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:58:55,995:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,039:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:56,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,262:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,279:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,325:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:56,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,532:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,549:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:56,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:56,733:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:56,741:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,013:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,194:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,293:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,397:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,432:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,448:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,549:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,560:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,565:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:58:57,570:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:58:57,601:INFO:Calculating mean and std
2024-05-21 13:58:57,603:INFO:Creating metrics dataframe
2024-05-21 13:58:57,605:INFO:Uploading results into container
2024-05-21 13:58:57,606:INFO:Uploading model into container now
2024-05-21 13:58:57,607:INFO:_master_model_container: 12
2024-05-21 13:58:57,607:INFO:_display_container: 2
2024-05-21 13:58:57,607:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 13:58:57,608:INFO:create_model() successfully completed......................................
2024-05-21 13:58:57,726:INFO:SubProcess create_model() end ==================================
2024-05-21 13:58:57,726:INFO:Creating metrics dataframe
2024-05-21 13:58:57,741:INFO:Initializing Extreme Gradient Boosting
2024-05-21 13:58:57,741:INFO:Total runtime is 2.0788706700007116 minutes
2024-05-21 13:58:57,745:INFO:SubProcess create_model() called ==================================
2024-05-21 13:58:57,745:INFO:Initializing create_model()
2024-05-21 13:58:57,745:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:58:57,745:INFO:Checking exceptions
2024-05-21 13:58:57,745:INFO:Importing libraries
2024-05-21 13:58:57,746:INFO:Copying training dataset
2024-05-21 13:58:57,989:INFO:Defining folds
2024-05-21 13:58:57,989:INFO:Declaring metric variables
2024-05-21 13:58:58,013:INFO:Importing untrained model
2024-05-21 13:58:58,019:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 13:58:58,028:INFO:Starting cross validation
2024-05-21 13:58:58,030:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:59:11,956:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:11,977:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:11,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,485:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,940:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:12,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,423:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,474:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,500:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,551:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,584:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,803:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:13,869:INFO:Calculating mean and std
2024-05-21 13:59:13,871:INFO:Creating metrics dataframe
2024-05-21 13:59:13,874:INFO:Uploading results into container
2024-05-21 13:59:13,874:INFO:Uploading model into container now
2024-05-21 13:59:13,875:INFO:_master_model_container: 13
2024-05-21 13:59:13,875:INFO:_display_container: 2
2024-05-21 13:59:13,876:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 13:59:13,876:INFO:create_model() successfully completed......................................
2024-05-21 13:59:13,999:INFO:SubProcess create_model() end ==================================
2024-05-21 13:59:13,999:INFO:Creating metrics dataframe
2024-05-21 13:59:14,013:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 13:59:14,013:INFO:Total runtime is 2.350079751014709 minutes
2024-05-21 13:59:14,018:INFO:SubProcess create_model() called ==================================
2024-05-21 13:59:14,018:INFO:Initializing create_model()
2024-05-21 13:59:14,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:59:14,019:INFO:Checking exceptions
2024-05-21 13:59:14,019:INFO:Importing libraries
2024-05-21 13:59:14,019:INFO:Copying training dataset
2024-05-21 13:59:14,279:INFO:Defining folds
2024-05-21 13:59:14,280:INFO:Declaring metric variables
2024-05-21 13:59:14,284:INFO:Importing untrained model
2024-05-21 13:59:14,289:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 13:59:14,298:INFO:Starting cross validation
2024-05-21 13:59:14,300:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:59:31,936:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:31,951:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:31,971:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:31,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:31,994:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,029:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,152:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,170:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,194:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,225:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,228:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,265:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:32,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,110:INFO:Calculating mean and std
2024-05-21 13:59:33,113:INFO:Creating metrics dataframe
2024-05-21 13:59:33,118:INFO:Uploading results into container
2024-05-21 13:59:33,119:INFO:Uploading model into container now
2024-05-21 13:59:33,120:INFO:_master_model_container: 14
2024-05-21 13:59:33,120:INFO:_display_container: 2
2024-05-21 13:59:33,121:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:59:33,121:INFO:create_model() successfully completed......................................
2024-05-21 13:59:33,292:INFO:SubProcess create_model() end ==================================
2024-05-21 13:59:33,293:INFO:Creating metrics dataframe
2024-05-21 13:59:33,318:INFO:Initializing Dummy Classifier
2024-05-21 13:59:33,318:INFO:Total runtime is 2.6718264500300086 minutes
2024-05-21 13:59:33,326:INFO:SubProcess create_model() called ==================================
2024-05-21 13:59:33,326:INFO:Initializing create_model()
2024-05-21 13:59:33,327:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002938F01EE60>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:59:33,327:INFO:Checking exceptions
2024-05-21 13:59:33,327:INFO:Importing libraries
2024-05-21 13:59:33,327:INFO:Copying training dataset
2024-05-21 13:59:33,646:INFO:Defining folds
2024-05-21 13:59:33,646:INFO:Declaring metric variables
2024-05-21 13:59:33,651:INFO:Importing untrained model
2024-05-21 13:59:33,655:INFO:Dummy Classifier Imported successfully
2024-05-21 13:59:33,664:INFO:Starting cross validation
2024-05-21 13:59:33,666:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 13:59:33,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:33,987:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:33,994:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,129:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,156:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,225:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,324:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,337:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,355:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,432:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,524:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,556:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,564:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,625:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,633:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,703:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,753:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,762:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 13:59:34,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 13:59:34,795:INFO:Calculating mean and std
2024-05-21 13:59:34,797:INFO:Creating metrics dataframe
2024-05-21 13:59:34,799:INFO:Uploading results into container
2024-05-21 13:59:34,800:INFO:Uploading model into container now
2024-05-21 13:59:34,800:INFO:_master_model_container: 15
2024-05-21 13:59:34,800:INFO:_display_container: 2
2024-05-21 13:59:34,801:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 13:59:34,801:INFO:create_model() successfully completed......................................
2024-05-21 13:59:34,924:INFO:SubProcess create_model() end ==================================
2024-05-21 13:59:34,924:INFO:Creating metrics dataframe
2024-05-21 13:59:34,939:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-21 13:59:34,967:INFO:Initializing create_model()
2024-05-21 13:59:34,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002939057E530>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 13:59:34,968:INFO:Checking exceptions
2024-05-21 13:59:34,971:INFO:Importing libraries
2024-05-21 13:59:34,971:INFO:Copying training dataset
2024-05-21 13:59:35,201:INFO:Defining folds
2024-05-21 13:59:35,201:INFO:Declaring metric variables
2024-05-21 13:59:35,201:INFO:Importing untrained model
2024-05-21 13:59:35,201:INFO:Declaring custom model
2024-05-21 13:59:35,203:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 13:59:35,205:INFO:Cross validation set to False
2024-05-21 13:59:35,205:INFO:Fitting Model
2024-05-21 13:59:35,520:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 13:59:35,550:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.029241 seconds.
2024-05-21 13:59:35,550:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 13:59:35,553:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 13:59:35,557:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 13:59:35,559:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 13:59:35,560:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 13:59:36,918:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:59:36,918:INFO:create_model() successfully completed......................................
2024-05-21 13:59:37,095:INFO:_master_model_container: 15
2024-05-21 13:59:37,095:INFO:_display_container: 2
2024-05-21 13:59:37,096:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 13:59:37,096:INFO:compare_models() successfully completed......................................
2024-05-21 14:04:57,196:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:04:57,196:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:04:57,196:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:04:57,196:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:17:16,265:INFO:PyCaret ClassificationExperiment
2024-05-21 14:17:16,266:INFO:Logging name: clf-default-name
2024-05-21 14:17:16,266:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:17:16,266:INFO:version 3.3.2
2024-05-21 14:17:16,266:INFO:Initializing setup()
2024-05-21 14:17:16,266:INFO:self.USI: c33e
2024-05-21 14:17:16,266:INFO:self._variable_keys: {'X', 'y_test', 'X_train', 'memory', 'gpu_n_jobs_param', 'html_param', 'is_multiclass', 'fix_imbalance', '_available_plots', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'gpu_param', 'log_plots_param', 'exp_id', 'y', 'data', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'y_train', 'target_param', 'seed', 'X_test', 'n_jobs_param', 'pipeline', 'logging_param'}
2024-05-21 14:17:16,266:INFO:Checking environment
2024-05-21 14:17:16,266:INFO:python_version: 3.10.0
2024-05-21 14:17:16,266:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:17:16,266:INFO:machine: AMD64
2024-05-21 14:17:16,266:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:17:16,272:INFO:Memory: svmem(total=16993001472, available=6065102848, percent=64.3, used=10927898624, free=6065102848)
2024-05-21 14:17:16,273:INFO:Physical Core: 6
2024-05-21 14:17:16,273:INFO:Logical Core: 12
2024-05-21 14:17:16,273:INFO:Checking libraries
2024-05-21 14:17:16,273:INFO:System:
2024-05-21 14:17:16,273:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:17:16,273:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:17:16,273:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:17:16,273:INFO:PyCaret required dependencies:
2024-05-21 14:17:16,400:INFO:                 pip: 24.0
2024-05-21 14:17:16,400:INFO:          setuptools: 57.4.0
2024-05-21 14:17:16,400:INFO:             pycaret: 3.3.2
2024-05-21 14:17:16,400:INFO:             IPython: 8.23.0
2024-05-21 14:17:16,400:INFO:          ipywidgets: 8.1.2
2024-05-21 14:17:16,400:INFO:                tqdm: 4.66.2
2024-05-21 14:17:16,400:INFO:               numpy: 1.26.3
2024-05-21 14:17:16,400:INFO:              pandas: 2.1.4
2024-05-21 14:17:16,400:INFO:              jinja2: 3.1.2
2024-05-21 14:17:16,402:INFO:               scipy: 1.11.4
2024-05-21 14:17:16,402:INFO:              joblib: 1.3.2
2024-05-21 14:17:16,402:INFO:             sklearn: 1.4.2
2024-05-21 14:17:16,402:INFO:                pyod: 1.1.3
2024-05-21 14:17:16,402:INFO:            imblearn: 0.12.2
2024-05-21 14:17:16,402:INFO:   category_encoders: 2.6.3
2024-05-21 14:17:16,402:INFO:            lightgbm: 4.3.0
2024-05-21 14:17:16,402:INFO:               numba: 0.59.1
2024-05-21 14:17:16,402:INFO:            requests: 2.31.0
2024-05-21 14:17:16,402:INFO:          matplotlib: 3.7.5
2024-05-21 14:17:16,402:INFO:          scikitplot: 0.3.7
2024-05-21 14:17:16,402:INFO:         yellowbrick: 1.5
2024-05-21 14:17:16,402:INFO:              plotly: 5.22.0
2024-05-21 14:17:16,402:INFO:    plotly-resampler: Not installed
2024-05-21 14:17:16,402:INFO:             kaleido: 0.2.1
2024-05-21 14:17:16,402:INFO:           schemdraw: 0.15
2024-05-21 14:17:16,403:INFO:         statsmodels: 0.14.2
2024-05-21 14:17:16,403:INFO:              sktime: 0.26.0
2024-05-21 14:17:16,403:INFO:               tbats: 1.1.3
2024-05-21 14:17:16,403:INFO:            pmdarima: 2.0.4
2024-05-21 14:17:16,403:INFO:              psutil: 5.9.8
2024-05-21 14:17:16,403:INFO:          markupsafe: 2.1.3
2024-05-21 14:17:16,403:INFO:             pickle5: Not installed
2024-05-21 14:17:16,403:INFO:         cloudpickle: 3.0.0
2024-05-21 14:17:16,403:INFO:         deprecation: 2.1.0
2024-05-21 14:17:16,403:INFO:              xxhash: 3.4.1
2024-05-21 14:17:16,403:INFO:           wurlitzer: Not installed
2024-05-21 14:17:16,403:INFO:PyCaret optional dependencies:
2024-05-21 14:17:20,245:INFO:                shap: Not installed
2024-05-21 14:17:20,245:INFO:           interpret: Not installed
2024-05-21 14:17:20,245:INFO:                umap: Not installed
2024-05-21 14:17:20,245:INFO:     ydata_profiling: Not installed
2024-05-21 14:17:20,245:INFO:  explainerdashboard: Not installed
2024-05-21 14:17:20,245:INFO:             autoviz: Not installed
2024-05-21 14:17:20,245:INFO:           fairlearn: Not installed
2024-05-21 14:17:20,245:INFO:          deepchecks: Not installed
2024-05-21 14:17:20,245:INFO:             xgboost: 2.0.3
2024-05-21 14:17:20,246:INFO:            catboost: Not installed
2024-05-21 14:17:20,246:INFO:              kmodes: Not installed
2024-05-21 14:17:20,246:INFO:             mlxtend: Not installed
2024-05-21 14:17:20,246:INFO:       statsforecast: Not installed
2024-05-21 14:17:20,246:INFO:        tune_sklearn: Not installed
2024-05-21 14:17:20,246:INFO:                 ray: Not installed
2024-05-21 14:17:20,246:INFO:            hyperopt: Not installed
2024-05-21 14:17:20,246:INFO:              optuna: 3.6.1
2024-05-21 14:17:20,246:INFO:               skopt: Not installed
2024-05-21 14:17:20,246:INFO:              mlflow: 2.13.0
2024-05-21 14:17:20,246:INFO:              gradio: 4.31.4
2024-05-21 14:17:20,246:INFO:             fastapi: 0.111.0
2024-05-21 14:17:20,246:INFO:             uvicorn: 0.29.0
2024-05-21 14:17:20,246:INFO:              m2cgen: 0.10.0
2024-05-21 14:17:20,246:INFO:           evidently: 0.4.23
2024-05-21 14:17:20,246:INFO:               fugue: Not installed
2024-05-21 14:17:20,246:INFO:           streamlit: Not installed
2024-05-21 14:17:20,246:INFO:             prophet: Not installed
2024-05-21 14:17:20,247:INFO:None
2024-05-21 14:17:20,247:INFO:Set up data.
2024-05-21 14:17:20,408:INFO:Set up folding strategy.
2024-05-21 14:17:20,408:INFO:Set up train/test split.
2024-05-21 14:17:20,652:INFO:Set up index.
2024-05-21 14:17:20,657:INFO:Assigning column types.
2024-05-21 14:17:20,937:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 14:17:21,007:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,032:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,083:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,149:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,151:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,206:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,209:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,210:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 14:17:21,343:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,400:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,404:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,467:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:21,507:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,511:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,511:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 14:17:21,632:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,747:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:21,751:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:21,774:INFO:Preparing preprocessing pipeline...
2024-05-21 14:17:21,809:INFO:Set up label encoding.
2024-05-21 14:17:21,809:INFO:Set up simple imputation.
2024-05-21 14:17:22,262:INFO:Finished creating preprocessing pipeline.
2024-05-21 14:17:22,292:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 14:17:22,292:INFO:Creating final display dataframe.
2024-05-21 14:17:23,436:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              c33e
2024-05-21 14:17:23,549:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:23,553:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:23,657:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:23,660:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:23,663:INFO:setup() successfully completed in 7.42s...............
2024-05-21 14:17:23,757:INFO:PyCaret ClassificationExperiment
2024-05-21 14:17:23,757:INFO:Logging name: clf-default-name
2024-05-21 14:17:23,757:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:17:23,757:INFO:version 3.3.2
2024-05-21 14:17:23,757:INFO:Initializing setup()
2024-05-21 14:17:23,757:INFO:self.USI: 1d42
2024-05-21 14:17:23,757:INFO:self._variable_keys: {'X', 'y_test', 'X_train', 'memory', 'gpu_n_jobs_param', 'html_param', 'is_multiclass', 'fix_imbalance', '_available_plots', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'gpu_param', 'log_plots_param', 'exp_id', 'y', 'data', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'y_train', 'target_param', 'seed', 'X_test', 'n_jobs_param', 'pipeline', 'logging_param'}
2024-05-21 14:17:23,758:INFO:Checking environment
2024-05-21 14:17:23,758:INFO:python_version: 3.10.0
2024-05-21 14:17:23,758:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:17:23,758:INFO:machine: AMD64
2024-05-21 14:17:23,758:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:17:23,768:INFO:Memory: svmem(total=16993001472, available=5967941632, percent=64.9, used=11025059840, free=5967941632)
2024-05-21 14:17:23,768:INFO:Physical Core: 6
2024-05-21 14:17:23,768:INFO:Logical Core: 12
2024-05-21 14:17:23,768:INFO:Checking libraries
2024-05-21 14:17:23,768:INFO:System:
2024-05-21 14:17:23,768:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:17:23,768:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:17:23,769:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:17:23,769:INFO:PyCaret required dependencies:
2024-05-21 14:17:23,769:INFO:                 pip: 24.0
2024-05-21 14:17:23,769:INFO:          setuptools: 57.4.0
2024-05-21 14:17:23,769:INFO:             pycaret: 3.3.2
2024-05-21 14:17:23,769:INFO:             IPython: 8.23.0
2024-05-21 14:17:23,769:INFO:          ipywidgets: 8.1.2
2024-05-21 14:17:23,769:INFO:                tqdm: 4.66.2
2024-05-21 14:17:23,769:INFO:               numpy: 1.26.3
2024-05-21 14:17:23,770:INFO:              pandas: 2.1.4
2024-05-21 14:17:23,770:INFO:              jinja2: 3.1.2
2024-05-21 14:17:23,770:INFO:               scipy: 1.11.4
2024-05-21 14:17:23,770:INFO:              joblib: 1.3.2
2024-05-21 14:17:23,770:INFO:             sklearn: 1.4.2
2024-05-21 14:17:23,770:INFO:                pyod: 1.1.3
2024-05-21 14:17:23,770:INFO:            imblearn: 0.12.2
2024-05-21 14:17:23,770:INFO:   category_encoders: 2.6.3
2024-05-21 14:17:23,770:INFO:            lightgbm: 4.3.0
2024-05-21 14:17:23,770:INFO:               numba: 0.59.1
2024-05-21 14:17:23,770:INFO:            requests: 2.31.0
2024-05-21 14:17:23,770:INFO:          matplotlib: 3.7.5
2024-05-21 14:17:23,770:INFO:          scikitplot: 0.3.7
2024-05-21 14:17:23,770:INFO:         yellowbrick: 1.5
2024-05-21 14:17:23,770:INFO:              plotly: 5.22.0
2024-05-21 14:17:23,770:INFO:    plotly-resampler: Not installed
2024-05-21 14:17:23,770:INFO:             kaleido: 0.2.1
2024-05-21 14:17:23,770:INFO:           schemdraw: 0.15
2024-05-21 14:17:23,772:INFO:         statsmodels: 0.14.2
2024-05-21 14:17:23,772:INFO:              sktime: 0.26.0
2024-05-21 14:17:23,772:INFO:               tbats: 1.1.3
2024-05-21 14:17:23,772:INFO:            pmdarima: 2.0.4
2024-05-21 14:17:23,772:INFO:              psutil: 5.9.8
2024-05-21 14:17:23,772:INFO:          markupsafe: 2.1.3
2024-05-21 14:17:23,772:INFO:             pickle5: Not installed
2024-05-21 14:17:23,772:INFO:         cloudpickle: 3.0.0
2024-05-21 14:17:23,772:INFO:         deprecation: 2.1.0
2024-05-21 14:17:23,772:INFO:              xxhash: 3.4.1
2024-05-21 14:17:23,772:INFO:           wurlitzer: Not installed
2024-05-21 14:17:23,773:INFO:PyCaret optional dependencies:
2024-05-21 14:17:23,773:INFO:                shap: Not installed
2024-05-21 14:17:23,773:INFO:           interpret: Not installed
2024-05-21 14:17:23,773:INFO:                umap: Not installed
2024-05-21 14:17:23,773:INFO:     ydata_profiling: Not installed
2024-05-21 14:17:23,773:INFO:  explainerdashboard: Not installed
2024-05-21 14:17:23,773:INFO:             autoviz: Not installed
2024-05-21 14:17:23,773:INFO:           fairlearn: Not installed
2024-05-21 14:17:23,773:INFO:          deepchecks: Not installed
2024-05-21 14:17:23,773:INFO:             xgboost: 2.0.3
2024-05-21 14:17:23,774:INFO:            catboost: Not installed
2024-05-21 14:17:23,774:INFO:              kmodes: Not installed
2024-05-21 14:17:23,774:INFO:             mlxtend: Not installed
2024-05-21 14:17:23,774:INFO:       statsforecast: Not installed
2024-05-21 14:17:23,774:INFO:        tune_sklearn: Not installed
2024-05-21 14:17:23,774:INFO:                 ray: Not installed
2024-05-21 14:17:23,774:INFO:            hyperopt: Not installed
2024-05-21 14:17:23,774:INFO:              optuna: 3.6.1
2024-05-21 14:17:23,774:INFO:               skopt: Not installed
2024-05-21 14:17:23,775:INFO:              mlflow: 2.13.0
2024-05-21 14:17:23,775:INFO:              gradio: 4.31.4
2024-05-21 14:17:23,775:INFO:             fastapi: 0.111.0
2024-05-21 14:17:23,775:INFO:             uvicorn: 0.29.0
2024-05-21 14:17:23,775:INFO:              m2cgen: 0.10.0
2024-05-21 14:17:23,776:INFO:           evidently: 0.4.23
2024-05-21 14:17:23,776:INFO:               fugue: Not installed
2024-05-21 14:17:23,776:INFO:           streamlit: Not installed
2024-05-21 14:17:23,776:INFO:             prophet: Not installed
2024-05-21 14:17:23,776:INFO:None
2024-05-21 14:17:23,777:INFO:Set up data.
2024-05-21 14:17:23,940:INFO:Set up folding strategy.
2024-05-21 14:17:23,940:INFO:Set up train/test split.
2024-05-21 14:17:24,165:INFO:Set up index.
2024-05-21 14:17:24,170:INFO:Assigning column types.
2024-05-21 14:17:24,435:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 14:17:24,497:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,498:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,536:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:24,540:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:24,601:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,603:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,644:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:24,647:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:24,648:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 14:17:24,711:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,754:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:24,758:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:24,823:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:17:24,872:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:24,875:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:24,876:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 14:17:25,016:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:25,019:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:25,164:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:25,168:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:25,172:INFO:Preparing preprocessing pipeline...
2024-05-21 14:17:25,210:INFO:Set up label encoding.
2024-05-21 14:17:25,212:INFO:Set up simple imputation.
2024-05-21 14:17:25,733:INFO:Finished creating preprocessing pipeline.
2024-05-21 14:17:25,740:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 14:17:25,740:INFO:Creating final display dataframe.
2024-05-21 14:17:26,745:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              1d42
2024-05-21 14:17:26,862:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:26,866:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:26,971:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:17:26,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:17:26,977:INFO:setup() successfully completed in 3.23s...............
2024-05-21 14:17:27,044:INFO:Initializing compare_models()
2024-05-21 14:17:27,044:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 14:17:27,044:INFO:Checking exceptions
2024-05-21 14:17:27,203:INFO:Preparing display monitor
2024-05-21 14:17:27,236:INFO:Initializing Logistic Regression
2024-05-21 14:17:27,237:INFO:Total runtime is 1.6645590464274088e-05 minutes
2024-05-21 14:17:27,242:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:27,243:INFO:Initializing create_model()
2024-05-21 14:17:27,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:27,244:INFO:Checking exceptions
2024-05-21 14:17:27,244:INFO:Importing libraries
2024-05-21 14:17:27,244:INFO:Copying training dataset
2024-05-21 14:17:27,678:INFO:Defining folds
2024-05-21 14:17:27,678:INFO:Declaring metric variables
2024-05-21 14:17:27,685:INFO:Importing untrained model
2024-05-21 14:17:27,690:INFO:Logistic Regression Imported successfully
2024-05-21 14:17:27,700:INFO:Starting cross validation
2024-05-21 14:17:27,703:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:34,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:34,872:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:34,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:34,886:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:34,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:34,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:34,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:34,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,117:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,295:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,470:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,479:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,577:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,633:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,663:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,668:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:35,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:35,734:INFO:Calculating mean and std
2024-05-21 14:17:35,736:INFO:Creating metrics dataframe
2024-05-21 14:17:35,739:INFO:Uploading results into container
2024-05-21 14:17:35,740:INFO:Uploading model into container now
2024-05-21 14:17:35,740:INFO:_master_model_container: 1
2024-05-21 14:17:35,740:INFO:_display_container: 2
2024-05-21 14:17:35,741:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 14:17:35,742:INFO:create_model() successfully completed......................................
2024-05-21 14:17:35,874:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:35,875:INFO:Creating metrics dataframe
2024-05-21 14:17:35,885:INFO:Initializing K Neighbors Classifier
2024-05-21 14:17:35,885:INFO:Total runtime is 0.14415083726247152 minutes
2024-05-21 14:17:35,890:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:35,890:INFO:Initializing create_model()
2024-05-21 14:17:35,891:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:35,891:INFO:Checking exceptions
2024-05-21 14:17:35,891:INFO:Importing libraries
2024-05-21 14:17:35,891:INFO:Copying training dataset
2024-05-21 14:17:36,135:INFO:Defining folds
2024-05-21 14:17:36,135:INFO:Declaring metric variables
2024-05-21 14:17:36,140:INFO:Importing untrained model
2024-05-21 14:17:36,146:INFO:K Neighbors Classifier Imported successfully
2024-05-21 14:17:36,155:INFO:Starting cross validation
2024-05-21 14:17:36,158:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:38,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,177:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,334:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,426:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,528:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,541:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,655:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,728:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,808:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,823:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:38,834:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,358:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,361:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,370:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:41,398:INFO:Calculating mean and std
2024-05-21 14:17:41,400:INFO:Creating metrics dataframe
2024-05-21 14:17:41,424:INFO:Uploading results into container
2024-05-21 14:17:41,424:INFO:Uploading model into container now
2024-05-21 14:17:41,425:INFO:_master_model_container: 2
2024-05-21 14:17:41,425:INFO:_display_container: 2
2024-05-21 14:17:41,425:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 14:17:41,425:INFO:create_model() successfully completed......................................
2024-05-21 14:17:41,541:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:41,541:INFO:Creating metrics dataframe
2024-05-21 14:17:41,549:INFO:Initializing Naive Bayes
2024-05-21 14:17:41,550:INFO:Total runtime is 0.23856327931086224 minutes
2024-05-21 14:17:41,554:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:41,555:INFO:Initializing create_model()
2024-05-21 14:17:41,555:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:41,555:INFO:Checking exceptions
2024-05-21 14:17:41,555:INFO:Importing libraries
2024-05-21 14:17:41,555:INFO:Copying training dataset
2024-05-21 14:17:41,798:INFO:Defining folds
2024-05-21 14:17:41,798:INFO:Declaring metric variables
2024-05-21 14:17:41,803:INFO:Importing untrained model
2024-05-21 14:17:41,808:INFO:Naive Bayes Imported successfully
2024-05-21 14:17:41,817:INFO:Starting cross validation
2024-05-21 14:17:41,819:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:42,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,355:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,371:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,489:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,502:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,568:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,598:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,691:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,820:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,977:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:42,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,062:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,150:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:43,173:INFO:Calculating mean and std
2024-05-21 14:17:43,175:INFO:Creating metrics dataframe
2024-05-21 14:17:43,177:INFO:Uploading results into container
2024-05-21 14:17:43,178:INFO:Uploading model into container now
2024-05-21 14:17:43,178:INFO:_master_model_container: 3
2024-05-21 14:17:43,179:INFO:_display_container: 2
2024-05-21 14:17:43,179:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 14:17:43,180:INFO:create_model() successfully completed......................................
2024-05-21 14:17:43,294:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:43,294:INFO:Creating metrics dataframe
2024-05-21 14:17:43,304:INFO:Initializing Decision Tree Classifier
2024-05-21 14:17:43,304:INFO:Total runtime is 0.2677967429161072 minutes
2024-05-21 14:17:43,309:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:43,309:INFO:Initializing create_model()
2024-05-21 14:17:43,309:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:43,310:INFO:Checking exceptions
2024-05-21 14:17:43,310:INFO:Importing libraries
2024-05-21 14:17:43,310:INFO:Copying training dataset
2024-05-21 14:17:43,552:INFO:Defining folds
2024-05-21 14:17:43,552:INFO:Declaring metric variables
2024-05-21 14:17:43,556:INFO:Importing untrained model
2024-05-21 14:17:43,560:INFO:Decision Tree Classifier Imported successfully
2024-05-21 14:17:43,571:INFO:Starting cross validation
2024-05-21 14:17:43,573:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:44,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,513:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,528:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,731:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,826:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,840:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,845:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,884:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:44,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:44,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,014:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,025:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,031:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:45,035:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,121:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,130:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:45,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:45,218:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:45,238:INFO:Calculating mean and std
2024-05-21 14:17:45,239:INFO:Creating metrics dataframe
2024-05-21 14:17:45,242:INFO:Uploading results into container
2024-05-21 14:17:45,243:INFO:Uploading model into container now
2024-05-21 14:17:45,244:INFO:_master_model_container: 4
2024-05-21 14:17:45,244:INFO:_display_container: 2
2024-05-21 14:17:45,245:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 14:17:45,245:INFO:create_model() successfully completed......................................
2024-05-21 14:17:45,360:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:45,360:INFO:Creating metrics dataframe
2024-05-21 14:17:45,370:INFO:Initializing SVM - Linear Kernel
2024-05-21 14:17:45,370:INFO:Total runtime is 0.3022303620974223 minutes
2024-05-21 14:17:45,375:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:45,375:INFO:Initializing create_model()
2024-05-21 14:17:45,375:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:45,375:INFO:Checking exceptions
2024-05-21 14:17:45,375:INFO:Importing libraries
2024-05-21 14:17:45,375:INFO:Copying training dataset
2024-05-21 14:17:45,628:INFO:Defining folds
2024-05-21 14:17:45,628:INFO:Declaring metric variables
2024-05-21 14:17:45,634:INFO:Importing untrained model
2024-05-21 14:17:45,639:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 14:17:45,649:INFO:Starting cross validation
2024-05-21 14:17:45,652:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:46,501:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,518:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:46,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,632:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,657:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,667:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:46,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,743:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,752:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:46,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,815:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:46,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,938:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:46,945:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:46,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,091:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:47,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:47,097:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,156:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,170:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:47,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,287:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:47,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:47,324:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:47,348:INFO:Calculating mean and std
2024-05-21 14:17:47,349:INFO:Creating metrics dataframe
2024-05-21 14:17:47,352:INFO:Uploading results into container
2024-05-21 14:17:47,353:INFO:Uploading model into container now
2024-05-21 14:17:47,353:INFO:_master_model_container: 5
2024-05-21 14:17:47,353:INFO:_display_container: 2
2024-05-21 14:17:47,354:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 14:17:47,354:INFO:create_model() successfully completed......................................
2024-05-21 14:17:47,466:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:47,467:INFO:Creating metrics dataframe
2024-05-21 14:17:47,478:INFO:Initializing Ridge Classifier
2024-05-21 14:17:47,478:INFO:Total runtime is 0.33736108144124355 minutes
2024-05-21 14:17:47,482:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:47,483:INFO:Initializing create_model()
2024-05-21 14:17:47,483:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:47,483:INFO:Checking exceptions
2024-05-21 14:17:47,483:INFO:Importing libraries
2024-05-21 14:17:47,483:INFO:Copying training dataset
2024-05-21 14:17:47,715:INFO:Defining folds
2024-05-21 14:17:47,715:INFO:Declaring metric variables
2024-05-21 14:17:47,720:INFO:Importing untrained model
2024-05-21 14:17:47,726:INFO:Ridge Classifier Imported successfully
2024-05-21 14:17:47,734:INFO:Starting cross validation
2024-05-21 14:17:47,737:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:17:48,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,296:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,311:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,352:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,361:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,369:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,372:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,445:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,542:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,547:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,645:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,743:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,758:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,764:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,769:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,786:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,800:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,903:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,907:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,960:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,970:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:48,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:17:48,978:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:17:49,001:INFO:Calculating mean and std
2024-05-21 14:17:49,003:INFO:Creating metrics dataframe
2024-05-21 14:17:49,006:INFO:Uploading results into container
2024-05-21 14:17:49,006:INFO:Uploading model into container now
2024-05-21 14:17:49,007:INFO:_master_model_container: 6
2024-05-21 14:17:49,007:INFO:_display_container: 2
2024-05-21 14:17:49,008:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 14:17:49,008:INFO:create_model() successfully completed......................................
2024-05-21 14:17:49,120:INFO:SubProcess create_model() end ==================================
2024-05-21 14:17:49,120:INFO:Creating metrics dataframe
2024-05-21 14:17:49,132:INFO:Initializing Random Forest Classifier
2024-05-21 14:17:49,132:INFO:Total runtime is 0.3649194240570069 minutes
2024-05-21 14:17:49,136:INFO:SubProcess create_model() called ==================================
2024-05-21 14:17:49,136:INFO:Initializing create_model()
2024-05-21 14:17:49,136:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:17:49,137:INFO:Checking exceptions
2024-05-21 14:17:49,137:INFO:Importing libraries
2024-05-21 14:17:49,137:INFO:Copying training dataset
2024-05-21 14:17:49,375:INFO:Defining folds
2024-05-21 14:17:49,375:INFO:Declaring metric variables
2024-05-21 14:17:49,381:INFO:Importing untrained model
2024-05-21 14:17:49,387:INFO:Random Forest Classifier Imported successfully
2024-05-21 14:17:49,397:INFO:Starting cross validation
2024-05-21 14:17:49,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:18:13,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:13,738:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:13,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:13,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,136:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,140:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,151:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,178:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,187:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,190:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,194:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,217:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,223:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,248:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,250:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,288:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,293:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:14,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:14,317:INFO:Calculating mean and std
2024-05-21 14:18:14,318:INFO:Creating metrics dataframe
2024-05-21 14:18:14,321:INFO:Uploading results into container
2024-05-21 14:18:14,322:INFO:Uploading model into container now
2024-05-21 14:18:14,323:INFO:_master_model_container: 7
2024-05-21 14:18:14,323:INFO:_display_container: 2
2024-05-21 14:18:14,323:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 14:18:14,324:INFO:create_model() successfully completed......................................
2024-05-21 14:18:14,435:INFO:SubProcess create_model() end ==================================
2024-05-21 14:18:14,435:INFO:Creating metrics dataframe
2024-05-21 14:18:14,447:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 14:18:14,447:INFO:Total runtime is 0.7868403593699138 minutes
2024-05-21 14:18:14,451:INFO:SubProcess create_model() called ==================================
2024-05-21 14:18:14,452:INFO:Initializing create_model()
2024-05-21 14:18:14,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:18:14,452:INFO:Checking exceptions
2024-05-21 14:18:14,452:INFO:Importing libraries
2024-05-21 14:18:14,452:INFO:Copying training dataset
2024-05-21 14:18:14,686:INFO:Defining folds
2024-05-21 14:18:14,686:INFO:Declaring metric variables
2024-05-21 14:18:14,690:INFO:Importing untrained model
2024-05-21 14:18:14,696:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 14:18:14,704:INFO:Starting cross validation
2024-05-21 14:18:14,707:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:18:15,583:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:15,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:15,999:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,087:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,169:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,270:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:16,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:16,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,415:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,440:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,455:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:16,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:16,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,500:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,579:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,625:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,656:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,675:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,681:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,692:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:16,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,728:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:16,732:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,736:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,743:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:16,750:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,769:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:16,787:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,849:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,869:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,911:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:16,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,938:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,945:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:16,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:16,956:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:16,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:16,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:16,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,007:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,016:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:17,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,040:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:17,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:18:17,053:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,109:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:17,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,126:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,131:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:17,136:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,178:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,200:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:17,203:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,217:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,225:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:17,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,277:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,288:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,294:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:17,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,308:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,313:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:17,318:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,347:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:18:17,358:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:18:17,364:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:18:17,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,379:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,384:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:17,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:17,407:INFO:Calculating mean and std
2024-05-21 14:18:17,410:INFO:Creating metrics dataframe
2024-05-21 14:18:17,412:INFO:Uploading results into container
2024-05-21 14:18:17,413:INFO:Uploading model into container now
2024-05-21 14:18:17,414:INFO:_master_model_container: 8
2024-05-21 14:18:17,414:INFO:_display_container: 2
2024-05-21 14:18:17,415:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 14:18:17,415:INFO:create_model() successfully completed......................................
2024-05-21 14:18:17,535:INFO:SubProcess create_model() end ==================================
2024-05-21 14:18:17,536:INFO:Creating metrics dataframe
2024-05-21 14:18:17,547:INFO:Initializing Ada Boost Classifier
2024-05-21 14:18:17,547:INFO:Total runtime is 0.8385147333145142 minutes
2024-05-21 14:18:17,551:INFO:SubProcess create_model() called ==================================
2024-05-21 14:18:17,551:INFO:Initializing create_model()
2024-05-21 14:18:17,553:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:18:17,553:INFO:Checking exceptions
2024-05-21 14:18:17,553:INFO:Importing libraries
2024-05-21 14:18:17,553:INFO:Copying training dataset
2024-05-21 14:18:17,801:INFO:Defining folds
2024-05-21 14:18:17,802:INFO:Declaring metric variables
2024-05-21 14:18:17,807:INFO:Importing untrained model
2024-05-21 14:18:17,812:INFO:Ada Boost Classifier Imported successfully
2024-05-21 14:18:17,821:INFO:Starting cross validation
2024-05-21 14:18:17,823:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:18:18,134:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,199:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,287:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,364:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:18,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:18:41,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,203:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,218:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,412:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,554:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,563:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,570:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,621:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,629:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,646:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,654:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,654:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,679:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,684:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,718:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,730:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,736:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,745:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,764:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,769:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,786:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,800:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:18:41,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:18:41,833:INFO:Calculating mean and std
2024-05-21 14:18:41,835:INFO:Creating metrics dataframe
2024-05-21 14:18:41,838:INFO:Uploading results into container
2024-05-21 14:18:41,839:INFO:Uploading model into container now
2024-05-21 14:18:41,840:INFO:_master_model_container: 9
2024-05-21 14:18:41,840:INFO:_display_container: 2
2024-05-21 14:18:41,840:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 14:18:41,841:INFO:create_model() successfully completed......................................
2024-05-21 14:18:41,956:INFO:SubProcess create_model() end ==================================
2024-05-21 14:18:41,956:INFO:Creating metrics dataframe
2024-05-21 14:18:41,967:INFO:Initializing Gradient Boosting Classifier
2024-05-21 14:18:41,967:INFO:Total runtime is 1.2455083966255187 minutes
2024-05-21 14:18:41,971:INFO:SubProcess create_model() called ==================================
2024-05-21 14:18:41,971:INFO:Initializing create_model()
2024-05-21 14:18:41,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:18:41,972:INFO:Checking exceptions
2024-05-21 14:18:41,972:INFO:Importing libraries
2024-05-21 14:18:41,972:INFO:Copying training dataset
2024-05-21 14:18:42,212:INFO:Defining folds
2024-05-21 14:18:42,212:INFO:Declaring metric variables
2024-05-21 14:18:42,218:INFO:Importing untrained model
2024-05-21 14:18:42,224:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 14:18:42,233:INFO:Starting cross validation
2024-05-21 14:18:42,236:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:19:30,803:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:30,853:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,863:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:30,870:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,891:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:30,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:30,936:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,956:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,981:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:30,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:31,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:31,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,471:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,476:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:31,483:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,575:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,589:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:31,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:31,700:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:31,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:32,686:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:32,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:32,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:32,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:32,750:INFO:Calculating mean and std
2024-05-21 14:19:32,754:INFO:Creating metrics dataframe
2024-05-21 14:19:32,758:INFO:Uploading results into container
2024-05-21 14:19:32,761:INFO:Uploading model into container now
2024-05-21 14:19:32,765:INFO:_master_model_container: 10
2024-05-21 14:19:32,765:INFO:_display_container: 2
2024-05-21 14:19:32,766:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 14:19:32,766:INFO:create_model() successfully completed......................................
2024-05-21 14:19:32,924:INFO:SubProcess create_model() end ==================================
2024-05-21 14:19:32,924:INFO:Creating metrics dataframe
2024-05-21 14:19:32,937:INFO:Initializing Linear Discriminant Analysis
2024-05-21 14:19:32,937:INFO:Total runtime is 2.0950070937474568 minutes
2024-05-21 14:19:32,941:INFO:SubProcess create_model() called ==================================
2024-05-21 14:19:32,942:INFO:Initializing create_model()
2024-05-21 14:19:32,942:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:19:32,942:INFO:Checking exceptions
2024-05-21 14:19:32,942:INFO:Importing libraries
2024-05-21 14:19:32,943:INFO:Copying training dataset
2024-05-21 14:19:33,222:INFO:Defining folds
2024-05-21 14:19:33,222:INFO:Declaring metric variables
2024-05-21 14:19:33,229:INFO:Importing untrained model
2024-05-21 14:19:33,236:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 14:19:33,250:INFO:Starting cross validation
2024-05-21 14:19:33,252:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:19:34,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,683:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,710:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,724:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,742:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,762:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:34,987:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,004:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,030:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,286:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,302:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,312:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,422:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,523:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,547:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,564:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:35,590:INFO:Calculating mean and std
2024-05-21 14:19:35,591:INFO:Creating metrics dataframe
2024-05-21 14:19:35,595:INFO:Uploading results into container
2024-05-21 14:19:35,596:INFO:Uploading model into container now
2024-05-21 14:19:35,596:INFO:_master_model_container: 11
2024-05-21 14:19:35,597:INFO:_display_container: 2
2024-05-21 14:19:35,597:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 14:19:35,598:INFO:create_model() successfully completed......................................
2024-05-21 14:19:35,744:INFO:SubProcess create_model() end ==================================
2024-05-21 14:19:35,745:INFO:Creating metrics dataframe
2024-05-21 14:19:35,759:INFO:Initializing Extra Trees Classifier
2024-05-21 14:19:35,759:INFO:Total runtime is 2.1420406619707744 minutes
2024-05-21 14:19:35,766:INFO:SubProcess create_model() called ==================================
2024-05-21 14:19:35,766:INFO:Initializing create_model()
2024-05-21 14:19:35,766:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:19:35,767:INFO:Checking exceptions
2024-05-21 14:19:35,767:INFO:Importing libraries
2024-05-21 14:19:35,767:INFO:Copying training dataset
2024-05-21 14:19:36,073:INFO:Defining folds
2024-05-21 14:19:36,073:INFO:Declaring metric variables
2024-05-21 14:19:36,079:INFO:Importing untrained model
2024-05-21 14:19:36,084:INFO:Extra Trees Classifier Imported successfully
2024-05-21 14:19:36,094:INFO:Starting cross validation
2024-05-21 14:19:36,099:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:19:37,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:37,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,474:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:37,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,940:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:37,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:37,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,113:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,153:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,269:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,647:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,691:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,710:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:19:38,762:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:38,792:INFO:Calculating mean and std
2024-05-21 14:19:38,794:INFO:Creating metrics dataframe
2024-05-21 14:19:38,797:INFO:Uploading results into container
2024-05-21 14:19:38,798:INFO:Uploading model into container now
2024-05-21 14:19:38,798:INFO:_master_model_container: 12
2024-05-21 14:19:38,798:INFO:_display_container: 2
2024-05-21 14:19:38,799:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 14:19:38,799:INFO:create_model() successfully completed......................................
2024-05-21 14:19:38,914:INFO:SubProcess create_model() end ==================================
2024-05-21 14:19:38,914:INFO:Creating metrics dataframe
2024-05-21 14:19:38,934:INFO:Initializing Extreme Gradient Boosting
2024-05-21 14:19:38,934:INFO:Total runtime is 2.194955122470856 minutes
2024-05-21 14:19:38,940:INFO:SubProcess create_model() called ==================================
2024-05-21 14:19:38,940:INFO:Initializing create_model()
2024-05-21 14:19:38,940:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:19:38,940:INFO:Checking exceptions
2024-05-21 14:19:38,940:INFO:Importing libraries
2024-05-21 14:19:38,940:INFO:Copying training dataset
2024-05-21 14:19:39,199:INFO:Defining folds
2024-05-21 14:19:39,200:INFO:Declaring metric variables
2024-05-21 14:19:39,206:INFO:Importing untrained model
2024-05-21 14:19:39,214:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 14:19:39,225:INFO:Starting cross validation
2024-05-21 14:19:39,229:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:19:53,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,472:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:53,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,187:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,198:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,215:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,222:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,322:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,346:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,420:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,432:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,620:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,631:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,637:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,664:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:19:54,700:INFO:Calculating mean and std
2024-05-21 14:19:54,702:INFO:Creating metrics dataframe
2024-05-21 14:19:54,706:INFO:Uploading results into container
2024-05-21 14:19:54,707:INFO:Uploading model into container now
2024-05-21 14:19:54,707:INFO:_master_model_container: 13
2024-05-21 14:19:54,707:INFO:_display_container: 2
2024-05-21 14:19:54,709:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 14:19:54,709:INFO:create_model() successfully completed......................................
2024-05-21 14:19:54,849:INFO:SubProcess create_model() end ==================================
2024-05-21 14:19:54,849:INFO:Creating metrics dataframe
2024-05-21 14:19:54,864:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 14:19:54,864:INFO:Total runtime is 2.4604634920756023 minutes
2024-05-21 14:19:54,868:INFO:SubProcess create_model() called ==================================
2024-05-21 14:19:54,869:INFO:Initializing create_model()
2024-05-21 14:19:54,869:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:19:54,869:INFO:Checking exceptions
2024-05-21 14:19:54,869:INFO:Importing libraries
2024-05-21 14:19:54,869:INFO:Copying training dataset
2024-05-21 14:19:55,131:INFO:Defining folds
2024-05-21 14:19:55,131:INFO:Declaring metric variables
2024-05-21 14:19:55,137:INFO:Importing untrained model
2024-05-21 14:19:55,142:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:19:55,153:INFO:Starting cross validation
2024-05-21 14:19:55,155:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:20:14,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,472:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,493:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,665:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,683:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,760:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,777:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,797:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,861:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:14,991:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,071:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,208:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,225:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,376:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,393:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,416:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,432:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,448:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:15,489:INFO:Calculating mean and std
2024-05-21 14:20:15,492:INFO:Creating metrics dataframe
2024-05-21 14:20:15,498:INFO:Uploading results into container
2024-05-21 14:20:15,499:INFO:Uploading model into container now
2024-05-21 14:20:15,500:INFO:_master_model_container: 14
2024-05-21 14:20:15,500:INFO:_display_container: 2
2024-05-21 14:20:15,501:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:20:15,501:INFO:create_model() successfully completed......................................
2024-05-21 14:20:15,677:INFO:SubProcess create_model() end ==================================
2024-05-21 14:20:15,678:INFO:Creating metrics dataframe
2024-05-21 14:20:15,695:INFO:Initializing Dummy Classifier
2024-05-21 14:20:15,695:INFO:Total runtime is 2.8076420783996583 minutes
2024-05-21 14:20:15,701:INFO:SubProcess create_model() called ==================================
2024-05-21 14:20:15,702:INFO:Initializing create_model()
2024-05-21 14:20:15,702:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9C15B2E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:20:15,703:INFO:Checking exceptions
2024-05-21 14:20:15,703:INFO:Importing libraries
2024-05-21 14:20:15,703:INFO:Copying training dataset
2024-05-21 14:20:16,004:INFO:Defining folds
2024-05-21 14:20:16,004:INFO:Declaring metric variables
2024-05-21 14:20:16,011:INFO:Importing untrained model
2024-05-21 14:20:16,018:INFO:Dummy Classifier Imported successfully
2024-05-21 14:20:16,031:INFO:Starting cross validation
2024-05-21 14:20:16,034:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:20:16,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,447:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,504:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,603:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,617:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,733:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,755:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,908:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:16,914:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:16,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:17,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,096:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:17,101:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,167:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:17,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:20:17,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:17,266:INFO:Calculating mean and std
2024-05-21 14:20:17,269:INFO:Creating metrics dataframe
2024-05-21 14:20:17,274:INFO:Uploading results into container
2024-05-21 14:20:17,275:INFO:Uploading model into container now
2024-05-21 14:20:17,276:INFO:_master_model_container: 15
2024-05-21 14:20:17,277:INFO:_display_container: 2
2024-05-21 14:20:17,278:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 14:20:17,278:INFO:create_model() successfully completed......................................
2024-05-21 14:20:17,402:INFO:SubProcess create_model() end ==================================
2024-05-21 14:20:17,402:INFO:Creating metrics dataframe
2024-05-21 14:20:17,442:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-21 14:20:17,455:INFO:Initializing create_model()
2024-05-21 14:20:17,455:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:20:17,455:INFO:Checking exceptions
2024-05-21 14:20:17,458:INFO:Importing libraries
2024-05-21 14:20:17,458:INFO:Copying training dataset
2024-05-21 14:20:17,688:INFO:Defining folds
2024-05-21 14:20:17,689:INFO:Declaring metric variables
2024-05-21 14:20:17,689:INFO:Importing untrained model
2024-05-21 14:20:17,689:INFO:Declaring custom model
2024-05-21 14:20:17,690:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:20:17,692:INFO:Cross validation set to False
2024-05-21 14:20:17,692:INFO:Fitting Model
2024-05-21 14:20:18,024:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:20:18,054:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.028508 seconds.
2024-05-21 14:20:18,054:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:20:18,057:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:20:18,062:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:20:18,064:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:20:18,065:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:20:19,438:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:20:19,438:INFO:create_model() successfully completed......................................
2024-05-21 14:20:19,627:INFO:_master_model_container: 15
2024-05-21 14:20:19,627:INFO:_display_container: 2
2024-05-21 14:20:19,628:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:20:19,628:INFO:compare_models() successfully completed......................................
2024-05-21 14:20:19,991:INFO:Initializing predict_model()
2024-05-21 14:20:19,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022A9DF98670>)
2024-05-21 14:20:19,991:INFO:Checking exceptions
2024-05-21 14:20:19,992:INFO:Preloading libraries
2024-05-21 14:20:19,995:INFO:Set up data.
2024-05-21 14:20:20,125:INFO:Set up index.
2024-05-21 14:20:20,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:20,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:20:20,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:41,728:INFO:PyCaret ClassificationExperiment
2024-05-21 14:22:41,728:INFO:Logging name: clf-default-name
2024-05-21 14:22:41,728:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:22:41,728:INFO:version 3.3.2
2024-05-21 14:22:41,728:INFO:Initializing setup()
2024-05-21 14:22:41,728:INFO:self.USI: 4a22
2024-05-21 14:22:41,728:INFO:self._variable_keys: {'X', 'y_test', 'X_train', 'memory', 'gpu_n_jobs_param', 'html_param', 'is_multiclass', 'fix_imbalance', '_available_plots', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'gpu_param', 'log_plots_param', 'exp_id', 'y', 'data', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'y_train', 'target_param', 'seed', 'X_test', 'n_jobs_param', 'pipeline', 'logging_param'}
2024-05-21 14:22:41,729:INFO:Checking environment
2024-05-21 14:22:41,729:INFO:python_version: 3.10.0
2024-05-21 14:22:41,729:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:22:41,729:INFO:machine: AMD64
2024-05-21 14:22:41,729:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:22:41,738:INFO:Memory: svmem(total=16993001472, available=2966880256, percent=82.5, used=14026121216, free=2966880256)
2024-05-21 14:22:41,738:INFO:Physical Core: 6
2024-05-21 14:22:41,738:INFO:Logical Core: 12
2024-05-21 14:22:41,738:INFO:Checking libraries
2024-05-21 14:22:41,738:INFO:System:
2024-05-21 14:22:41,739:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:22:41,739:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:22:41,739:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:22:41,739:INFO:PyCaret required dependencies:
2024-05-21 14:22:41,739:INFO:                 pip: 24.0
2024-05-21 14:22:41,740:INFO:          setuptools: 57.4.0
2024-05-21 14:22:41,740:INFO:             pycaret: 3.3.2
2024-05-21 14:22:41,740:INFO:             IPython: 8.23.0
2024-05-21 14:22:41,740:INFO:          ipywidgets: 8.1.2
2024-05-21 14:22:41,740:INFO:                tqdm: 4.66.2
2024-05-21 14:22:41,740:INFO:               numpy: 1.26.3
2024-05-21 14:22:41,740:INFO:              pandas: 2.1.4
2024-05-21 14:22:41,740:INFO:              jinja2: 3.1.2
2024-05-21 14:22:41,740:INFO:               scipy: 1.11.4
2024-05-21 14:22:41,740:INFO:              joblib: 1.3.2
2024-05-21 14:22:41,740:INFO:             sklearn: 1.4.2
2024-05-21 14:22:41,741:INFO:                pyod: 1.1.3
2024-05-21 14:22:41,741:INFO:            imblearn: 0.12.2
2024-05-21 14:22:41,741:INFO:   category_encoders: 2.6.3
2024-05-21 14:22:41,741:INFO:            lightgbm: 4.3.0
2024-05-21 14:22:41,741:INFO:               numba: 0.59.1
2024-05-21 14:22:41,741:INFO:            requests: 2.31.0
2024-05-21 14:22:41,741:INFO:          matplotlib: 3.7.5
2024-05-21 14:22:41,741:INFO:          scikitplot: 0.3.7
2024-05-21 14:22:41,741:INFO:         yellowbrick: 1.5
2024-05-21 14:22:41,741:INFO:              plotly: 5.22.0
2024-05-21 14:22:41,741:INFO:    plotly-resampler: Not installed
2024-05-21 14:22:41,741:INFO:             kaleido: 0.2.1
2024-05-21 14:22:41,741:INFO:           schemdraw: 0.15
2024-05-21 14:22:41,742:INFO:         statsmodels: 0.14.2
2024-05-21 14:22:41,742:INFO:              sktime: 0.26.0
2024-05-21 14:22:41,742:INFO:               tbats: 1.1.3
2024-05-21 14:22:41,742:INFO:            pmdarima: 2.0.4
2024-05-21 14:22:41,742:INFO:              psutil: 5.9.8
2024-05-21 14:22:41,742:INFO:          markupsafe: 2.1.3
2024-05-21 14:22:41,742:INFO:             pickle5: Not installed
2024-05-21 14:22:41,742:INFO:         cloudpickle: 3.0.0
2024-05-21 14:22:41,742:INFO:         deprecation: 2.1.0
2024-05-21 14:22:41,742:INFO:              xxhash: 3.4.1
2024-05-21 14:22:41,743:INFO:           wurlitzer: Not installed
2024-05-21 14:22:41,743:INFO:PyCaret optional dependencies:
2024-05-21 14:22:41,743:INFO:                shap: Not installed
2024-05-21 14:22:41,743:INFO:           interpret: Not installed
2024-05-21 14:22:41,743:INFO:                umap: Not installed
2024-05-21 14:22:41,743:INFO:     ydata_profiling: Not installed
2024-05-21 14:22:41,743:INFO:  explainerdashboard: Not installed
2024-05-21 14:22:41,743:INFO:             autoviz: Not installed
2024-05-21 14:22:41,743:INFO:           fairlearn: Not installed
2024-05-21 14:22:41,744:INFO:          deepchecks: Not installed
2024-05-21 14:22:41,744:INFO:             xgboost: 2.0.3
2024-05-21 14:22:41,744:INFO:            catboost: Not installed
2024-05-21 14:22:41,744:INFO:              kmodes: Not installed
2024-05-21 14:22:41,744:INFO:             mlxtend: Not installed
2024-05-21 14:22:41,744:INFO:       statsforecast: Not installed
2024-05-21 14:22:41,744:INFO:        tune_sklearn: Not installed
2024-05-21 14:22:41,744:INFO:                 ray: Not installed
2024-05-21 14:22:41,744:INFO:            hyperopt: Not installed
2024-05-21 14:22:41,745:INFO:              optuna: 3.6.1
2024-05-21 14:22:41,745:INFO:               skopt: Not installed
2024-05-21 14:22:41,745:INFO:              mlflow: 2.13.0
2024-05-21 14:22:41,745:INFO:              gradio: 4.31.4
2024-05-21 14:22:41,745:INFO:             fastapi: 0.111.0
2024-05-21 14:22:41,745:INFO:             uvicorn: 0.29.0
2024-05-21 14:22:41,745:INFO:              m2cgen: 0.10.0
2024-05-21 14:22:41,745:INFO:           evidently: 0.4.23
2024-05-21 14:22:41,745:INFO:               fugue: Not installed
2024-05-21 14:22:41,745:INFO:           streamlit: Not installed
2024-05-21 14:22:41,745:INFO:             prophet: Not installed
2024-05-21 14:22:41,746:INFO:None
2024-05-21 14:22:41,746:INFO:Set up data.
2024-05-21 14:22:41,923:INFO:Set up folding strategy.
2024-05-21 14:22:41,923:INFO:Set up train/test split.
2024-05-21 14:22:53,355:INFO:PyCaret ClassificationExperiment
2024-05-21 14:22:53,356:INFO:Logging name: clf-default-name
2024-05-21 14:22:53,356:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:22:53,356:INFO:version 3.3.2
2024-05-21 14:22:53,356:INFO:Initializing setup()
2024-05-21 14:22:53,356:INFO:self.USI: 07ee
2024-05-21 14:22:53,356:INFO:self._variable_keys: {'X', 'y_test', 'X_train', 'memory', 'gpu_n_jobs_param', 'html_param', 'is_multiclass', 'fix_imbalance', '_available_plots', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'gpu_param', 'log_plots_param', 'exp_id', 'y', 'data', '_ml_usecase', 'fold_shuffle_param', 'exp_name_log', 'y_train', 'target_param', 'seed', 'X_test', 'n_jobs_param', 'pipeline', 'logging_param'}
2024-05-21 14:22:53,356:INFO:Checking environment
2024-05-21 14:22:53,356:INFO:python_version: 3.10.0
2024-05-21 14:22:53,356:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:22:53,356:INFO:machine: AMD64
2024-05-21 14:22:53,356:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:22:53,368:INFO:Memory: svmem(total=16993001472, available=2971389952, percent=82.5, used=14021611520, free=2971389952)
2024-05-21 14:22:53,368:INFO:Physical Core: 6
2024-05-21 14:22:53,368:INFO:Logical Core: 12
2024-05-21 14:22:53,368:INFO:Checking libraries
2024-05-21 14:22:53,368:INFO:System:
2024-05-21 14:22:53,369:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:22:53,369:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:22:53,369:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:22:53,369:INFO:PyCaret required dependencies:
2024-05-21 14:22:53,369:INFO:                 pip: 24.0
2024-05-21 14:22:53,369:INFO:          setuptools: 57.4.0
2024-05-21 14:22:53,369:INFO:             pycaret: 3.3.2
2024-05-21 14:22:53,369:INFO:             IPython: 8.23.0
2024-05-21 14:22:53,370:INFO:          ipywidgets: 8.1.2
2024-05-21 14:22:53,370:INFO:                tqdm: 4.66.2
2024-05-21 14:22:53,370:INFO:               numpy: 1.26.3
2024-05-21 14:22:53,370:INFO:              pandas: 2.1.4
2024-05-21 14:22:53,370:INFO:              jinja2: 3.1.2
2024-05-21 14:22:53,370:INFO:               scipy: 1.11.4
2024-05-21 14:22:53,370:INFO:              joblib: 1.3.2
2024-05-21 14:22:53,370:INFO:             sklearn: 1.4.2
2024-05-21 14:22:53,370:INFO:                pyod: 1.1.3
2024-05-21 14:22:53,370:INFO:            imblearn: 0.12.2
2024-05-21 14:22:53,370:INFO:   category_encoders: 2.6.3
2024-05-21 14:22:53,370:INFO:            lightgbm: 4.3.0
2024-05-21 14:22:53,370:INFO:               numba: 0.59.1
2024-05-21 14:22:53,370:INFO:            requests: 2.31.0
2024-05-21 14:22:53,370:INFO:          matplotlib: 3.7.5
2024-05-21 14:22:53,370:INFO:          scikitplot: 0.3.7
2024-05-21 14:22:53,370:INFO:         yellowbrick: 1.5
2024-05-21 14:22:53,370:INFO:              plotly: 5.22.0
2024-05-21 14:22:53,370:INFO:    plotly-resampler: Not installed
2024-05-21 14:22:53,371:INFO:             kaleido: 0.2.1
2024-05-21 14:22:53,371:INFO:           schemdraw: 0.15
2024-05-21 14:22:53,371:INFO:         statsmodels: 0.14.2
2024-05-21 14:22:53,371:INFO:              sktime: 0.26.0
2024-05-21 14:22:53,371:INFO:               tbats: 1.1.3
2024-05-21 14:22:53,371:INFO:            pmdarima: 2.0.4
2024-05-21 14:22:53,371:INFO:              psutil: 5.9.8
2024-05-21 14:22:53,371:INFO:          markupsafe: 2.1.3
2024-05-21 14:22:53,371:INFO:             pickle5: Not installed
2024-05-21 14:22:53,371:INFO:         cloudpickle: 3.0.0
2024-05-21 14:22:53,371:INFO:         deprecation: 2.1.0
2024-05-21 14:22:53,371:INFO:              xxhash: 3.4.1
2024-05-21 14:22:53,371:INFO:           wurlitzer: Not installed
2024-05-21 14:22:53,371:INFO:PyCaret optional dependencies:
2024-05-21 14:22:53,371:INFO:                shap: Not installed
2024-05-21 14:22:53,371:INFO:           interpret: Not installed
2024-05-21 14:22:53,371:INFO:                umap: Not installed
2024-05-21 14:22:53,372:INFO:     ydata_profiling: Not installed
2024-05-21 14:22:53,372:INFO:  explainerdashboard: Not installed
2024-05-21 14:22:53,372:INFO:             autoviz: Not installed
2024-05-21 14:22:53,372:INFO:           fairlearn: Not installed
2024-05-21 14:22:53,372:INFO:          deepchecks: Not installed
2024-05-21 14:22:53,372:INFO:             xgboost: 2.0.3
2024-05-21 14:22:53,372:INFO:            catboost: Not installed
2024-05-21 14:22:53,372:INFO:              kmodes: Not installed
2024-05-21 14:22:53,372:INFO:             mlxtend: Not installed
2024-05-21 14:22:53,372:INFO:       statsforecast: Not installed
2024-05-21 14:22:53,372:INFO:        tune_sklearn: Not installed
2024-05-21 14:22:53,372:INFO:                 ray: Not installed
2024-05-21 14:22:53,372:INFO:            hyperopt: Not installed
2024-05-21 14:22:53,372:INFO:              optuna: 3.6.1
2024-05-21 14:22:53,373:INFO:               skopt: Not installed
2024-05-21 14:22:53,373:INFO:              mlflow: 2.13.0
2024-05-21 14:22:53,373:INFO:              gradio: 4.31.4
2024-05-21 14:22:53,373:INFO:             fastapi: 0.111.0
2024-05-21 14:22:53,373:INFO:             uvicorn: 0.29.0
2024-05-21 14:22:53,373:INFO:              m2cgen: 0.10.0
2024-05-21 14:22:53,373:INFO:           evidently: 0.4.23
2024-05-21 14:22:53,373:INFO:               fugue: Not installed
2024-05-21 14:22:53,373:INFO:           streamlit: Not installed
2024-05-21 14:22:53,373:INFO:             prophet: Not installed
2024-05-21 14:22:53,373:INFO:None
2024-05-21 14:22:53,373:INFO:Set up data.
2024-05-21 14:22:53,554:INFO:Set up folding strategy.
2024-05-21 14:22:53,554:INFO:Set up train/test split.
2024-05-21 14:22:53,747:INFO:Set up index.
2024-05-21 14:22:53,751:INFO:Assigning column types.
2024-05-21 14:22:53,977:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 14:22:54,038:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,039:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,078:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,145:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,146:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,184:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,188:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,189:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 14:22:54,250:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,288:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,292:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,357:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:22:54,396:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,400:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,400:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 14:22:54,503:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,608:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:54,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:54,615:INFO:Preparing preprocessing pipeline...
2024-05-21 14:22:54,643:INFO:Set up label encoding.
2024-05-21 14:22:54,643:INFO:Set up simple imputation.
2024-05-21 14:22:55,133:INFO:Finished creating preprocessing pipeline.
2024-05-21 14:22:55,141:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 14:22:55,142:INFO:Creating final display dataframe.
2024-05-21 14:22:56,949:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape      (13959, 344)
7    Transformed test set shape        (142, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              07ee
2024-05-21 14:22:57,072:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:57,075:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:57,193:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:22:57,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:22:57,198:INFO:setup() successfully completed in 3.85s...............
2024-05-21 14:22:57,284:INFO:Initializing compare_models()
2024-05-21 14:22:57,284:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 14:22:57,284:INFO:Checking exceptions
2024-05-21 14:22:57,399:INFO:Preparing display monitor
2024-05-21 14:22:57,430:INFO:Initializing Logistic Regression
2024-05-21 14:22:57,430:INFO:Total runtime is 0.0 minutes
2024-05-21 14:22:57,435:INFO:SubProcess create_model() called ==================================
2024-05-21 14:22:57,435:INFO:Initializing create_model()
2024-05-21 14:22:57,435:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:22:57,436:INFO:Checking exceptions
2024-05-21 14:22:57,436:INFO:Importing libraries
2024-05-21 14:22:57,436:INFO:Copying training dataset
2024-05-21 14:22:57,734:INFO:Defining folds
2024-05-21 14:22:57,734:INFO:Declaring metric variables
2024-05-21 14:22:57,738:INFO:Importing untrained model
2024-05-21 14:22:57,743:INFO:Logistic Regression Imported successfully
2024-05-21 14:22:57,751:INFO:Starting cross validation
2024-05-21 14:22:57,753:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:22:58,170:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,190:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,203:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,210:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,253:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,262:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,359:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,397:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,448:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,569:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,576:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,688:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,714:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,800:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,852:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,873:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,878:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,932:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,944:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:22:58,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:22:58,979:INFO:Calculating mean and std
2024-05-21 14:22:58,981:INFO:Creating metrics dataframe
2024-05-21 14:22:58,984:INFO:Uploading results into container
2024-05-21 14:22:58,985:INFO:Uploading model into container now
2024-05-21 14:22:58,985:INFO:_master_model_container: 16
2024-05-21 14:22:58,985:INFO:_display_container: 4
2024-05-21 14:22:58,986:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 14:22:58,986:INFO:create_model() successfully completed......................................
2024-05-21 14:22:59,105:INFO:SubProcess create_model() end ==================================
2024-05-21 14:22:59,105:INFO:Creating metrics dataframe
2024-05-21 14:22:59,115:INFO:Initializing K Neighbors Classifier
2024-05-21 14:22:59,115:INFO:Total runtime is 0.02809565464655558 minutes
2024-05-21 14:22:59,119:INFO:SubProcess create_model() called ==================================
2024-05-21 14:22:59,119:INFO:Initializing create_model()
2024-05-21 14:22:59,119:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:22:59,119:INFO:Checking exceptions
2024-05-21 14:22:59,119:INFO:Importing libraries
2024-05-21 14:22:59,119:INFO:Copying training dataset
2024-05-21 14:22:59,353:INFO:Defining folds
2024-05-21 14:22:59,353:INFO:Declaring metric variables
2024-05-21 14:22:59,358:INFO:Importing untrained model
2024-05-21 14:22:59,362:INFO:K Neighbors Classifier Imported successfully
2024-05-21 14:22:59,371:INFO:Starting cross validation
2024-05-21 14:22:59,374:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:00,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:00,826:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:00,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:00,956:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:00,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:00,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,097:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,107:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,132:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,165:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,362:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,428:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,452:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,474:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,528:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:01,648:INFO:Calculating mean and std
2024-05-21 14:23:01,650:INFO:Creating metrics dataframe
2024-05-21 14:23:01,652:INFO:Uploading results into container
2024-05-21 14:23:01,653:INFO:Uploading model into container now
2024-05-21 14:23:01,654:INFO:_master_model_container: 17
2024-05-21 14:23:01,654:INFO:_display_container: 4
2024-05-21 14:23:01,654:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 14:23:01,655:INFO:create_model() successfully completed......................................
2024-05-21 14:23:01,780:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:01,780:INFO:Creating metrics dataframe
2024-05-21 14:23:01,789:INFO:Initializing Naive Bayes
2024-05-21 14:23:01,789:INFO:Total runtime is 0.07265644073486328 minutes
2024-05-21 14:23:01,794:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:01,795:INFO:Initializing create_model()
2024-05-21 14:23:01,795:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:01,795:INFO:Checking exceptions
2024-05-21 14:23:01,795:INFO:Importing libraries
2024-05-21 14:23:01,796:INFO:Copying training dataset
2024-05-21 14:23:02,022:INFO:Defining folds
2024-05-21 14:23:02,022:INFO:Declaring metric variables
2024-05-21 14:23:02,027:INFO:Importing untrained model
2024-05-21 14:23:02,031:INFO:Naive Bayes Imported successfully
2024-05-21 14:23:02,043:INFO:Starting cross validation
2024-05-21 14:23:02,046:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:02,449:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,476:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,519:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,551:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,730:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,795:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,820:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,922:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,933:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:02,945:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,017:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,065:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,085:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,220:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,229:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,238:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:03,256:INFO:Calculating mean and std
2024-05-21 14:23:03,258:INFO:Creating metrics dataframe
2024-05-21 14:23:03,261:INFO:Uploading results into container
2024-05-21 14:23:03,262:INFO:Uploading model into container now
2024-05-21 14:23:03,262:INFO:_master_model_container: 18
2024-05-21 14:23:03,263:INFO:_display_container: 4
2024-05-21 14:23:03,263:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 14:23:03,263:INFO:create_model() successfully completed......................................
2024-05-21 14:23:03,382:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:03,382:INFO:Creating metrics dataframe
2024-05-21 14:23:03,390:INFO:Initializing Decision Tree Classifier
2024-05-21 14:23:03,391:INFO:Total runtime is 0.09936429659525553 minutes
2024-05-21 14:23:03,395:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:03,395:INFO:Initializing create_model()
2024-05-21 14:23:03,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:03,396:INFO:Checking exceptions
2024-05-21 14:23:03,396:INFO:Importing libraries
2024-05-21 14:23:03,396:INFO:Copying training dataset
2024-05-21 14:23:03,635:INFO:Defining folds
2024-05-21 14:23:03,635:INFO:Declaring metric variables
2024-05-21 14:23:03,641:INFO:Importing untrained model
2024-05-21 14:23:03,646:INFO:Decision Tree Classifier Imported successfully
2024-05-21 14:23:03,653:INFO:Starting cross validation
2024-05-21 14:23:03,656:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:04,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,417:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,424:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,544:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,601:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,622:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,631:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,639:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,681:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,808:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,955:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:04,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:04,981:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,042:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:05,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,108:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:05,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,166:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,171:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:05,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:05,194:INFO:Calculating mean and std
2024-05-21 14:23:05,199:INFO:Creating metrics dataframe
2024-05-21 14:23:05,201:INFO:Uploading results into container
2024-05-21 14:23:05,202:INFO:Uploading model into container now
2024-05-21 14:23:05,202:INFO:_master_model_container: 19
2024-05-21 14:23:05,202:INFO:_display_container: 4
2024-05-21 14:23:05,203:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 14:23:05,203:INFO:create_model() successfully completed......................................
2024-05-21 14:23:05,327:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:05,328:INFO:Creating metrics dataframe
2024-05-21 14:23:05,339:INFO:Initializing SVM - Linear Kernel
2024-05-21 14:23:05,340:INFO:Total runtime is 0.1318351705869039 minutes
2024-05-21 14:23:05,344:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:05,345:INFO:Initializing create_model()
2024-05-21 14:23:05,345:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:05,345:INFO:Checking exceptions
2024-05-21 14:23:05,345:INFO:Importing libraries
2024-05-21 14:23:05,345:INFO:Copying training dataset
2024-05-21 14:23:05,573:INFO:Defining folds
2024-05-21 14:23:05,573:INFO:Declaring metric variables
2024-05-21 14:23:05,578:INFO:Importing untrained model
2024-05-21 14:23:05,583:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 14:23:05,592:INFO:Starting cross validation
2024-05-21 14:23:05,595:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:06,385:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,410:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,507:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,569:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,578:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,585:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,685:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,758:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,769:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,779:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,849:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,863:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,923:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,934:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,944:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:06,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:06,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:07,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,126:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,135:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:07,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:07,158:INFO:Calculating mean and std
2024-05-21 14:23:07,159:INFO:Creating metrics dataframe
2024-05-21 14:23:07,163:INFO:Uploading results into container
2024-05-21 14:23:07,163:INFO:Uploading model into container now
2024-05-21 14:23:07,164:INFO:_master_model_container: 20
2024-05-21 14:23:07,164:INFO:_display_container: 4
2024-05-21 14:23:07,165:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 14:23:07,165:INFO:create_model() successfully completed......................................
2024-05-21 14:23:07,284:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:07,284:INFO:Creating metrics dataframe
2024-05-21 14:23:07,295:INFO:Initializing Ridge Classifier
2024-05-21 14:23:07,295:INFO:Total runtime is 0.16441946029663085 minutes
2024-05-21 14:23:07,301:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:07,301:INFO:Initializing create_model()
2024-05-21 14:23:07,301:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:07,301:INFO:Checking exceptions
2024-05-21 14:23:07,301:INFO:Importing libraries
2024-05-21 14:23:07,301:INFO:Copying training dataset
2024-05-21 14:23:07,546:INFO:Defining folds
2024-05-21 14:23:07,547:INFO:Declaring metric variables
2024-05-21 14:23:07,552:INFO:Importing untrained model
2024-05-21 14:23:07,556:INFO:Ridge Classifier Imported successfully
2024-05-21 14:23:07,566:INFO:Starting cross validation
2024-05-21 14:23:07,568:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:08,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,025:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,039:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,120:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,148:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,222:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,242:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,323:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,502:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,518:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,569:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,586:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,590:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,659:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,679:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,779:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,834:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:08,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:08,856:INFO:Calculating mean and std
2024-05-21 14:23:08,859:INFO:Creating metrics dataframe
2024-05-21 14:23:08,864:INFO:Uploading results into container
2024-05-21 14:23:08,865:INFO:Uploading model into container now
2024-05-21 14:23:08,865:INFO:_master_model_container: 21
2024-05-21 14:23:08,866:INFO:_display_container: 4
2024-05-21 14:23:08,866:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 14:23:08,866:INFO:create_model() successfully completed......................................
2024-05-21 14:23:08,986:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:08,986:INFO:Creating metrics dataframe
2024-05-21 14:23:08,997:INFO:Initializing Random Forest Classifier
2024-05-21 14:23:08,997:INFO:Total runtime is 0.19278775056203207 minutes
2024-05-21 14:23:09,001:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:09,002:INFO:Initializing create_model()
2024-05-21 14:23:09,002:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:09,002:INFO:Checking exceptions
2024-05-21 14:23:09,002:INFO:Importing libraries
2024-05-21 14:23:09,002:INFO:Copying training dataset
2024-05-21 14:23:09,222:INFO:Defining folds
2024-05-21 14:23:09,222:INFO:Declaring metric variables
2024-05-21 14:23:09,227:INFO:Importing untrained model
2024-05-21 14:23:09,232:INFO:Random Forest Classifier Imported successfully
2024-05-21 14:23:09,242:INFO:Starting cross validation
2024-05-21 14:23:09,245:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:34,098:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,129:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,137:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,248:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,367:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,369:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,375:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,384:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,388:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,403:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,411:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,426:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,469:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,504:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:34,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:34,565:INFO:Calculating mean and std
2024-05-21 14:23:34,568:INFO:Creating metrics dataframe
2024-05-21 14:23:34,572:INFO:Uploading results into container
2024-05-21 14:23:34,573:INFO:Uploading model into container now
2024-05-21 14:23:34,574:INFO:_master_model_container: 22
2024-05-21 14:23:34,574:INFO:_display_container: 4
2024-05-21 14:23:34,575:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 14:23:34,575:INFO:create_model() successfully completed......................................
2024-05-21 14:23:34,732:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:34,732:INFO:Creating metrics dataframe
2024-05-21 14:23:34,744:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 14:23:34,745:INFO:Total runtime is 0.6219236214955648 minutes
2024-05-21 14:23:34,750:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:34,751:INFO:Initializing create_model()
2024-05-21 14:23:34,751:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:34,751:INFO:Checking exceptions
2024-05-21 14:23:34,751:INFO:Importing libraries
2024-05-21 14:23:34,751:INFO:Copying training dataset
2024-05-21 14:23:35,017:INFO:Defining folds
2024-05-21 14:23:35,018:INFO:Declaring metric variables
2024-05-21 14:23:35,024:INFO:Importing untrained model
2024-05-21 14:23:35,031:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 14:23:35,040:INFO:Starting cross validation
2024-05-21 14:23:35,044:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:36,001:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:36,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:36,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:36,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:36,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:36,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:36,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:36,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:36,753:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:36,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:36,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:36,783:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:36,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:36,802:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:36,914:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:37,043:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:37,084:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,135:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,150:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,169:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,180:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,190:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,220:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,228:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,238:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:37,241:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,273:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,301:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,305:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,311:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,341:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,350:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,369:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,381:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,407:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:37,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:23:37,482:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,489:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,519:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,579:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,601:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,636:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,637:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,646:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,656:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,667:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,691:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,722:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,852:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,854:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:23:37,868:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,872:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:23:37,890:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:23:37,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,903:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:23:37,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:23:37,938:INFO:Calculating mean and std
2024-05-21 14:23:37,941:INFO:Creating metrics dataframe
2024-05-21 14:23:37,944:INFO:Uploading results into container
2024-05-21 14:23:37,945:INFO:Uploading model into container now
2024-05-21 14:23:37,945:INFO:_master_model_container: 23
2024-05-21 14:23:37,946:INFO:_display_container: 4
2024-05-21 14:23:37,946:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 14:23:37,946:INFO:create_model() successfully completed......................................
2024-05-21 14:23:38,105:INFO:SubProcess create_model() end ==================================
2024-05-21 14:23:38,105:INFO:Creating metrics dataframe
2024-05-21 14:23:38,119:INFO:Initializing Ada Boost Classifier
2024-05-21 14:23:38,119:INFO:Total runtime is 0.6781619866689046 minutes
2024-05-21 14:23:38,124:INFO:SubProcess create_model() called ==================================
2024-05-21 14:23:38,124:INFO:Initializing create_model()
2024-05-21 14:23:38,124:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:23:38,125:INFO:Checking exceptions
2024-05-21 14:23:38,125:INFO:Importing libraries
2024-05-21 14:23:38,125:INFO:Copying training dataset
2024-05-21 14:23:38,375:INFO:Defining folds
2024-05-21 14:23:38,376:INFO:Declaring metric variables
2024-05-21 14:23:38,382:INFO:Importing untrained model
2024-05-21 14:23:38,389:INFO:Ada Boost Classifier Imported successfully
2024-05-21 14:23:38,399:INFO:Starting cross validation
2024-05-21 14:23:38,403:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:23:38,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:38,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:38,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:38,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,049:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,142:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,421:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:23:39,501:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:24:03,063:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,078:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,089:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,173:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,181:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,182:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,212:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,322:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,325:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,341:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,350:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,356:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,437:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,500:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,655:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,661:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:03,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:03,920:INFO:Calculating mean and std
2024-05-21 14:24:03,922:INFO:Creating metrics dataframe
2024-05-21 14:24:03,924:INFO:Uploading results into container
2024-05-21 14:24:03,925:INFO:Uploading model into container now
2024-05-21 14:24:03,925:INFO:_master_model_container: 24
2024-05-21 14:24:03,925:INFO:_display_container: 4
2024-05-21 14:24:03,926:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 14:24:03,926:INFO:create_model() successfully completed......................................
2024-05-21 14:24:04,048:INFO:SubProcess create_model() end ==================================
2024-05-21 14:24:04,048:INFO:Creating metrics dataframe
2024-05-21 14:24:04,062:INFO:Initializing Gradient Boosting Classifier
2024-05-21 14:24:04,062:INFO:Total runtime is 1.1105473081270854 minutes
2024-05-21 14:24:04,068:INFO:SubProcess create_model() called ==================================
2024-05-21 14:24:04,069:INFO:Initializing create_model()
2024-05-21 14:24:04,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:24:04,069:INFO:Checking exceptions
2024-05-21 14:24:04,069:INFO:Importing libraries
2024-05-21 14:24:04,069:INFO:Copying training dataset
2024-05-21 14:24:04,295:INFO:Defining folds
2024-05-21 14:24:04,296:INFO:Declaring metric variables
2024-05-21 14:24:04,300:INFO:Importing untrained model
2024-05-21 14:24:04,305:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 14:24:04,314:INFO:Starting cross validation
2024-05-21 14:24:04,316:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:24:49,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,087:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,096:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,102:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,228:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,237:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,245:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,281:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,290:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,306:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,429:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,438:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,634:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,646:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,653:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,694:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,703:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,703:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,738:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:49,751:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:49,779:INFO:Calculating mean and std
2024-05-21 14:24:49,781:INFO:Creating metrics dataframe
2024-05-21 14:24:49,783:INFO:Uploading results into container
2024-05-21 14:24:49,784:INFO:Uploading model into container now
2024-05-21 14:24:49,784:INFO:_master_model_container: 25
2024-05-21 14:24:49,785:INFO:_display_container: 4
2024-05-21 14:24:49,786:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 14:24:49,786:INFO:create_model() successfully completed......................................
2024-05-21 14:24:49,907:INFO:SubProcess create_model() end ==================================
2024-05-21 14:24:49,907:INFO:Creating metrics dataframe
2024-05-21 14:24:49,919:INFO:Initializing Linear Discriminant Analysis
2024-05-21 14:24:49,919:INFO:Total runtime is 1.874820593992869 minutes
2024-05-21 14:24:49,924:INFO:SubProcess create_model() called ==================================
2024-05-21 14:24:49,924:INFO:Initializing create_model()
2024-05-21 14:24:49,925:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:24:49,925:INFO:Checking exceptions
2024-05-21 14:24:49,925:INFO:Importing libraries
2024-05-21 14:24:49,925:INFO:Copying training dataset
2024-05-21 14:24:50,151:INFO:Defining folds
2024-05-21 14:24:50,151:INFO:Declaring metric variables
2024-05-21 14:24:50,156:INFO:Importing untrained model
2024-05-21 14:24:50,160:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 14:24:50,169:INFO:Starting cross validation
2024-05-21 14:24:50,172:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:24:51,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,105:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,365:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,383:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,542:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,556:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,659:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,730:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,850:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,859:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,949:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:51,986:INFO:Calculating mean and std
2024-05-21 14:24:51,988:INFO:Creating metrics dataframe
2024-05-21 14:24:51,991:INFO:Uploading results into container
2024-05-21 14:24:51,992:INFO:Uploading model into container now
2024-05-21 14:24:51,992:INFO:_master_model_container: 26
2024-05-21 14:24:51,992:INFO:_display_container: 4
2024-05-21 14:24:51,993:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 14:24:51,994:INFO:create_model() successfully completed......................................
2024-05-21 14:24:52,111:INFO:SubProcess create_model() end ==================================
2024-05-21 14:24:52,112:INFO:Creating metrics dataframe
2024-05-21 14:24:52,124:INFO:Initializing Extra Trees Classifier
2024-05-21 14:24:52,124:INFO:Total runtime is 1.911574371655782 minutes
2024-05-21 14:24:52,129:INFO:SubProcess create_model() called ==================================
2024-05-21 14:24:52,129:INFO:Initializing create_model()
2024-05-21 14:24:52,130:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:24:52,130:INFO:Checking exceptions
2024-05-21 14:24:52,130:INFO:Importing libraries
2024-05-21 14:24:52,130:INFO:Copying training dataset
2024-05-21 14:24:52,358:INFO:Defining folds
2024-05-21 14:24:52,359:INFO:Declaring metric variables
2024-05-21 14:24:52,363:INFO:Importing untrained model
2024-05-21 14:24:52,368:INFO:Extra Trees Classifier Imported successfully
2024-05-21 14:24:52,378:INFO:Starting cross validation
2024-05-21 14:24:52,380:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:24:53,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:53,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,443:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,497:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:53,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,804:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:53,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:53,952:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:53,959:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,218:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,276:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,360:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,479:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,485:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,545:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,560:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,571:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,617:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,622:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,698:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,711:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:24:54,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:24:54,736:INFO:Calculating mean and std
2024-05-21 14:24:54,738:INFO:Creating metrics dataframe
2024-05-21 14:24:54,740:INFO:Uploading results into container
2024-05-21 14:24:54,740:INFO:Uploading model into container now
2024-05-21 14:24:54,741:INFO:_master_model_container: 27
2024-05-21 14:24:54,741:INFO:_display_container: 4
2024-05-21 14:24:54,742:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 14:24:54,742:INFO:create_model() successfully completed......................................
2024-05-21 14:24:54,861:INFO:SubProcess create_model() end ==================================
2024-05-21 14:24:54,861:INFO:Creating metrics dataframe
2024-05-21 14:24:54,874:INFO:Initializing Extreme Gradient Boosting
2024-05-21 14:24:54,874:INFO:Total runtime is 1.9574134707450865 minutes
2024-05-21 14:24:54,879:INFO:SubProcess create_model() called ==================================
2024-05-21 14:24:54,879:INFO:Initializing create_model()
2024-05-21 14:24:54,879:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:24:54,879:INFO:Checking exceptions
2024-05-21 14:24:54,880:INFO:Importing libraries
2024-05-21 14:24:54,880:INFO:Copying training dataset
2024-05-21 14:24:55,107:INFO:Defining folds
2024-05-21 14:24:55,108:INFO:Declaring metric variables
2024-05-21 14:24:55,114:INFO:Importing untrained model
2024-05-21 14:24:55,120:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 14:24:55,133:INFO:Starting cross validation
2024-05-21 14:24:55,136:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:25:07,748:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,783:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,862:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,923:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,941:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:07,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,011:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,026:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,042:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,325:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,362:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,376:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,378:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,389:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,435:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,464:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,544:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,554:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:08,635:INFO:Calculating mean and std
2024-05-21 14:25:08,637:INFO:Creating metrics dataframe
2024-05-21 14:25:08,640:INFO:Uploading results into container
2024-05-21 14:25:08,640:INFO:Uploading model into container now
2024-05-21 14:25:08,641:INFO:_master_model_container: 28
2024-05-21 14:25:08,641:INFO:_display_container: 4
2024-05-21 14:25:08,642:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 14:25:08,642:INFO:create_model() successfully completed......................................
2024-05-21 14:25:08,774:INFO:SubProcess create_model() end ==================================
2024-05-21 14:25:08,774:INFO:Creating metrics dataframe
2024-05-21 14:25:08,787:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 14:25:08,788:INFO:Total runtime is 2.189315025011698 minutes
2024-05-21 14:25:08,793:INFO:SubProcess create_model() called ==================================
2024-05-21 14:25:08,793:INFO:Initializing create_model()
2024-05-21 14:25:08,793:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:25:08,793:INFO:Checking exceptions
2024-05-21 14:25:08,793:INFO:Importing libraries
2024-05-21 14:25:08,793:INFO:Copying training dataset
2024-05-21 14:25:09,031:INFO:Defining folds
2024-05-21 14:25:09,031:INFO:Declaring metric variables
2024-05-21 14:25:09,037:INFO:Importing untrained model
2024-05-21 14:25:09,042:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:25:09,051:INFO:Starting cross validation
2024-05-21 14:25:09,055:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:25:25,518:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,573:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,588:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,591:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,677:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,693:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,770:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,792:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,799:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,802:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,846:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,852:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,978:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:25,996:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:26,012:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:26,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:26,566:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:26,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:26,622:INFO:Calculating mean and std
2024-05-21 14:25:26,625:INFO:Creating metrics dataframe
2024-05-21 14:25:26,631:INFO:Uploading results into container
2024-05-21 14:25:26,632:INFO:Uploading model into container now
2024-05-21 14:25:26,633:INFO:_master_model_container: 29
2024-05-21 14:25:26,633:INFO:_display_container: 4
2024-05-21 14:25:26,634:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:25:26,634:INFO:create_model() successfully completed......................................
2024-05-21 14:25:26,786:INFO:SubProcess create_model() end ==================================
2024-05-21 14:25:26,786:INFO:Creating metrics dataframe
2024-05-21 14:25:26,799:INFO:Initializing Dummy Classifier
2024-05-21 14:25:26,800:INFO:Total runtime is 2.489512248833974 minutes
2024-05-21 14:25:26,804:INFO:SubProcess create_model() called ==================================
2024-05-21 14:25:26,805:INFO:Initializing create_model()
2024-05-21 14:25:26,805:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022A9DF40250>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:25:26,805:INFO:Checking exceptions
2024-05-21 14:25:26,805:INFO:Importing libraries
2024-05-21 14:25:26,805:INFO:Copying training dataset
2024-05-21 14:25:27,058:INFO:Defining folds
2024-05-21 14:25:27,058:INFO:Declaring metric variables
2024-05-21 14:25:27,066:INFO:Importing untrained model
2024-05-21 14:25:27,073:INFO:Dummy Classifier Imported successfully
2024-05-21 14:25:27,086:INFO:Starting cross validation
2024-05-21 14:25:27,088:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:25:27,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,418:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,428:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,434:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,550:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,556:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,570:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,583:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,588:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,695:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,719:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,725:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,774:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,797:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,803:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,864:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,881:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,888:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:27,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:27,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,066:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:28,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,132:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,158:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:28,164:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,201:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:25:28,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:28,238:INFO:Calculating mean and std
2024-05-21 14:25:28,239:INFO:Creating metrics dataframe
2024-05-21 14:25:28,242:INFO:Uploading results into container
2024-05-21 14:25:28,243:INFO:Uploading model into container now
2024-05-21 14:25:28,243:INFO:_master_model_container: 30
2024-05-21 14:25:28,243:INFO:_display_container: 4
2024-05-21 14:25:28,244:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 14:25:28,244:INFO:create_model() successfully completed......................................
2024-05-21 14:25:28,396:INFO:SubProcess create_model() end ==================================
2024-05-21 14:25:28,396:INFO:Creating metrics dataframe
2024-05-21 14:25:28,418:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-21 14:25:28,433:INFO:Initializing create_model()
2024-05-21 14:25:28,434:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:25:28,435:INFO:Checking exceptions
2024-05-21 14:25:28,438:INFO:Importing libraries
2024-05-21 14:25:28,438:INFO:Copying training dataset
2024-05-21 14:25:28,689:INFO:Defining folds
2024-05-21 14:25:28,689:INFO:Declaring metric variables
2024-05-21 14:25:28,689:INFO:Importing untrained model
2024-05-21 14:25:28,689:INFO:Declaring custom model
2024-05-21 14:25:28,690:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:25:28,692:INFO:Cross validation set to False
2024-05-21 14:25:28,692:INFO:Fitting Model
2024-05-21 14:25:29,064:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:25:29,093:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.028102 seconds.
2024-05-21 14:25:29,093:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:25:29,096:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:25:29,098:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:25:29,102:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:25:29,102:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:25:30,392:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:25:30,393:INFO:create_model() successfully completed......................................
2024-05-21 14:25:30,576:INFO:_master_model_container: 30
2024-05-21 14:25:30,577:INFO:_display_container: 4
2024-05-21 14:25:30,577:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:25:30,577:INFO:compare_models() successfully completed......................................
2024-05-21 14:25:30,647:INFO:Initializing predict_model()
2024-05-21 14:25:30,648:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000022A9ED6D3F0>)
2024-05-21 14:25:30,648:INFO:Checking exceptions
2024-05-21 14:25:30,648:INFO:Preloading libraries
2024-05-21 14:25:30,650:INFO:Set up data.
2024-05-21 14:25:30,775:INFO:Set up index.
2024-05-21 14:25:30,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:31,037:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:25:31,070:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:40:39,946:INFO:Initializing create_model()
2024-05-21 14:40:39,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:40:39,946:INFO:Checking exceptions
2024-05-21 14:40:39,972:INFO:Importing libraries
2024-05-21 14:40:39,973:INFO:Copying training dataset
2024-05-21 14:40:40,313:INFO:Defining folds
2024-05-21 14:40:40,313:INFO:Declaring metric variables
2024-05-21 14:40:40,318:INFO:Importing untrained model
2024-05-21 14:40:40,324:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:40:40,335:INFO:Starting cross validation
2024-05-21 14:40:40,339:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:41:06,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,541:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,600:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,633:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,709:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,931:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,950:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:06,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,052:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,169:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:41:07,234:INFO:Calculating mean and std
2024-05-21 14:41:07,237:INFO:Creating metrics dataframe
2024-05-21 14:41:07,250:INFO:Finalizing model
2024-05-21 14:41:07,702:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:41:07,740:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.037866 seconds.
2024-05-21 14:41:07,740:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:41:07,744:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:41:07,748:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:41:07,751:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:41:07,751:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:41:09,578:INFO:Uploading results into container
2024-05-21 14:41:09,579:INFO:Uploading model into container now
2024-05-21 14:41:09,599:INFO:_master_model_container: 31
2024-05-21 14:41:09,600:INFO:_display_container: 6
2024-05-21 14:41:09,601:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:41:09,601:INFO:create_model() successfully completed......................................
2024-05-21 14:42:55,265:INFO:Initializing create_model()
2024-05-21 14:42:55,265:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:42:55,265:INFO:Checking exceptions
2024-05-21 14:42:55,285:INFO:Importing libraries
2024-05-21 14:42:55,285:INFO:Copying training dataset
2024-05-21 14:42:55,574:INFO:Defining folds
2024-05-21 14:42:55,574:INFO:Declaring metric variables
2024-05-21 14:42:55,578:INFO:Importing untrained model
2024-05-21 14:42:55,584:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:42:55,594:INFO:Starting cross validation
2024-05-21 14:42:55,596:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:43:20,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,562:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,752:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:20,935:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,083:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,151:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,168:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,168:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,185:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,203:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:21,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:22,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:22,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:22,021:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:43:22,050:INFO:Calculating mean and std
2024-05-21 14:43:22,053:INFO:Creating metrics dataframe
2024-05-21 14:43:22,065:INFO:Finalizing model
2024-05-21 14:43:22,482:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:43:22,517:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.033778 seconds.
2024-05-21 14:43:22,517:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:43:22,525:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:43:22,530:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:43:22,533:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:43:22,533:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:43:24,628:INFO:Uploading results into container
2024-05-21 14:43:24,630:INFO:Uploading model into container now
2024-05-21 14:43:24,653:INFO:_master_model_container: 32
2024-05-21 14:43:24,653:INFO:_display_container: 7
2024-05-21 14:43:24,654:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:43:24,654:INFO:create_model() successfully completed......................................
2024-05-21 14:47:09,477:INFO:Initializing create_model()
2024-05-21 14:47:09,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:47:09,477:INFO:Checking exceptions
2024-05-21 14:47:09,507:INFO:Importing libraries
2024-05-21 14:47:09,507:INFO:Copying training dataset
2024-05-21 14:47:09,833:INFO:Defining folds
2024-05-21 14:47:09,833:INFO:Declaring metric variables
2024-05-21 14:47:09,837:INFO:Importing untrained model
2024-05-21 14:47:09,843:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:47:09,852:INFO:Starting cross validation
2024-05-21 14:47:09,856:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:47:27,773:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,789:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,811:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,898:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,917:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,917:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,925:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:27,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,070:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,087:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,109:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,134:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,154:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,205:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,221:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,283:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,311:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,344:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:28,978:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:47:29,009:INFO:Calculating mean and std
2024-05-21 14:47:29,012:INFO:Creating metrics dataframe
2024-05-21 14:47:29,021:INFO:Finalizing model
2024-05-21 14:47:29,407:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:47:29,437:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.029120 seconds.
2024-05-21 14:47:29,437:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:47:29,441:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:47:29,445:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:47:29,448:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:47:29,448:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:47:30,744:INFO:Uploading results into container
2024-05-21 14:47:30,746:INFO:Uploading model into container now
2024-05-21 14:47:30,763:INFO:_master_model_container: 33
2024-05-21 14:47:30,763:INFO:_display_container: 8
2024-05-21 14:47:30,764:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:47:30,764:INFO:create_model() successfully completed......................................
2024-05-21 14:47:30,958:INFO:Initializing tune_model()
2024-05-21 14:47:30,958:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=optuna, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022A9C1E75B0>)
2024-05-21 14:47:30,958:INFO:Checking exceptions
2024-05-21 14:47:30,958:INFO:Soft dependency imported: optuna: 3.6.1
2024-05-21 14:47:31,300:INFO:Copying training dataset
2024-05-21 14:47:31,443:INFO:Checking base model
2024-05-21 14:47:31,443:INFO:Base model : Light Gradient Boosting Machine
2024-05-21 14:47:31,448:INFO:Declaring metric variables
2024-05-21 14:47:31,452:INFO:Defining Hyperparameters
2024-05-21 14:47:31,578:INFO:Tuning with n_jobs=-1
2024-05-21 14:47:31,623:WARNING:d:\projects\research\.venv\lib\site-packages\optuna\samplers\_tpe\sampler.py:319: ExperimentalWarning: ``multivariate`` option is an experimental feature. The interface can change in the future.
  warnings.warn(

2024-05-21 14:47:31,623:WARNING:d:\projects\research\.venv\lib\site-packages\optuna\samplers\_tpe\sampler.py:338: ExperimentalWarning: ``constant_liar`` option is an experimental feature. The interface can change in the future.
  warnings.warn(

2024-05-21 14:47:31,624:INFO:Initializing optuna.integration.OptunaSearchCV
2024-05-21 14:49:32,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:49:32,912:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:49:32,912:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:49:32,912:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 14:49:40,644:INFO:PyCaret ClassificationExperiment
2024-05-21 14:49:40,646:INFO:Logging name: clf-default-name
2024-05-21 14:49:40,646:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:49:40,646:INFO:version 3.3.2
2024-05-21 14:49:40,646:INFO:Initializing setup()
2024-05-21 14:49:40,646:INFO:self.USI: 2a36
2024-05-21 14:49:40,646:INFO:self._variable_keys: {'_ml_usecase', 'exp_name_log', 'n_jobs_param', 'is_multiclass', 'exp_id', 'pipeline', 'gpu_n_jobs_param', 'data', 'X', 'fold_shuffle_param', 'X_train', 'logging_param', 'y', 'idx', 'USI', 'y_train', 'X_test', 'y_test', 'fold_groups_param', 'fold_generator', 'log_plots_param', 'gpu_param', 'seed', 'html_param', 'memory', '_available_plots', 'target_param', 'fix_imbalance'}
2024-05-21 14:49:40,646:INFO:Checking environment
2024-05-21 14:49:40,646:INFO:python_version: 3.10.0
2024-05-21 14:49:40,646:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:49:40,647:INFO:machine: AMD64
2024-05-21 14:49:40,647:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:49:40,656:INFO:Memory: svmem(total=16993001472, available=5649944576, percent=66.8, used=11343056896, free=5649944576)
2024-05-21 14:49:40,656:INFO:Physical Core: 6
2024-05-21 14:49:40,656:INFO:Logical Core: 12
2024-05-21 14:49:40,656:INFO:Checking libraries
2024-05-21 14:49:40,656:INFO:System:
2024-05-21 14:49:40,656:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:49:40,656:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:49:40,656:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:49:40,656:INFO:PyCaret required dependencies:
2024-05-21 14:49:40,791:INFO:                 pip: 24.0
2024-05-21 14:49:40,791:INFO:          setuptools: 57.4.0
2024-05-21 14:49:40,791:INFO:             pycaret: 3.3.2
2024-05-21 14:49:40,792:INFO:             IPython: 8.23.0
2024-05-21 14:49:40,792:INFO:          ipywidgets: 8.1.2
2024-05-21 14:49:40,792:INFO:                tqdm: 4.66.2
2024-05-21 14:49:40,792:INFO:               numpy: 1.26.3
2024-05-21 14:49:40,792:INFO:              pandas: 2.1.4
2024-05-21 14:49:40,792:INFO:              jinja2: 3.1.2
2024-05-21 14:49:40,792:INFO:               scipy: 1.11.4
2024-05-21 14:49:40,792:INFO:              joblib: 1.3.2
2024-05-21 14:49:40,792:INFO:             sklearn: 1.4.2
2024-05-21 14:49:40,792:INFO:                pyod: 1.1.3
2024-05-21 14:49:40,793:INFO:            imblearn: 0.12.2
2024-05-21 14:49:40,793:INFO:   category_encoders: 2.6.3
2024-05-21 14:49:40,793:INFO:            lightgbm: 4.3.0
2024-05-21 14:49:40,793:INFO:               numba: 0.59.1
2024-05-21 14:49:40,793:INFO:            requests: 2.31.0
2024-05-21 14:49:40,793:INFO:          matplotlib: 3.7.5
2024-05-21 14:49:40,793:INFO:          scikitplot: 0.3.7
2024-05-21 14:49:40,793:INFO:         yellowbrick: 1.5
2024-05-21 14:49:40,793:INFO:              plotly: 5.22.0
2024-05-21 14:49:40,793:INFO:    plotly-resampler: Not installed
2024-05-21 14:49:40,793:INFO:             kaleido: 0.2.1
2024-05-21 14:49:40,794:INFO:           schemdraw: 0.15
2024-05-21 14:49:40,794:INFO:         statsmodels: 0.14.2
2024-05-21 14:49:40,794:INFO:              sktime: 0.26.0
2024-05-21 14:49:40,794:INFO:               tbats: 1.1.3
2024-05-21 14:49:40,794:INFO:            pmdarima: 2.0.4
2024-05-21 14:49:40,794:INFO:              psutil: 5.9.8
2024-05-21 14:49:40,794:INFO:          markupsafe: 2.1.3
2024-05-21 14:49:40,794:INFO:             pickle5: Not installed
2024-05-21 14:49:40,794:INFO:         cloudpickle: 3.0.0
2024-05-21 14:49:40,794:INFO:         deprecation: 2.1.0
2024-05-21 14:49:40,795:INFO:              xxhash: 3.4.1
2024-05-21 14:49:40,795:INFO:           wurlitzer: Not installed
2024-05-21 14:49:40,795:INFO:PyCaret optional dependencies:
2024-05-21 14:49:44,631:INFO:                shap: Not installed
2024-05-21 14:49:44,631:INFO:           interpret: Not installed
2024-05-21 14:49:44,631:INFO:                umap: Not installed
2024-05-21 14:49:44,631:INFO:     ydata_profiling: Not installed
2024-05-21 14:49:44,631:INFO:  explainerdashboard: Not installed
2024-05-21 14:49:44,631:INFO:             autoviz: Not installed
2024-05-21 14:49:44,631:INFO:           fairlearn: Not installed
2024-05-21 14:49:44,631:INFO:          deepchecks: Not installed
2024-05-21 14:49:44,631:INFO:             xgboost: 2.0.3
2024-05-21 14:49:44,631:INFO:            catboost: Not installed
2024-05-21 14:49:44,631:INFO:              kmodes: Not installed
2024-05-21 14:49:44,632:INFO:             mlxtend: Not installed
2024-05-21 14:49:44,632:INFO:       statsforecast: Not installed
2024-05-21 14:49:44,632:INFO:        tune_sklearn: Not installed
2024-05-21 14:49:44,632:INFO:                 ray: Not installed
2024-05-21 14:49:44,632:INFO:            hyperopt: Not installed
2024-05-21 14:49:44,632:INFO:              optuna: 3.6.1
2024-05-21 14:49:44,632:INFO:               skopt: Not installed
2024-05-21 14:49:44,632:INFO:              mlflow: 2.13.0
2024-05-21 14:49:44,632:INFO:              gradio: 4.31.4
2024-05-21 14:49:44,632:INFO:             fastapi: 0.111.0
2024-05-21 14:49:44,632:INFO:             uvicorn: 0.29.0
2024-05-21 14:49:44,632:INFO:              m2cgen: 0.10.0
2024-05-21 14:49:44,632:INFO:           evidently: 0.4.23
2024-05-21 14:49:44,632:INFO:               fugue: Not installed
2024-05-21 14:49:44,632:INFO:           streamlit: Not installed
2024-05-21 14:49:44,632:INFO:             prophet: Not installed
2024-05-21 14:49:44,632:INFO:None
2024-05-21 14:49:44,633:INFO:Set up data.
2024-05-21 14:49:44,787:INFO:Set up folding strategy.
2024-05-21 14:49:44,787:INFO:Set up train/test split.
2024-05-21 14:49:45,008:INFO:Set up index.
2024-05-21 14:49:45,015:INFO:Assigning column types.
2024-05-21 14:49:45,269:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 14:49:45,332:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,364:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,422:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,427:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,492:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,494:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,532:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,536:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 14:49:45,600:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,640:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,643:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,707:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:45,746:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,749:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,750:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 14:49:45,852:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,857:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,961:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:45,965:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:45,968:INFO:Preparing preprocessing pipeline...
2024-05-21 14:49:46,002:INFO:Set up label encoding.
2024-05-21 14:49:46,002:INFO:Set up simple imputation.
2024-05-21 14:49:46,462:INFO:Finished creating preprocessing pipeline.
2024-05-21 14:49:46,493:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 14:49:46,493:INFO:Creating final display dataframe.
2024-05-21 14:49:47,576:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              2a36
2024-05-21 14:49:47,696:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:47,700:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:47,818:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:47,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:47,824:INFO:setup() successfully completed in 7.19s...............
2024-05-21 14:49:47,894:INFO:PyCaret ClassificationExperiment
2024-05-21 14:49:47,894:INFO:Logging name: clf-default-name
2024-05-21 14:49:47,894:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 14:49:47,895:INFO:version 3.3.2
2024-05-21 14:49:47,895:INFO:Initializing setup()
2024-05-21 14:49:47,895:INFO:self.USI: b822
2024-05-21 14:49:47,895:INFO:self._variable_keys: {'_ml_usecase', 'exp_name_log', 'n_jobs_param', 'is_multiclass', 'exp_id', 'pipeline', 'gpu_n_jobs_param', 'data', 'X', 'fold_shuffle_param', 'X_train', 'logging_param', 'y', 'idx', 'USI', 'y_train', 'X_test', 'y_test', 'fold_groups_param', 'fold_generator', 'log_plots_param', 'gpu_param', 'seed', 'html_param', 'memory', '_available_plots', 'target_param', 'fix_imbalance'}
2024-05-21 14:49:47,895:INFO:Checking environment
2024-05-21 14:49:47,895:INFO:python_version: 3.10.0
2024-05-21 14:49:47,895:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 14:49:47,895:INFO:machine: AMD64
2024-05-21 14:49:47,896:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 14:49:47,902:INFO:Memory: svmem(total=16993001472, available=5579231232, percent=67.2, used=11413770240, free=5579231232)
2024-05-21 14:49:47,903:INFO:Physical Core: 6
2024-05-21 14:49:47,903:INFO:Logical Core: 12
2024-05-21 14:49:47,903:INFO:Checking libraries
2024-05-21 14:49:47,903:INFO:System:
2024-05-21 14:49:47,904:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 14:49:47,904:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 14:49:47,904:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 14:49:47,904:INFO:PyCaret required dependencies:
2024-05-21 14:49:47,904:INFO:                 pip: 24.0
2024-05-21 14:49:47,904:INFO:          setuptools: 57.4.0
2024-05-21 14:49:47,904:INFO:             pycaret: 3.3.2
2024-05-21 14:49:47,904:INFO:             IPython: 8.23.0
2024-05-21 14:49:47,904:INFO:          ipywidgets: 8.1.2
2024-05-21 14:49:47,904:INFO:                tqdm: 4.66.2
2024-05-21 14:49:47,905:INFO:               numpy: 1.26.3
2024-05-21 14:49:47,905:INFO:              pandas: 2.1.4
2024-05-21 14:49:47,905:INFO:              jinja2: 3.1.2
2024-05-21 14:49:47,905:INFO:               scipy: 1.11.4
2024-05-21 14:49:47,905:INFO:              joblib: 1.3.2
2024-05-21 14:49:47,905:INFO:             sklearn: 1.4.2
2024-05-21 14:49:47,905:INFO:                pyod: 1.1.3
2024-05-21 14:49:47,905:INFO:            imblearn: 0.12.2
2024-05-21 14:49:47,905:INFO:   category_encoders: 2.6.3
2024-05-21 14:49:47,905:INFO:            lightgbm: 4.3.0
2024-05-21 14:49:47,905:INFO:               numba: 0.59.1
2024-05-21 14:49:47,905:INFO:            requests: 2.31.0
2024-05-21 14:49:47,905:INFO:          matplotlib: 3.7.5
2024-05-21 14:49:47,905:INFO:          scikitplot: 0.3.7
2024-05-21 14:49:47,905:INFO:         yellowbrick: 1.5
2024-05-21 14:49:47,905:INFO:              plotly: 5.22.0
2024-05-21 14:49:47,906:INFO:    plotly-resampler: Not installed
2024-05-21 14:49:47,906:INFO:             kaleido: 0.2.1
2024-05-21 14:49:47,906:INFO:           schemdraw: 0.15
2024-05-21 14:49:47,906:INFO:         statsmodels: 0.14.2
2024-05-21 14:49:47,906:INFO:              sktime: 0.26.0
2024-05-21 14:49:47,906:INFO:               tbats: 1.1.3
2024-05-21 14:49:47,906:INFO:            pmdarima: 2.0.4
2024-05-21 14:49:47,906:INFO:              psutil: 5.9.8
2024-05-21 14:49:47,906:INFO:          markupsafe: 2.1.3
2024-05-21 14:49:47,906:INFO:             pickle5: Not installed
2024-05-21 14:49:47,906:INFO:         cloudpickle: 3.0.0
2024-05-21 14:49:47,906:INFO:         deprecation: 2.1.0
2024-05-21 14:49:47,906:INFO:              xxhash: 3.4.1
2024-05-21 14:49:47,906:INFO:           wurlitzer: Not installed
2024-05-21 14:49:47,906:INFO:PyCaret optional dependencies:
2024-05-21 14:49:47,907:INFO:                shap: Not installed
2024-05-21 14:49:47,907:INFO:           interpret: Not installed
2024-05-21 14:49:47,907:INFO:                umap: Not installed
2024-05-21 14:49:47,907:INFO:     ydata_profiling: Not installed
2024-05-21 14:49:47,907:INFO:  explainerdashboard: Not installed
2024-05-21 14:49:47,907:INFO:             autoviz: Not installed
2024-05-21 14:49:47,907:INFO:           fairlearn: Not installed
2024-05-21 14:49:47,907:INFO:          deepchecks: Not installed
2024-05-21 14:49:47,907:INFO:             xgboost: 2.0.3
2024-05-21 14:49:47,907:INFO:            catboost: Not installed
2024-05-21 14:49:47,907:INFO:              kmodes: Not installed
2024-05-21 14:49:47,907:INFO:             mlxtend: Not installed
2024-05-21 14:49:47,907:INFO:       statsforecast: Not installed
2024-05-21 14:49:47,907:INFO:        tune_sklearn: Not installed
2024-05-21 14:49:47,907:INFO:                 ray: Not installed
2024-05-21 14:49:47,907:INFO:            hyperopt: Not installed
2024-05-21 14:49:47,907:INFO:              optuna: 3.6.1
2024-05-21 14:49:47,908:INFO:               skopt: Not installed
2024-05-21 14:49:47,908:INFO:              mlflow: 2.13.0
2024-05-21 14:49:47,908:INFO:              gradio: 4.31.4
2024-05-21 14:49:47,908:INFO:             fastapi: 0.111.0
2024-05-21 14:49:47,908:INFO:             uvicorn: 0.29.0
2024-05-21 14:49:47,908:INFO:              m2cgen: 0.10.0
2024-05-21 14:49:47,908:INFO:           evidently: 0.4.23
2024-05-21 14:49:47,908:INFO:               fugue: Not installed
2024-05-21 14:49:47,908:INFO:           streamlit: Not installed
2024-05-21 14:49:47,908:INFO:             prophet: Not installed
2024-05-21 14:49:47,908:INFO:None
2024-05-21 14:49:47,908:INFO:Set up data.
2024-05-21 14:49:48,222:INFO:Set up folding strategy.
2024-05-21 14:49:48,223:INFO:Set up train/test split.
2024-05-21 14:49:48,413:INFO:Set up index.
2024-05-21 14:49:48,418:INFO:Assigning column types.
2024-05-21 14:49:48,669:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 14:49:48,744:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:49:48,746:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:48,785:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:48,788:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:48,850:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 14:49:48,851:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:48,891:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:48,894:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:48,894:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 14:49:48,958:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:48,997:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:49,001:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:49,064:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 14:49:49,102:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:49,106:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:49,107:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 14:49:49,209:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:49,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:49,321:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:49,325:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:49,327:INFO:Preparing preprocessing pipeline...
2024-05-21 14:49:49,363:INFO:Set up label encoding.
2024-05-21 14:49:49,363:INFO:Set up simple imputation.
2024-05-21 14:49:49,878:INFO:Finished creating preprocessing pipeline.
2024-05-21 14:49:49,886:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 14:49:49,886:INFO:Creating final display dataframe.
2024-05-21 14:49:50,870:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape      (13959, 344)
7    Transformed test set shape        (142, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              b822
2024-05-21 14:49:50,994:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:50,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:51,107:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 14:49:51,111:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 14:49:51,112:INFO:setup() successfully completed in 3.23s...............
2024-05-21 14:49:51,446:INFO:Initializing compare_models()
2024-05-21 14:49:51,446:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 14:49:51,446:INFO:Checking exceptions
2024-05-21 14:49:51,699:INFO:Preparing display monitor
2024-05-21 14:49:51,765:INFO:Initializing Logistic Regression
2024-05-21 14:49:51,765:INFO:Total runtime is 8.932749430338542e-06 minutes
2024-05-21 14:49:51,772:INFO:SubProcess create_model() called ==================================
2024-05-21 14:49:51,772:INFO:Initializing create_model()
2024-05-21 14:49:51,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:49:51,772:INFO:Checking exceptions
2024-05-21 14:49:51,772:INFO:Importing libraries
2024-05-21 14:49:51,773:INFO:Copying training dataset
2024-05-21 14:49:52,096:INFO:Defining folds
2024-05-21 14:49:52,096:INFO:Declaring metric variables
2024-05-21 14:49:52,101:INFO:Importing untrained model
2024-05-21 14:49:52,105:INFO:Logistic Regression Imported successfully
2024-05-21 14:49:52,114:INFO:Starting cross validation
2024-05-21 14:49:52,118:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:49:58,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,482:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,517:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,707:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,718:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,728:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,736:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,743:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,970:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,976:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:58,984:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:58,991:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,090:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,097:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:59,097:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:59,101:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,261:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,276:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:59,281:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:49:59,324:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:49:59,357:INFO:Calculating mean and std
2024-05-21 14:49:59,359:INFO:Creating metrics dataframe
2024-05-21 14:49:59,362:INFO:Uploading results into container
2024-05-21 14:49:59,363:INFO:Uploading model into container now
2024-05-21 14:49:59,364:INFO:_master_model_container: 1
2024-05-21 14:49:59,364:INFO:_display_container: 2
2024-05-21 14:49:59,365:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 14:49:59,365:INFO:create_model() successfully completed......................................
2024-05-21 14:49:59,495:INFO:SubProcess create_model() end ==================================
2024-05-21 14:49:59,496:INFO:Creating metrics dataframe
2024-05-21 14:49:59,505:INFO:Initializing K Neighbors Classifier
2024-05-21 14:49:59,505:INFO:Total runtime is 0.12901281515757243 minutes
2024-05-21 14:49:59,510:INFO:SubProcess create_model() called ==================================
2024-05-21 14:49:59,511:INFO:Initializing create_model()
2024-05-21 14:49:59,511:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:49:59,511:INFO:Checking exceptions
2024-05-21 14:49:59,511:INFO:Importing libraries
2024-05-21 14:49:59,511:INFO:Copying training dataset
2024-05-21 14:49:59,751:INFO:Defining folds
2024-05-21 14:49:59,751:INFO:Declaring metric variables
2024-05-21 14:49:59,756:INFO:Importing untrained model
2024-05-21 14:49:59,760:INFO:K Neighbors Classifier Imported successfully
2024-05-21 14:49:59,769:INFO:Starting cross validation
2024-05-21 14:49:59,772:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:01,751:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,767:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,784:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,842:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,857:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,896:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,982:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:01,994:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,080:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,089:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,100:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,207:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,312:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:02,336:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:04,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:04,880:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:04,889:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,008:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,017:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,026:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,051:INFO:Calculating mean and std
2024-05-21 14:50:05,053:INFO:Creating metrics dataframe
2024-05-21 14:50:05,056:INFO:Uploading results into container
2024-05-21 14:50:05,057:INFO:Uploading model into container now
2024-05-21 14:50:05,058:INFO:_master_model_container: 2
2024-05-21 14:50:05,058:INFO:_display_container: 2
2024-05-21 14:50:05,058:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 14:50:05,059:INFO:create_model() successfully completed......................................
2024-05-21 14:50:05,173:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:05,173:INFO:Creating metrics dataframe
2024-05-21 14:50:05,184:INFO:Initializing Naive Bayes
2024-05-21 14:50:05,184:INFO:Total runtime is 0.2236469308535258 minutes
2024-05-21 14:50:05,187:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:05,188:INFO:Initializing create_model()
2024-05-21 14:50:05,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:05,188:INFO:Checking exceptions
2024-05-21 14:50:05,188:INFO:Importing libraries
2024-05-21 14:50:05,188:INFO:Copying training dataset
2024-05-21 14:50:05,419:INFO:Defining folds
2024-05-21 14:50:05,419:INFO:Declaring metric variables
2024-05-21 14:50:05,424:INFO:Importing untrained model
2024-05-21 14:50:05,430:INFO:Naive Bayes Imported successfully
2024-05-21 14:50:05,443:INFO:Starting cross validation
2024-05-21 14:50:05,448:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:05,876:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,899:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,942:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:05,963:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,053:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,233:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,260:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,340:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,351:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,439:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,450:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,513:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,531:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,653:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,662:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,671:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:06,693:INFO:Calculating mean and std
2024-05-21 14:50:06,695:INFO:Creating metrics dataframe
2024-05-21 14:50:06,697:INFO:Uploading results into container
2024-05-21 14:50:06,698:INFO:Uploading model into container now
2024-05-21 14:50:06,699:INFO:_master_model_container: 3
2024-05-21 14:50:06,699:INFO:_display_container: 2
2024-05-21 14:50:06,699:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 14:50:06,699:INFO:create_model() successfully completed......................................
2024-05-21 14:50:06,808:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:06,808:INFO:Creating metrics dataframe
2024-05-21 14:50:06,817:INFO:Initializing Decision Tree Classifier
2024-05-21 14:50:06,817:INFO:Total runtime is 0.250876784324646 minutes
2024-05-21 14:50:06,822:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:06,822:INFO:Initializing create_model()
2024-05-21 14:50:06,822:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:06,822:INFO:Checking exceptions
2024-05-21 14:50:06,822:INFO:Importing libraries
2024-05-21 14:50:06,823:INFO:Copying training dataset
2024-05-21 14:50:07,049:INFO:Defining folds
2024-05-21 14:50:07,049:INFO:Declaring metric variables
2024-05-21 14:50:07,054:INFO:Importing untrained model
2024-05-21 14:50:07,060:INFO:Decision Tree Classifier Imported successfully
2024-05-21 14:50:07,067:INFO:Starting cross validation
2024-05-21 14:50:07,070:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:07,878:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:07,892:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:07,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:07,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:07,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:07,923:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:07,931:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:07,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,044:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,059:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,068:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,150:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,262:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,314:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,330:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,338:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,345:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,431:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,445:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,454:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,530:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,607:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,615:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,624:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,632:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,686:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,696:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:08,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:08,726:INFO:Calculating mean and std
2024-05-21 14:50:08,728:INFO:Creating metrics dataframe
2024-05-21 14:50:08,730:INFO:Uploading results into container
2024-05-21 14:50:08,731:INFO:Uploading model into container now
2024-05-21 14:50:08,731:INFO:_master_model_container: 4
2024-05-21 14:50:08,731:INFO:_display_container: 2
2024-05-21 14:50:08,732:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 14:50:08,732:INFO:create_model() successfully completed......................................
2024-05-21 14:50:08,840:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:08,841:INFO:Creating metrics dataframe
2024-05-21 14:50:08,855:INFO:Initializing SVM - Linear Kernel
2024-05-21 14:50:08,855:INFO:Total runtime is 0.28483376900355023 minutes
2024-05-21 14:50:08,859:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:08,860:INFO:Initializing create_model()
2024-05-21 14:50:08,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:08,860:INFO:Checking exceptions
2024-05-21 14:50:08,860:INFO:Importing libraries
2024-05-21 14:50:08,860:INFO:Copying training dataset
2024-05-21 14:50:09,106:INFO:Defining folds
2024-05-21 14:50:09,106:INFO:Declaring metric variables
2024-05-21 14:50:09,112:INFO:Importing untrained model
2024-05-21 14:50:09,118:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 14:50:09,127:INFO:Starting cross validation
2024-05-21 14:50:09,129:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:09,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:09,962:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:09,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:09,980:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,001:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,020:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,089:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,103:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,108:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,113:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,176:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,188:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,203:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,251:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,265:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,375:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,384:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,440:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,454:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,460:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,465:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,511:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,520:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,603:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,690:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:10,708:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:10,732:INFO:Calculating mean and std
2024-05-21 14:50:10,734:INFO:Creating metrics dataframe
2024-05-21 14:50:10,736:INFO:Uploading results into container
2024-05-21 14:50:10,737:INFO:Uploading model into container now
2024-05-21 14:50:10,738:INFO:_master_model_container: 5
2024-05-21 14:50:10,738:INFO:_display_container: 2
2024-05-21 14:50:10,738:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 14:50:10,738:INFO:create_model() successfully completed......................................
2024-05-21 14:50:10,842:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:10,842:INFO:Creating metrics dataframe
2024-05-21 14:50:10,853:INFO:Initializing Ridge Classifier
2024-05-21 14:50:10,854:INFO:Total runtime is 0.31813295682271325 minutes
2024-05-21 14:50:10,858:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:10,859:INFO:Initializing create_model()
2024-05-21 14:50:10,859:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:10,859:INFO:Checking exceptions
2024-05-21 14:50:10,859:INFO:Importing libraries
2024-05-21 14:50:10,859:INFO:Copying training dataset
2024-05-21 14:50:11,095:INFO:Defining folds
2024-05-21 14:50:11,096:INFO:Declaring metric variables
2024-05-21 14:50:11,100:INFO:Importing untrained model
2024-05-21 14:50:11,104:INFO:Ridge Classifier Imported successfully
2024-05-21 14:50:11,112:INFO:Starting cross validation
2024-05-21 14:50:11,114:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:11,611:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,622:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,632:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:11,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,676:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:11,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,763:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:11,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,869:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,893:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:11,901:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,985:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:11,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,042:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,063:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,164:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,170:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,261:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,265:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,309:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,315:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,356:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,365:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,370:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:12,374:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:12,403:INFO:Calculating mean and std
2024-05-21 14:50:12,409:INFO:Creating metrics dataframe
2024-05-21 14:50:12,412:INFO:Uploading results into container
2024-05-21 14:50:12,413:INFO:Uploading model into container now
2024-05-21 14:50:12,413:INFO:_master_model_container: 6
2024-05-21 14:50:12,413:INFO:_display_container: 2
2024-05-21 14:50:12,414:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 14:50:12,414:INFO:create_model() successfully completed......................................
2024-05-21 14:50:12,521:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:12,521:INFO:Creating metrics dataframe
2024-05-21 14:50:12,532:INFO:Initializing Random Forest Classifier
2024-05-21 14:50:12,532:INFO:Total runtime is 0.34612741470336916 minutes
2024-05-21 14:50:12,538:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:12,538:INFO:Initializing create_model()
2024-05-21 14:50:12,539:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:12,539:INFO:Checking exceptions
2024-05-21 14:50:12,539:INFO:Importing libraries
2024-05-21 14:50:12,539:INFO:Copying training dataset
2024-05-21 14:50:12,783:INFO:Defining folds
2024-05-21 14:50:12,783:INFO:Declaring metric variables
2024-05-21 14:50:12,787:INFO:Importing untrained model
2024-05-21 14:50:12,792:INFO:Random Forest Classifier Imported successfully
2024-05-21 14:50:12,802:INFO:Starting cross validation
2024-05-21 14:50:12,805:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:39,146:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,165:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,243:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,254:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,260:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,266:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,273:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,353:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,354:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,368:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,369:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,387:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,392:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,393:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,398:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,404:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,412:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,417:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,417:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,419:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,438:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,447:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,450:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,457:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,550:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,560:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:39,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:39,599:INFO:Calculating mean and std
2024-05-21 14:50:39,602:INFO:Creating metrics dataframe
2024-05-21 14:50:39,610:INFO:Uploading results into container
2024-05-21 14:50:39,611:INFO:Uploading model into container now
2024-05-21 14:50:39,612:INFO:_master_model_container: 7
2024-05-21 14:50:39,612:INFO:_display_container: 2
2024-05-21 14:50:39,613:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 14:50:39,613:INFO:create_model() successfully completed......................................
2024-05-21 14:50:39,787:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:39,788:INFO:Creating metrics dataframe
2024-05-21 14:50:39,807:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 14:50:39,807:INFO:Total runtime is 0.8007025321324667 minutes
2024-05-21 14:50:39,815:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:39,816:INFO:Initializing create_model()
2024-05-21 14:50:39,816:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:39,816:INFO:Checking exceptions
2024-05-21 14:50:39,817:INFO:Importing libraries
2024-05-21 14:50:39,817:INFO:Copying training dataset
2024-05-21 14:50:40,165:INFO:Defining folds
2024-05-21 14:50:40,165:INFO:Declaring metric variables
2024-05-21 14:50:40,170:INFO:Importing untrained model
2024-05-21 14:50:40,178:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 14:50:40,193:INFO:Starting cross validation
2024-05-21 14:50:40,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:41,366:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:41,436:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:41,613:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,019:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,088:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,146:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,159:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,162:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,181:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,220:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,242:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,250:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,257:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,268:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,286:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,292:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,299:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,507:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,526:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,544:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,554:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,563:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,588:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 14:50:42,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,780:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,789:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,801:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,805:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,813:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,833:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,841:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,848:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,856:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,858:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,868:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,888:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,916:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,929:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:42,930:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,938:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,945:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:42,957:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:42,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,966:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,982:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:42,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:42,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:43,061:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:43,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:43,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:43,092:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:43,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:43,100:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:43,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 14:50:43,107:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,124:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 14:50:43,130:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:43,133:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 14:50:43,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,152:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:50:43,168:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:50:43,206:INFO:Calculating mean and std
2024-05-21 14:50:43,207:INFO:Creating metrics dataframe
2024-05-21 14:50:43,210:INFO:Uploading results into container
2024-05-21 14:50:43,211:INFO:Uploading model into container now
2024-05-21 14:50:43,211:INFO:_master_model_container: 8
2024-05-21 14:50:43,212:INFO:_display_container: 2
2024-05-21 14:50:43,212:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 14:50:43,212:INFO:create_model() successfully completed......................................
2024-05-21 14:50:43,341:INFO:SubProcess create_model() end ==================================
2024-05-21 14:50:43,342:INFO:Creating metrics dataframe
2024-05-21 14:50:43,357:INFO:Initializing Ada Boost Classifier
2024-05-21 14:50:43,357:INFO:Total runtime is 0.8598778009414674 minutes
2024-05-21 14:50:43,362:INFO:SubProcess create_model() called ==================================
2024-05-21 14:50:43,363:INFO:Initializing create_model()
2024-05-21 14:50:43,363:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:50:43,363:INFO:Checking exceptions
2024-05-21 14:50:43,363:INFO:Importing libraries
2024-05-21 14:50:43,364:INFO:Copying training dataset
2024-05-21 14:50:43,598:INFO:Defining folds
2024-05-21 14:50:43,598:INFO:Declaring metric variables
2024-05-21 14:50:43,603:INFO:Importing untrained model
2024-05-21 14:50:43,610:INFO:Ada Boost Classifier Imported successfully
2024-05-21 14:50:43,618:INFO:Starting cross validation
2024-05-21 14:50:43,620:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:50:43,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,019:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,115:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,211:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,383:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,489:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,576:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,651:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:50:44,748:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 14:51:07,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,182:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,189:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,197:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,222:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,238:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,247:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,429:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,438:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,446:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,465:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,481:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,497:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,506:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,521:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,561:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,568:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,575:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,617:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,626:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,631:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,746:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,754:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,803:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:07,813:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:07,833:INFO:Calculating mean and std
2024-05-21 14:51:07,834:INFO:Creating metrics dataframe
2024-05-21 14:51:07,838:INFO:Uploading results into container
2024-05-21 14:51:07,839:INFO:Uploading model into container now
2024-05-21 14:51:07,839:INFO:_master_model_container: 9
2024-05-21 14:51:07,839:INFO:_display_container: 2
2024-05-21 14:51:07,839:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 14:51:07,840:INFO:create_model() successfully completed......................................
2024-05-21 14:51:07,960:INFO:SubProcess create_model() end ==================================
2024-05-21 14:51:07,960:INFO:Creating metrics dataframe
2024-05-21 14:51:07,972:INFO:Initializing Gradient Boosting Classifier
2024-05-21 14:51:07,972:INFO:Total runtime is 1.270129179954529 minutes
2024-05-21 14:51:07,979:INFO:SubProcess create_model() called ==================================
2024-05-21 14:51:07,980:INFO:Initializing create_model()
2024-05-21 14:51:07,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:51:07,980:INFO:Checking exceptions
2024-05-21 14:51:07,980:INFO:Importing libraries
2024-05-21 14:51:07,981:INFO:Copying training dataset
2024-05-21 14:51:08,208:INFO:Defining folds
2024-05-21 14:51:08,209:INFO:Declaring metric variables
2024-05-21 14:51:08,214:INFO:Importing untrained model
2024-05-21 14:51:08,220:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 14:51:08,229:INFO:Starting cross validation
2024-05-21 14:51:08,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:51:53,103:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,321:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,338:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,347:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,355:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,581:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,598:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,605:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,656:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,666:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,674:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,780:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,794:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,827:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,833:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,837:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,862:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,871:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,876:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,877:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:53,890:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:53,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:54,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:54,017:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:54,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:54,032:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:54,061:INFO:Calculating mean and std
2024-05-21 14:51:54,063:INFO:Creating metrics dataframe
2024-05-21 14:51:54,065:INFO:Uploading results into container
2024-05-21 14:51:54,066:INFO:Uploading model into container now
2024-05-21 14:51:54,067:INFO:_master_model_container: 10
2024-05-21 14:51:54,067:INFO:_display_container: 2
2024-05-21 14:51:54,067:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 14:51:54,067:INFO:create_model() successfully completed......................................
2024-05-21 14:51:54,177:INFO:SubProcess create_model() end ==================================
2024-05-21 14:51:54,177:INFO:Creating metrics dataframe
2024-05-21 14:51:54,193:INFO:Initializing Linear Discriminant Analysis
2024-05-21 14:51:54,193:INFO:Total runtime is 2.040468414624532 minutes
2024-05-21 14:51:54,197:INFO:SubProcess create_model() called ==================================
2024-05-21 14:51:54,198:INFO:Initializing create_model()
2024-05-21 14:51:54,198:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:51:54,198:INFO:Checking exceptions
2024-05-21 14:51:54,198:INFO:Importing libraries
2024-05-21 14:51:54,198:INFO:Copying training dataset
2024-05-21 14:51:54,469:INFO:Defining folds
2024-05-21 14:51:54,469:INFO:Declaring metric variables
2024-05-21 14:51:54,474:INFO:Importing untrained model
2024-05-21 14:51:54,480:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 14:51:54,490:INFO:Starting cross validation
2024-05-21 14:51:54,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:51:55,536:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,601:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,616:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,717:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,738:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,809:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,831:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,894:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,972:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:55,989:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,059:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,134:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,144:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,160:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,294:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,302:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,319:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,328:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:56,348:INFO:Calculating mean and std
2024-05-21 14:51:56,350:INFO:Creating metrics dataframe
2024-05-21 14:51:56,352:INFO:Uploading results into container
2024-05-21 14:51:56,353:INFO:Uploading model into container now
2024-05-21 14:51:56,353:INFO:_master_model_container: 11
2024-05-21 14:51:56,354:INFO:_display_container: 2
2024-05-21 14:51:56,354:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 14:51:56,354:INFO:create_model() successfully completed......................................
2024-05-21 14:51:56,459:INFO:SubProcess create_model() end ==================================
2024-05-21 14:51:56,459:INFO:Creating metrics dataframe
2024-05-21 14:51:56,472:INFO:Initializing Extra Trees Classifier
2024-05-21 14:51:56,472:INFO:Total runtime is 2.0784518996874493 minutes
2024-05-21 14:51:56,476:INFO:SubProcess create_model() called ==================================
2024-05-21 14:51:56,477:INFO:Initializing create_model()
2024-05-21 14:51:56,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:51:56,477:INFO:Checking exceptions
2024-05-21 14:51:56,477:INFO:Importing libraries
2024-05-21 14:51:56,477:INFO:Copying training dataset
2024-05-21 14:51:56,698:INFO:Defining folds
2024-05-21 14:51:56,698:INFO:Declaring metric variables
2024-05-21 14:51:56,703:INFO:Importing untrained model
2024-05-21 14:51:56,708:INFO:Extra Trees Classifier Imported successfully
2024-05-21 14:51:56,718:INFO:Starting cross validation
2024-05-21 14:51:56,720:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:51:57,912:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:57,928:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:57,961:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:57,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,167:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,184:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,198:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:58,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,241:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,256:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:58,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:58,979:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:58,999:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,111:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,123:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,132:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,137:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,153:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,174:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,184:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,185:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,202:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,227:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,272:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,341:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,349:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,354:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,359:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,476:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:51:59,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:51:59,515:INFO:Calculating mean and std
2024-05-21 14:51:59,516:INFO:Creating metrics dataframe
2024-05-21 14:51:59,519:INFO:Uploading results into container
2024-05-21 14:51:59,520:INFO:Uploading model into container now
2024-05-21 14:51:59,520:INFO:_master_model_container: 12
2024-05-21 14:51:59,520:INFO:_display_container: 2
2024-05-21 14:51:59,521:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 14:51:59,521:INFO:create_model() successfully completed......................................
2024-05-21 14:51:59,631:INFO:SubProcess create_model() end ==================================
2024-05-21 14:51:59,632:INFO:Creating metrics dataframe
2024-05-21 14:51:59,646:INFO:Initializing Extreme Gradient Boosting
2024-05-21 14:51:59,647:INFO:Total runtime is 2.1313664714495344 minutes
2024-05-21 14:51:59,652:INFO:SubProcess create_model() called ==================================
2024-05-21 14:51:59,652:INFO:Initializing create_model()
2024-05-21 14:51:59,652:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:51:59,653:INFO:Checking exceptions
2024-05-21 14:51:59,653:INFO:Importing libraries
2024-05-21 14:51:59,653:INFO:Copying training dataset
2024-05-21 14:51:59,908:INFO:Defining folds
2024-05-21 14:51:59,908:INFO:Declaring metric variables
2024-05-21 14:51:59,913:INFO:Importing untrained model
2024-05-21 14:51:59,920:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 14:51:59,929:INFO:Starting cross validation
2024-05-21 14:51:59,934:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:52:12,975:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:12,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,012:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,128:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,139:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,271:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,284:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,314:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,436:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,463:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,542:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,573:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,689:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,704:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,720:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,731:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,820:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,839:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:13,877:INFO:Calculating mean and std
2024-05-21 14:52:13,878:INFO:Creating metrics dataframe
2024-05-21 14:52:13,881:INFO:Uploading results into container
2024-05-21 14:52:13,882:INFO:Uploading model into container now
2024-05-21 14:52:13,882:INFO:_master_model_container: 13
2024-05-21 14:52:13,883:INFO:_display_container: 2
2024-05-21 14:52:13,884:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 14:52:13,885:INFO:create_model() successfully completed......................................
2024-05-21 14:52:14,008:INFO:SubProcess create_model() end ==================================
2024-05-21 14:52:14,008:INFO:Creating metrics dataframe
2024-05-21 14:52:14,021:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 14:52:14,021:INFO:Total runtime is 2.370946780840556 minutes
2024-05-21 14:52:14,026:INFO:SubProcess create_model() called ==================================
2024-05-21 14:52:14,027:INFO:Initializing create_model()
2024-05-21 14:52:14,027:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:52:14,027:INFO:Checking exceptions
2024-05-21 14:52:14,027:INFO:Importing libraries
2024-05-21 14:52:14,027:INFO:Copying training dataset
2024-05-21 14:52:14,256:INFO:Defining folds
2024-05-21 14:52:14,256:INFO:Declaring metric variables
2024-05-21 14:52:14,261:INFO:Importing untrained model
2024-05-21 14:52:14,266:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:52:14,277:INFO:Starting cross validation
2024-05-21 14:52:14,279:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:52:30,496:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,513:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,513:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,529:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,542:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,553:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,590:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,624:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,793:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,828:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,836:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,853:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:30,869:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,015:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,034:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,076:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,109:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,191:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,222:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,257:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,919:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,932:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:31,957:INFO:Calculating mean and std
2024-05-21 14:52:31,960:INFO:Creating metrics dataframe
2024-05-21 14:52:31,965:INFO:Uploading results into container
2024-05-21 14:52:31,966:INFO:Uploading model into container now
2024-05-21 14:52:31,967:INFO:_master_model_container: 14
2024-05-21 14:52:31,968:INFO:_display_container: 2
2024-05-21 14:52:31,969:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:52:31,969:INFO:create_model() successfully completed......................................
2024-05-21 14:52:32,130:INFO:SubProcess create_model() end ==================================
2024-05-21 14:52:32,131:INFO:Creating metrics dataframe
2024-05-21 14:52:32,152:INFO:Initializing Dummy Classifier
2024-05-21 14:52:32,152:INFO:Total runtime is 2.6731274366378788 minutes
2024-05-21 14:52:32,158:INFO:SubProcess create_model() called ==================================
2024-05-21 14:52:32,158:INFO:Initializing create_model()
2024-05-21 14:52:32,159:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:52:32,159:INFO:Checking exceptions
2024-05-21 14:52:32,159:INFO:Importing libraries
2024-05-21 14:52:32,159:INFO:Copying training dataset
2024-05-21 14:52:32,415:INFO:Defining folds
2024-05-21 14:52:32,415:INFO:Declaring metric variables
2024-05-21 14:52:32,420:INFO:Importing untrained model
2024-05-21 14:52:32,426:INFO:Dummy Classifier Imported successfully
2024-05-21 14:52:32,435:INFO:Starting cross validation
2024-05-21 14:52:32,439:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:52:32,783:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,797:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:32,811:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,864:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,881:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:32,887:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,958:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,974:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:32,983:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:32,988:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,036:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,060:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,130:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,143:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,151:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,156:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,224:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,230:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,308:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,316:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,402:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,448:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,478:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,484:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,546:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 14:52:33,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:33,586:INFO:Calculating mean and std
2024-05-21 14:52:33,588:INFO:Creating metrics dataframe
2024-05-21 14:52:33,590:INFO:Uploading results into container
2024-05-21 14:52:33,591:INFO:Uploading model into container now
2024-05-21 14:52:33,591:INFO:_master_model_container: 15
2024-05-21 14:52:33,591:INFO:_display_container: 2
2024-05-21 14:52:33,592:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 14:52:33,592:INFO:create_model() successfully completed......................................
2024-05-21 14:52:33,698:INFO:SubProcess create_model() end ==================================
2024-05-21 14:52:33,699:INFO:Creating metrics dataframe
2024-05-21 14:52:33,717:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-05-21 14:52:33,728:INFO:Initializing create_model()
2024-05-21 14:52:33,728:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:52:33,728:INFO:Checking exceptions
2024-05-21 14:52:33,730:INFO:Importing libraries
2024-05-21 14:52:33,730:INFO:Copying training dataset
2024-05-21 14:52:33,988:INFO:Defining folds
2024-05-21 14:52:33,988:INFO:Declaring metric variables
2024-05-21 14:52:33,988:INFO:Importing untrained model
2024-05-21 14:52:33,988:INFO:Declaring custom model
2024-05-21 14:52:33,989:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:52:33,991:INFO:Cross validation set to False
2024-05-21 14:52:33,991:INFO:Fitting Model
2024-05-21 14:52:34,357:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:52:34,387:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.030008 seconds.
2024-05-21 14:52:34,387:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:52:34,391:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:52:34,393:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:52:34,397:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:52:34,397:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:52:35,913:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:52:35,913:INFO:create_model() successfully completed......................................
2024-05-21 14:52:36,096:INFO:_master_model_container: 15
2024-05-21 14:52:36,096:INFO:_display_container: 2
2024-05-21 14:52:36,097:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:52:36,097:INFO:compare_models() successfully completed......................................
2024-05-21 14:52:36,200:INFO:Initializing predict_model()
2024-05-21 14:52:36,200:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002559CD03130>)
2024-05-21 14:52:36,200:INFO:Checking exceptions
2024-05-21 14:52:36,200:INFO:Preloading libraries
2024-05-21 14:52:36,203:INFO:Set up data.
2024-05-21 14:52:36,371:INFO:Set up index.
2024-05-21 14:52:36,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:36,685:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:36,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:36,942:INFO:Initializing create_model()
2024-05-21 14:52:36,942:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=lightgbm, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:52:36,942:INFO:Checking exceptions
2024-05-21 14:52:36,963:INFO:Importing libraries
2024-05-21 14:52:36,963:INFO:Copying training dataset
2024-05-21 14:52:37,271:INFO:Defining folds
2024-05-21 14:52:37,271:INFO:Declaring metric variables
2024-05-21 14:52:37,277:INFO:Importing untrained model
2024-05-21 14:52:37,282:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:52:37,292:INFO:Starting cross validation
2024-05-21 14:52:37,296:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:52:52,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:52,980:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:52,993:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:52,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,007:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,009:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,028:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,050:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,054:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,074:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,209:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,271:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,295:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,311:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,350:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,365:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,474:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,492:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,508:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:52:53,593:INFO:Calculating mean and std
2024-05-21 14:52:53,597:INFO:Creating metrics dataframe
2024-05-21 14:52:53,607:INFO:Finalizing model
2024-05-21 14:52:53,974:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:52:54,003:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.027962 seconds.
2024-05-21 14:52:54,004:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:52:54,006:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:52:54,011:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:52:54,014:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:52:54,014:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:52:55,382:INFO:Uploading results into container
2024-05-21 14:52:55,383:INFO:Uploading model into container now
2024-05-21 14:52:55,401:INFO:_master_model_container: 16
2024-05-21 14:52:55,401:INFO:_display_container: 4
2024-05-21 14:52:55,402:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:52:55,402:INFO:create_model() successfully completed......................................
2024-05-21 14:52:55,545:INFO:Initializing tune_model()
2024-05-21 14:52:55,545:INFO:tune_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=optuna, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>)
2024-05-21 14:52:55,545:INFO:Checking exceptions
2024-05-21 14:52:55,546:INFO:Soft dependency imported: optuna: 3.6.1
2024-05-21 14:52:55,833:INFO:Copying training dataset
2024-05-21 14:52:56,024:INFO:Checking base model
2024-05-21 14:52:56,024:INFO:Base model : Light Gradient Boosting Machine
2024-05-21 14:52:56,029:INFO:Declaring metric variables
2024-05-21 14:52:56,033:INFO:Defining Hyperparameters
2024-05-21 14:52:56,150:INFO:Tuning with n_jobs=-1
2024-05-21 14:52:56,152:WARNING:d:\projects\research\.venv\lib\site-packages\optuna\samplers\_tpe\sampler.py:319: ExperimentalWarning: ``multivariate`` option is an experimental feature. The interface can change in the future.
  warnings.warn(

2024-05-21 14:52:56,152:WARNING:d:\projects\research\.venv\lib\site-packages\optuna\samplers\_tpe\sampler.py:338: ExperimentalWarning: ``constant_liar`` option is an experimental feature. The interface can change in the future.
  warnings.warn(

2024-05-21 14:52:56,153:INFO:Initializing optuna.integration.OptunaSearchCV
2024-05-21 14:52:56,192:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:2458: ExperimentalWarning: OptunaSearchCV is experimental (supported from v0.17.0). The interface can change in the future.
  model_grid = optuna.integration.OptunaSearchCV(  # type: ignore

2024-05-21 14:55:10,056:INFO:best_params: {'actual_estimator__num_leaves': 157, 'actual_estimator__learning_rate': 0.11781435709290228, 'actual_estimator__n_estimators': 239, 'actual_estimator__min_split_gain': 0.1929832689490374, 'actual_estimator__reg_alpha': 1.4635624662176638e-05, 'actual_estimator__reg_lambda': 0.00011555631116093024, 'actual_estimator__feature_fraction': 0.48794914094903397, 'actual_estimator__bagging_fraction': 0.7666606981200899, 'actual_estimator__bagging_freq': 0, 'actual_estimator__min_child_samples': 38}
2024-05-21 14:55:10,059:INFO:Hyperparameter search completed
2024-05-21 14:55:10,060:INFO:SubProcess create_model() called ==================================
2024-05-21 14:55:10,061:INFO:Initializing create_model()
2024-05-21 14:55:10,062:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000255D253FCA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'num_leaves': 157, 'learning_rate': 0.11781435709290228, 'n_estimators': 239, 'min_split_gain': 0.1929832689490374, 'reg_alpha': 1.4635624662176638e-05, 'reg_lambda': 0.00011555631116093024, 'feature_fraction': 0.48794914094903397, 'bagging_fraction': 0.7666606981200899, 'bagging_freq': 0, 'min_child_samples': 38})
2024-05-21 14:55:10,062:INFO:Checking exceptions
2024-05-21 14:55:10,062:INFO:Importing libraries
2024-05-21 14:55:10,062:INFO:Copying training dataset
2024-05-21 14:55:10,327:INFO:Defining folds
2024-05-21 14:55:10,328:INFO:Declaring metric variables
2024-05-21 14:55:10,334:INFO:Importing untrained model
2024-05-21 14:55:10,334:INFO:Declaring custom model
2024-05-21 14:55:10,343:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:55:10,352:INFO:Starting cross validation
2024-05-21 14:55:10,355:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:55:23,979:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,001:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,027:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,193:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,232:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,416:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:24,437:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,033:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,051:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,226:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,236:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,277:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,283:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,371:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,388:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,458:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:25,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:26,555:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:26,571:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:26,587:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:26,630:INFO:Calculating mean and std
2024-05-21 14:55:26,633:INFO:Creating metrics dataframe
2024-05-21 14:55:26,646:INFO:Finalizing model
2024-05-21 14:55:26,785:INFO:[LightGBM] [Warning] feature_fraction is set=0.48794914094903397, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.48794914094903397
2024-05-21 14:55:26,785:INFO:[LightGBM] [Warning] bagging_fraction is set=0.7666606981200899, subsample=1.0 will be ignored. Current value: bagging_fraction=0.7666606981200899
2024-05-21 14:55:26,785:INFO:[LightGBM] [Warning] bagging_freq is set=0, subsample_freq=0 will be ignored. Current value: bagging_freq=0
2024-05-21 14:55:27,116:INFO:[LightGBM] [Warning] feature_fraction is set=0.48794914094903397, colsample_bytree=1.0 will be ignored. Current value: feature_fraction=0.48794914094903397
2024-05-21 14:55:27,117:INFO:[LightGBM] [Warning] bagging_fraction is set=0.7666606981200899, subsample=1.0 will be ignored. Current value: bagging_fraction=0.7666606981200899
2024-05-21 14:55:27,117:INFO:[LightGBM] [Warning] bagging_freq is set=0, subsample_freq=0 will be ignored. Current value: bagging_freq=0
2024-05-21 14:55:27,117:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:55:27,141:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021318 seconds.
2024-05-21 14:55:27,142:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:55:27,145:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:55:27,165:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:55:27,168:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:55:27,168:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:55:27,183:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,220:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,261:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,281:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,301:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,365:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,387:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,467:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,488:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,509:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,529:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,548:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,569:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,611:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,633:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,654:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,675:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,698:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,738:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,761:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,783:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,812:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,835:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,860:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,881:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,905:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,928:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,951:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,973:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:27,999:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,025:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,058:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,083:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,108:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,133:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,158:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,180:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,215:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,231:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,250:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,260:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,265:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,271:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,283:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,293:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,296:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,299:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,303:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,310:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,314:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,320:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,326:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,329:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,336:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,338:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,340:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,341:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,343:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,343:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,344:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,346:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,346:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,347:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,347:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,349:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,349:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,350:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,350:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,352:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,352:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,353:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,353:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,355:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,355:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,357:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,357:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,359:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,359:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,360:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,361:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,363:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,363:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,364:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,364:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,366:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,366:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,367:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,367:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,369:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,369:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,372:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,372:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,373:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,374:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,375:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,375:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,376:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,376:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,377:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,378:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,378:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,380:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,381:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,381:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,382:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,382:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,384:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,384:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,385:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,386:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,389:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,389:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,391:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,391:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,393:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,393:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,395:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,395:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,396:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,396:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,397:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,398:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,399:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,399:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,400:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,401:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,402:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,402:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,404:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,404:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,405:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,405:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,407:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,407:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,408:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,408:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,409:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,410:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,411:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,411:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,412:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,412:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,413:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,413:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,416:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,416:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,417:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,418:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,419:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,419:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,421:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,421:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,422:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,422:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,424:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,424:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,425:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,425:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,427:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,427:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,428:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,428:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,430:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,430:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,431:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,431:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,433:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,433:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,435:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,435:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,437:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,437:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,438:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,438:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,440:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,440:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,441:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,441:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,442:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,443:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,444:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,444:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,445:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,445:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,446:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,447:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,448:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,449:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,450:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,450:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,451:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,451:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,453:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,453:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,455:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,455:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,457:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,457:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,458:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,459:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,460:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,460:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,461:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,462:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,463:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,463:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,465:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,465:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,466:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,466:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,467:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,467:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,469:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,469:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,470:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,471:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,472:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,472:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,473:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,473:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,476:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,476:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,477:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,477:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,479:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,479:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,480:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,480:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,481:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,482:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,483:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,483:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,485:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,485:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,487:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,487:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,488:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,488:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,490:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,490:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,491:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,491:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,492:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,493:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,494:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,494:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,495:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,495:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,496:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,497:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,498:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,498:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,499:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,499:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,501:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,501:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,502:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,502:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,504:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,504:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,506:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,506:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,507:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,507:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,508:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,509:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,510:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,511:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,512:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,512:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,513:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,513:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,514:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,515:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,516:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,516:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,517:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,517:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,519:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,519:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,520:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,520:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,522:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,522:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,523:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,523:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,525:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,525:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,527:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,527:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,528:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,529:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,530:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,530:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,531:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,531:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,533:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,533:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,534:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,534:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,536:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,536:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,537:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,537:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,539:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,539:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,540:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,540:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,542:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,542:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,544:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,544:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,546:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,546:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,547:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,547:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,549:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,549:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,550:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,550:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,552:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,552:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,553:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,553:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,554:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,554:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,556:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,556:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,558:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,558:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,559:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,560:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,561:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,561:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,562:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,562:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,564:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,564:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,565:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,566:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,567:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,567:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,568:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,568:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,570:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,570:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,572:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,572:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,573:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,573:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,575:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,575:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,576:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,576:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,579:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,579:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,580:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,580:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,581:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,581:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,582:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,583:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,583:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,585:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,586:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,586:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,587:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,587:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,589:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,589:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,590:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,590:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,592:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,592:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,593:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,593:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,595:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,595:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,596:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,597:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,597:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,598:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,598:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,600:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2024-05-21 14:55:28,600:INFO:[LightGBM] [Warning] Stopped training because there are no more leaves that meet the split requirements
2024-05-21 14:55:28,655:INFO:Uploading results into container
2024-05-21 14:55:28,658:INFO:Uploading model into container now
2024-05-21 14:55:28,659:INFO:_master_model_container: 17
2024-05-21 14:55:28,659:INFO:_display_container: 5
2024-05-21 14:55:28,660:INFO:LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:55:28,660:INFO:create_model() successfully completed......................................
2024-05-21 14:55:28,819:INFO:SubProcess create_model() end ==================================
2024-05-21 14:55:28,819:INFO:choose_better activated
2024-05-21 14:55:28,824:INFO:SubProcess create_model() called ==================================
2024-05-21 14:55:28,826:INFO:Initializing create_model()
2024-05-21 14:55:28,826:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 14:55:28,826:INFO:Checking exceptions
2024-05-21 14:55:28,829:INFO:Importing libraries
2024-05-21 14:55:28,829:INFO:Copying training dataset
2024-05-21 14:55:29,120:INFO:Defining folds
2024-05-21 14:55:29,120:INFO:Declaring metric variables
2024-05-21 14:55:29,121:INFO:Importing untrained model
2024-05-21 14:55:29,121:INFO:Declaring custom model
2024-05-21 14:55:29,121:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 14:55:29,122:INFO:Starting cross validation
2024-05-21 14:55:29,124:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 14:55:48,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,399:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,403:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,425:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,427:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,428:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,621:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,646:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,680:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,681:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,720:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,799:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,922:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:48,941:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:49,548:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:49,564:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:49,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 14:55:49,620:INFO:Calculating mean and std
2024-05-21 14:55:49,622:INFO:Creating metrics dataframe
2024-05-21 14:55:49,626:INFO:Finalizing model
2024-05-21 14:55:50,083:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 14:55:50,109:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025644 seconds.
2024-05-21 14:55:50,109:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 14:55:50,113:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 14:55:50,117:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 14:55:50,120:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 14:55:50,120:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 14:55:51,557:INFO:Uploading results into container
2024-05-21 14:55:51,559:INFO:Uploading model into container now
2024-05-21 14:55:51,559:INFO:_master_model_container: 18
2024-05-21 14:55:51,559:INFO:_display_container: 6
2024-05-21 14:55:51,560:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:55:51,560:INFO:create_model() successfully completed......................................
2024-05-21 14:55:51,714:INFO:SubProcess create_model() end ==================================
2024-05-21 14:55:51,716:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9554
2024-05-21 14:55:51,717:INFO:LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) result for Accuracy is 0.9557
2024-05-21 14:55:51,718:INFO:LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) is best model
2024-05-21 14:55:51,718:INFO:choose_better completed
2024-05-21 14:55:51,733:INFO:_master_model_container: 18
2024-05-21 14:55:51,733:INFO:_display_container: 5
2024-05-21 14:55:51,733:INFO:LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 14:55:51,733:INFO:tune_model() successfully completed......................................
2024-05-21 14:55:52,261:INFO:Initializing predict_model()
2024-05-21 14:55:52,261:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000255D6A888B0>)
2024-05-21 14:55:52,261:INFO:Checking exceptions
2024-05-21 14:55:52,261:INFO:Preloading libraries
2024-05-21 14:55:52,263:INFO:Set up data.
2024-05-21 15:02:11,945:INFO:Initializing predict_model()
2024-05-21 15:02:11,945:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000255DDC0A7A0>, estimator=LGBMClassifier(bagging_fraction=0.7666606981200899, bagging_freq=0,
               boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               feature_fraction=0.48794914094903397, importance_type='split',
               learning_rate=0.11781435709290228, max_depth=-1,
               min_child_samples=38, min_child_weight=0.001,
               min_split_gain=0.1929832689490374, n_estimators=239, n_jobs=-1,
               num_leaves=157, objective=None, random_state=123,
               reg_alpha=1.4635624662176638e-05,
               reg_lambda=0.00011555631116093024, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000255D6AC4940>)
2024-05-21 15:02:11,946:INFO:Checking exceptions
2024-05-21 15:02:11,946:INFO:Preloading libraries
2024-05-21 15:02:11,949:INFO:Set up data.
2024-05-21 15:02:12,103:INFO:Set up index.
2024-05-21 15:02:12,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 15:02:12,361:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 15:02:12,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:08:41,569:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 18:08:41,589:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 18:08:41,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 18:08:41,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-05-21 18:08:48,522:INFO:PyCaret ClassificationExperiment
2024-05-21 18:08:48,522:INFO:Logging name: clf-default-name
2024-05-21 18:08:48,522:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 18:08:48,522:INFO:version 3.3.2
2024-05-21 18:08:48,522:INFO:Initializing setup()
2024-05-21 18:08:48,522:INFO:self.USI: ccf5
2024-05-21 18:08:48,522:INFO:self._variable_keys: {'_available_plots', '_ml_usecase', 'log_plots_param', 'logging_param', 'y_test', 'fix_imbalance', 'fold_shuffle_param', 'memory', 'target_param', 'idx', 'X', 'gpu_n_jobs_param', 'data', 'y_train', 'fold_generator', 'USI', 'fold_groups_param', 'html_param', 'X_train', 'is_multiclass', 'exp_name_log', 'pipeline', 'y', 'exp_id', 'gpu_param', 'seed', 'X_test', 'n_jobs_param'}
2024-05-21 18:08:48,523:INFO:Checking environment
2024-05-21 18:08:48,523:INFO:python_version: 3.10.0
2024-05-21 18:08:48,523:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 18:08:48,523:INFO:machine: AMD64
2024-05-21 18:08:48,523:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 18:08:48,530:INFO:Memory: svmem(total=16993001472, available=4498472960, percent=73.5, used=12494528512, free=4498472960)
2024-05-21 18:08:48,530:INFO:Physical Core: 6
2024-05-21 18:08:48,530:INFO:Logical Core: 12
2024-05-21 18:08:48,530:INFO:Checking libraries
2024-05-21 18:08:48,530:INFO:System:
2024-05-21 18:08:48,530:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 18:08:48,530:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 18:08:48,530:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 18:08:48,530:INFO:PyCaret required dependencies:
2024-05-21 18:08:48,751:INFO:                 pip: 24.0
2024-05-21 18:08:48,751:INFO:          setuptools: 57.4.0
2024-05-21 18:08:48,751:INFO:             pycaret: 3.3.2
2024-05-21 18:08:48,751:INFO:             IPython: 8.23.0
2024-05-21 18:08:48,752:INFO:          ipywidgets: 8.1.2
2024-05-21 18:08:48,752:INFO:                tqdm: 4.66.2
2024-05-21 18:08:48,752:INFO:               numpy: 1.26.3
2024-05-21 18:08:48,752:INFO:              pandas: 2.1.4
2024-05-21 18:08:48,752:INFO:              jinja2: 3.1.2
2024-05-21 18:08:48,752:INFO:               scipy: 1.11.4
2024-05-21 18:08:48,752:INFO:              joblib: 1.3.2
2024-05-21 18:08:48,752:INFO:             sklearn: 1.4.2
2024-05-21 18:08:48,752:INFO:                pyod: 1.1.3
2024-05-21 18:08:48,752:INFO:            imblearn: 0.12.2
2024-05-21 18:08:48,752:INFO:   category_encoders: 2.6.3
2024-05-21 18:08:48,752:INFO:            lightgbm: 4.3.0
2024-05-21 18:08:48,752:INFO:               numba: 0.59.1
2024-05-21 18:08:48,752:INFO:            requests: 2.31.0
2024-05-21 18:08:48,752:INFO:          matplotlib: 3.7.5
2024-05-21 18:08:48,752:INFO:          scikitplot: 0.3.7
2024-05-21 18:08:48,752:INFO:         yellowbrick: 1.5
2024-05-21 18:08:48,752:INFO:              plotly: 5.22.0
2024-05-21 18:08:48,753:INFO:    plotly-resampler: Not installed
2024-05-21 18:08:48,753:INFO:             kaleido: 0.2.1
2024-05-21 18:08:48,753:INFO:           schemdraw: 0.15
2024-05-21 18:08:48,753:INFO:         statsmodels: 0.14.2
2024-05-21 18:08:48,753:INFO:              sktime: 0.26.0
2024-05-21 18:08:48,753:INFO:               tbats: 1.1.3
2024-05-21 18:08:48,753:INFO:            pmdarima: 2.0.4
2024-05-21 18:08:48,753:INFO:              psutil: 5.9.8
2024-05-21 18:08:48,753:INFO:          markupsafe: 2.1.3
2024-05-21 18:08:48,753:INFO:             pickle5: Not installed
2024-05-21 18:08:48,753:INFO:         cloudpickle: 3.0.0
2024-05-21 18:08:48,753:INFO:         deprecation: 2.1.0
2024-05-21 18:08:48,753:INFO:              xxhash: 3.4.1
2024-05-21 18:08:48,754:INFO:           wurlitzer: Not installed
2024-05-21 18:08:48,754:INFO:PyCaret optional dependencies:
2024-05-21 18:08:52,160:INFO:                shap: Not installed
2024-05-21 18:08:52,160:INFO:           interpret: Not installed
2024-05-21 18:08:52,160:INFO:                umap: Not installed
2024-05-21 18:08:52,160:INFO:     ydata_profiling: Not installed
2024-05-21 18:08:52,160:INFO:  explainerdashboard: Not installed
2024-05-21 18:08:52,160:INFO:             autoviz: Not installed
2024-05-21 18:08:52,160:INFO:           fairlearn: Not installed
2024-05-21 18:08:52,160:INFO:          deepchecks: Not installed
2024-05-21 18:08:52,160:INFO:             xgboost: 2.0.3
2024-05-21 18:08:52,160:INFO:            catboost: Not installed
2024-05-21 18:08:52,160:INFO:              kmodes: Not installed
2024-05-21 18:08:52,160:INFO:             mlxtend: Not installed
2024-05-21 18:08:52,160:INFO:       statsforecast: Not installed
2024-05-21 18:08:52,160:INFO:        tune_sklearn: Not installed
2024-05-21 18:08:52,160:INFO:                 ray: Not installed
2024-05-21 18:08:52,160:INFO:            hyperopt: Not installed
2024-05-21 18:08:52,160:INFO:              optuna: 3.6.1
2024-05-21 18:08:52,160:INFO:               skopt: Not installed
2024-05-21 18:08:52,160:INFO:              mlflow: 2.13.0
2024-05-21 18:08:52,160:INFO:              gradio: 4.31.4
2024-05-21 18:08:52,160:INFO:             fastapi: 0.111.0
2024-05-21 18:08:52,160:INFO:             uvicorn: 0.29.0
2024-05-21 18:08:52,160:INFO:              m2cgen: 0.10.0
2024-05-21 18:08:52,160:INFO:           evidently: 0.4.23
2024-05-21 18:08:52,160:INFO:               fugue: Not installed
2024-05-21 18:08:52,161:INFO:           streamlit: Not installed
2024-05-21 18:08:52,161:INFO:             prophet: Not installed
2024-05-21 18:08:52,161:INFO:None
2024-05-21 18:08:52,161:INFO:Set up data.
2024-05-21 18:08:52,363:INFO:Set up folding strategy.
2024-05-21 18:08:52,363:INFO:Set up train/test split.
2024-05-21 18:08:52,707:INFO:Set up index.
2024-05-21 18:08:52,713:INFO:Assigning column types.
2024-05-21 18:08:52,962:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 18:08:53,023:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,028:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,077:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,141:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,142:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,180:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,183:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,184:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 18:08:53,245:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,282:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,286:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,347:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:08:53,386:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,390:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,390:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 18:08:53,491:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,594:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:53,597:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:53,600:INFO:Preparing preprocessing pipeline...
2024-05-21 18:08:53,634:INFO:Set up label encoding.
2024-05-21 18:08:53,634:INFO:Set up simple imputation.
2024-05-21 18:08:54,091:INFO:Finished creating preprocessing pipeline.
2024-05-21 18:08:54,100:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 18:08:54,100:INFO:Creating final display dataframe.
2024-05-21 18:08:55,237:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              ccf5
2024-05-21 18:08:55,345:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:55,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:55,457:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:08:55,462:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:08:55,463:INFO:setup() successfully completed in 6.95s...............
2024-05-21 18:09:06,480:INFO:PyCaret ClassificationExperiment
2024-05-21 18:09:06,480:INFO:Logging name: clf-default-name
2024-05-21 18:09:06,480:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-05-21 18:09:06,480:INFO:version 3.3.2
2024-05-21 18:09:06,480:INFO:Initializing setup()
2024-05-21 18:09:06,480:INFO:self.USI: 83ef
2024-05-21 18:09:06,480:INFO:self._variable_keys: {'_available_plots', '_ml_usecase', 'log_plots_param', 'logging_param', 'y_test', 'fix_imbalance', 'fold_shuffle_param', 'memory', 'target_param', 'idx', 'X', 'gpu_n_jobs_param', 'data', 'y_train', 'fold_generator', 'USI', 'fold_groups_param', 'html_param', 'X_train', 'is_multiclass', 'exp_name_log', 'pipeline', 'y', 'exp_id', 'gpu_param', 'seed', 'X_test', 'n_jobs_param'}
2024-05-21 18:09:06,480:INFO:Checking environment
2024-05-21 18:09:06,480:INFO:python_version: 3.10.0
2024-05-21 18:09:06,480:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-05-21 18:09:06,480:INFO:machine: AMD64
2024-05-21 18:09:06,480:INFO:platform: Windows-10-10.0.22631-SP0
2024-05-21 18:09:06,487:INFO:Memory: svmem(total=16993001472, available=4502163456, percent=73.5, used=12490838016, free=4502163456)
2024-05-21 18:09:06,487:INFO:Physical Core: 6
2024-05-21 18:09:06,487:INFO:Logical Core: 12
2024-05-21 18:09:06,487:INFO:Checking libraries
2024-05-21 18:09:06,487:INFO:System:
2024-05-21 18:09:06,488:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-05-21 18:09:06,488:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-05-21 18:09:06,488:INFO:   machine: Windows-10-10.0.22631-SP0
2024-05-21 18:09:06,488:INFO:PyCaret required dependencies:
2024-05-21 18:09:06,488:INFO:                 pip: 24.0
2024-05-21 18:09:06,488:INFO:          setuptools: 57.4.0
2024-05-21 18:09:06,488:INFO:             pycaret: 3.3.2
2024-05-21 18:09:06,488:INFO:             IPython: 8.23.0
2024-05-21 18:09:06,488:INFO:          ipywidgets: 8.1.2
2024-05-21 18:09:06,488:INFO:                tqdm: 4.66.2
2024-05-21 18:09:06,488:INFO:               numpy: 1.26.3
2024-05-21 18:09:06,488:INFO:              pandas: 2.1.4
2024-05-21 18:09:06,488:INFO:              jinja2: 3.1.2
2024-05-21 18:09:06,488:INFO:               scipy: 1.11.4
2024-05-21 18:09:06,488:INFO:              joblib: 1.3.2
2024-05-21 18:09:06,488:INFO:             sklearn: 1.4.2
2024-05-21 18:09:06,488:INFO:                pyod: 1.1.3
2024-05-21 18:09:06,488:INFO:            imblearn: 0.12.2
2024-05-21 18:09:06,488:INFO:   category_encoders: 2.6.3
2024-05-21 18:09:06,488:INFO:            lightgbm: 4.3.0
2024-05-21 18:09:06,488:INFO:               numba: 0.59.1
2024-05-21 18:09:06,488:INFO:            requests: 2.31.0
2024-05-21 18:09:06,488:INFO:          matplotlib: 3.7.5
2024-05-21 18:09:06,488:INFO:          scikitplot: 0.3.7
2024-05-21 18:09:06,488:INFO:         yellowbrick: 1.5
2024-05-21 18:09:06,490:INFO:              plotly: 5.22.0
2024-05-21 18:09:06,490:INFO:    plotly-resampler: Not installed
2024-05-21 18:09:06,490:INFO:             kaleido: 0.2.1
2024-05-21 18:09:06,490:INFO:           schemdraw: 0.15
2024-05-21 18:09:06,490:INFO:         statsmodels: 0.14.2
2024-05-21 18:09:06,490:INFO:              sktime: 0.26.0
2024-05-21 18:09:06,490:INFO:               tbats: 1.1.3
2024-05-21 18:09:06,490:INFO:            pmdarima: 2.0.4
2024-05-21 18:09:06,490:INFO:              psutil: 5.9.8
2024-05-21 18:09:06,490:INFO:          markupsafe: 2.1.3
2024-05-21 18:09:06,490:INFO:             pickle5: Not installed
2024-05-21 18:09:06,490:INFO:         cloudpickle: 3.0.0
2024-05-21 18:09:06,490:INFO:         deprecation: 2.1.0
2024-05-21 18:09:06,490:INFO:              xxhash: 3.4.1
2024-05-21 18:09:06,490:INFO:           wurlitzer: Not installed
2024-05-21 18:09:06,490:INFO:PyCaret optional dependencies:
2024-05-21 18:09:06,490:INFO:                shap: Not installed
2024-05-21 18:09:06,490:INFO:           interpret: Not installed
2024-05-21 18:09:06,490:INFO:                umap: Not installed
2024-05-21 18:09:06,490:INFO:     ydata_profiling: Not installed
2024-05-21 18:09:06,490:INFO:  explainerdashboard: Not installed
2024-05-21 18:09:06,490:INFO:             autoviz: Not installed
2024-05-21 18:09:06,490:INFO:           fairlearn: Not installed
2024-05-21 18:09:06,490:INFO:          deepchecks: Not installed
2024-05-21 18:09:06,491:INFO:             xgboost: 2.0.3
2024-05-21 18:09:06,491:INFO:            catboost: Not installed
2024-05-21 18:09:06,491:INFO:              kmodes: Not installed
2024-05-21 18:09:06,491:INFO:             mlxtend: Not installed
2024-05-21 18:09:06,491:INFO:       statsforecast: Not installed
2024-05-21 18:09:06,491:INFO:        tune_sklearn: Not installed
2024-05-21 18:09:06,491:INFO:                 ray: Not installed
2024-05-21 18:09:06,491:INFO:            hyperopt: Not installed
2024-05-21 18:09:06,491:INFO:              optuna: 3.6.1
2024-05-21 18:09:06,491:INFO:               skopt: Not installed
2024-05-21 18:09:06,491:INFO:              mlflow: 2.13.0
2024-05-21 18:09:06,491:INFO:              gradio: 4.31.4
2024-05-21 18:09:06,491:INFO:             fastapi: 0.111.0
2024-05-21 18:09:06,491:INFO:             uvicorn: 0.29.0
2024-05-21 18:09:06,491:INFO:              m2cgen: 0.10.0
2024-05-21 18:09:06,491:INFO:           evidently: 0.4.23
2024-05-21 18:09:06,491:INFO:               fugue: Not installed
2024-05-21 18:09:06,491:INFO:           streamlit: Not installed
2024-05-21 18:09:06,491:INFO:             prophet: Not installed
2024-05-21 18:09:06,492:INFO:None
2024-05-21 18:09:06,492:INFO:Set up data.
2024-05-21 18:09:06,668:INFO:Set up folding strategy.
2024-05-21 18:09:06,669:INFO:Set up train/test split.
2024-05-21 18:09:06,867:INFO:Set up index.
2024-05-21 18:09:06,872:INFO:Assigning column types.
2024-05-21 18:09:07,125:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-05-21 18:09:07,184:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,185:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,222:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,286:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,287:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,326:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,330:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,330:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-05-21 18:09:07,399:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,436:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,440:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,510:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-05-21 18:09:07,566:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,571:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,571:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-05-21 18:09:07,668:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,770:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:07,774:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:07,776:INFO:Preparing preprocessing pipeline...
2024-05-21 18:09:07,812:INFO:Set up label encoding.
2024-05-21 18:09:07,812:INFO:Set up simple imputation.
2024-05-21 18:09:08,348:INFO:Finished creating preprocessing pipeline.
2024-05-21 18:09:08,356:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-05-21 18:09:08,356:INFO:Creating final display dataframe.
2024-05-21 18:09:09,369:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape      (13959, 344)
7    Transformed test set shape        (142, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              83ef
2024-05-21 18:09:09,477:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:09,480:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:09,594:INFO:Soft dependency imported: xgboost: 2.0.3
2024-05-21 18:09:09,598:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-05-21 18:09:09,599:INFO:setup() successfully completed in 3.13s...............
2024-05-21 18:09:09,713:INFO:Initializing compare_models()
2024-05-21 18:09:09,714:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-05-21 18:09:09,714:INFO:Checking exceptions
2024-05-21 18:09:09,900:INFO:Preparing display monitor
2024-05-21 18:09:09,956:INFO:Initializing Logistic Regression
2024-05-21 18:09:09,957:INFO:Total runtime is 1.6669432322184246e-05 minutes
2024-05-21 18:09:09,965:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:09,966:INFO:Initializing create_model()
2024-05-21 18:09:09,966:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:09,966:INFO:Checking exceptions
2024-05-21 18:09:09,966:INFO:Importing libraries
2024-05-21 18:09:09,967:INFO:Copying training dataset
2024-05-21 18:09:10,263:INFO:Defining folds
2024-05-21 18:09:10,263:INFO:Declaring metric variables
2024-05-21 18:09:10,270:INFO:Importing untrained model
2024-05-21 18:09:10,278:INFO:Logistic Regression Imported successfully
2024-05-21 18:09:10,289:INFO:Starting cross validation
2024-05-21 18:09:10,291:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:17,212:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,249:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,258:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,266:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,270:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,286:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,295:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,454:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,469:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,478:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,577:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,603:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,610:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,639:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,654:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,663:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,753:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,763:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,918:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,929:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,934:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,948:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,959:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:17,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:17,968:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,003:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,012:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:18,023:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,055:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,065:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:18,073:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:18,093:INFO:Calculating mean and std
2024-05-21 18:09:18,095:INFO:Creating metrics dataframe
2024-05-21 18:09:18,098:INFO:Uploading results into container
2024-05-21 18:09:18,099:INFO:Uploading model into container now
2024-05-21 18:09:18,100:INFO:_master_model_container: 1
2024-05-21 18:09:18,100:INFO:_display_container: 2
2024-05-21 18:09:18,100:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-05-21 18:09:18,100:INFO:create_model() successfully completed......................................
2024-05-21 18:09:18,222:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:18,222:INFO:Creating metrics dataframe
2024-05-21 18:09:18,230:INFO:Initializing K Neighbors Classifier
2024-05-21 18:09:18,230:INFO:Total runtime is 0.13788510958353678 minutes
2024-05-21 18:09:18,234:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:18,234:INFO:Initializing create_model()
2024-05-21 18:09:18,234:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:18,234:INFO:Checking exceptions
2024-05-21 18:09:18,235:INFO:Importing libraries
2024-05-21 18:09:18,235:INFO:Copying training dataset
2024-05-21 18:09:18,482:INFO:Defining folds
2024-05-21 18:09:18,482:INFO:Declaring metric variables
2024-05-21 18:09:18,487:INFO:Importing untrained model
2024-05-21 18:09:18,492:INFO:K Neighbors Classifier Imported successfully
2024-05-21 18:09:18,503:INFO:Starting cross validation
2024-05-21 18:09:18,506:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:20,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,313:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,327:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,342:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,358:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,463:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,491:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,505:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,572:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,582:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,656:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,668:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,678:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,731:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,778:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,787:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,864:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,873:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:20,882:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,314:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,323:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,333:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,373:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,382:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:23,403:INFO:Calculating mean and std
2024-05-21 18:09:23,405:INFO:Creating metrics dataframe
2024-05-21 18:09:23,407:INFO:Uploading results into container
2024-05-21 18:09:23,409:INFO:Uploading model into container now
2024-05-21 18:09:23,409:INFO:_master_model_container: 2
2024-05-21 18:09:23,409:INFO:_display_container: 2
2024-05-21 18:09:23,410:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-05-21 18:09:23,410:INFO:create_model() successfully completed......................................
2024-05-21 18:09:23,528:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:23,528:INFO:Creating metrics dataframe
2024-05-21 18:09:23,537:INFO:Initializing Naive Bayes
2024-05-21 18:09:23,537:INFO:Total runtime is 0.22634388208389283 minutes
2024-05-21 18:09:23,541:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:23,541:INFO:Initializing create_model()
2024-05-21 18:09:23,542:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:23,542:INFO:Checking exceptions
2024-05-21 18:09:23,542:INFO:Importing libraries
2024-05-21 18:09:23,542:INFO:Copying training dataset
2024-05-21 18:09:23,784:INFO:Defining folds
2024-05-21 18:09:23,785:INFO:Declaring metric variables
2024-05-21 18:09:23,789:INFO:Importing untrained model
2024-05-21 18:09:23,794:INFO:Naive Bayes Imported successfully
2024-05-21 18:09:23,803:INFO:Starting cross validation
2024-05-21 18:09:23,805:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:24,204:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,213:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,223:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,287:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,297:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,381:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,391:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,401:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,498:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,580:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,589:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,682:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,701:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,750:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,840:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,855:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,920:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,969:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,978:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:24,986:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:25,012:INFO:Calculating mean and std
2024-05-21 18:09:25,014:INFO:Creating metrics dataframe
2024-05-21 18:09:25,016:INFO:Uploading results into container
2024-05-21 18:09:25,017:INFO:Uploading model into container now
2024-05-21 18:09:25,018:INFO:_master_model_container: 3
2024-05-21 18:09:25,018:INFO:_display_container: 2
2024-05-21 18:09:25,018:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-05-21 18:09:25,018:INFO:create_model() successfully completed......................................
2024-05-21 18:09:25,122:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:25,123:INFO:Creating metrics dataframe
2024-05-21 18:09:25,133:INFO:Initializing Decision Tree Classifier
2024-05-21 18:09:25,133:INFO:Total runtime is 0.25294106801350913 minutes
2024-05-21 18:09:25,137:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:25,137:INFO:Initializing create_model()
2024-05-21 18:09:25,138:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:25,138:INFO:Checking exceptions
2024-05-21 18:09:25,138:INFO:Importing libraries
2024-05-21 18:09:25,138:INFO:Copying training dataset
2024-05-21 18:09:25,363:INFO:Defining folds
2024-05-21 18:09:25,363:INFO:Declaring metric variables
2024-05-21 18:09:25,368:INFO:Importing untrained model
2024-05-21 18:09:25,372:INFO:Decision Tree Classifier Imported successfully
2024-05-21 18:09:25,380:INFO:Starting cross validation
2024-05-21 18:09:25,383:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:26,096:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,112:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,120:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,127:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,223:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,235:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,240:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,339:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,354:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,363:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,370:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,386:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,400:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,415:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,510:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,533:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,568:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,573:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,578:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,628:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,647:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,760:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,770:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,775:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,779:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,822:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,830:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,904:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,909:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:26,913:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:26,932:INFO:Calculating mean and std
2024-05-21 18:09:26,933:INFO:Creating metrics dataframe
2024-05-21 18:09:26,936:INFO:Uploading results into container
2024-05-21 18:09:26,937:INFO:Uploading model into container now
2024-05-21 18:09:26,937:INFO:_master_model_container: 4
2024-05-21 18:09:26,938:INFO:_display_container: 2
2024-05-21 18:09:26,938:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2024-05-21 18:09:26,938:INFO:create_model() successfully completed......................................
2024-05-21 18:09:27,042:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:27,042:INFO:Creating metrics dataframe
2024-05-21 18:09:27,053:INFO:Initializing SVM - Linear Kernel
2024-05-21 18:09:27,053:INFO:Total runtime is 0.2849351763725281 minutes
2024-05-21 18:09:27,058:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:27,058:INFO:Initializing create_model()
2024-05-21 18:09:27,058:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:27,058:INFO:Checking exceptions
2024-05-21 18:09:27,059:INFO:Importing libraries
2024-05-21 18:09:27,059:INFO:Copying training dataset
2024-05-21 18:09:27,290:INFO:Defining folds
2024-05-21 18:09:27,296:INFO:Declaring metric variables
2024-05-21 18:09:27,300:INFO:Importing untrained model
2024-05-21 18:09:27,306:INFO:SVM - Linear Kernel Imported successfully
2024-05-21 18:09:27,315:INFO:Starting cross validation
2024-05-21 18:09:27,318:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:28,138:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,155:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,164:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,172:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,219:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,234:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,244:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,252:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,285:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,301:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,310:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,317:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,420:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,429:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,437:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,512:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,525:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,533:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,539:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,575:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,585:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,590:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,595:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,683:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,689:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,693:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,740:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,750:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,754:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,758:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,833:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,838:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,897:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,910:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:28,915:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:28,937:INFO:Calculating mean and std
2024-05-21 18:09:28,939:INFO:Creating metrics dataframe
2024-05-21 18:09:28,940:INFO:Uploading results into container
2024-05-21 18:09:28,941:INFO:Uploading model into container now
2024-05-21 18:09:28,942:INFO:_master_model_container: 5
2024-05-21 18:09:28,942:INFO:_display_container: 2
2024-05-21 18:09:28,942:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-05-21 18:09:28,942:INFO:create_model() successfully completed......................................
2024-05-21 18:09:29,053:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:29,053:INFO:Creating metrics dataframe
2024-05-21 18:09:29,064:INFO:Initializing Ridge Classifier
2024-05-21 18:09:29,064:INFO:Total runtime is 0.318456768989563 minutes
2024-05-21 18:09:29,069:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:29,069:INFO:Initializing create_model()
2024-05-21 18:09:29,069:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:29,069:INFO:Checking exceptions
2024-05-21 18:09:29,069:INFO:Importing libraries
2024-05-21 18:09:29,070:INFO:Copying training dataset
2024-05-21 18:09:29,318:INFO:Defining folds
2024-05-21 18:09:29,319:INFO:Declaring metric variables
2024-05-21 18:09:29,324:INFO:Importing untrained model
2024-05-21 18:09:29,329:INFO:Ridge Classifier Imported successfully
2024-05-21 18:09:29,338:INFO:Starting cross validation
2024-05-21 18:09:29,340:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:29,930:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:29,945:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:29,953:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:29,961:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:29,998:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,030:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,037:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,104:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,114:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,121:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,190:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,206:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,280:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,290:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,300:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,308:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,371:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,385:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,390:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,396:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,498:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,514:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,519:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,595:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,606:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,614:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,679:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,692:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,702:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,758:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,763:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:30,767:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:30,788:INFO:Calculating mean and std
2024-05-21 18:09:30,789:INFO:Creating metrics dataframe
2024-05-21 18:09:30,792:INFO:Uploading results into container
2024-05-21 18:09:30,792:INFO:Uploading model into container now
2024-05-21 18:09:30,793:INFO:_master_model_container: 6
2024-05-21 18:09:30,793:INFO:_display_container: 2
2024-05-21 18:09:30,794:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2024-05-21 18:09:30,794:INFO:create_model() successfully completed......................................
2024-05-21 18:09:30,906:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:30,906:INFO:Creating metrics dataframe
2024-05-21 18:09:30,919:INFO:Initializing Random Forest Classifier
2024-05-21 18:09:30,919:INFO:Total runtime is 0.34937342405319216 minutes
2024-05-21 18:09:30,923:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:30,924:INFO:Initializing create_model()
2024-05-21 18:09:30,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:30,924:INFO:Checking exceptions
2024-05-21 18:09:30,925:INFO:Importing libraries
2024-05-21 18:09:30,925:INFO:Copying training dataset
2024-05-21 18:09:31,162:INFO:Defining folds
2024-05-21 18:09:31,162:INFO:Declaring metric variables
2024-05-21 18:09:31,167:INFO:Importing untrained model
2024-05-21 18:09:31,173:INFO:Random Forest Classifier Imported successfully
2024-05-21 18:09:31,182:INFO:Starting cross validation
2024-05-21 18:09:31,184:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:55,241:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:55,259:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:55,436:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:55,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,527:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,551:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,552:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,558:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,567:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,584:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,588:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,604:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,633:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,634:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,635:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,645:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,649:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,651:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,653:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,728:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,734:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,744:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,776:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,784:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:56,788:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:56,822:INFO:Calculating mean and std
2024-05-21 18:09:56,824:INFO:Creating metrics dataframe
2024-05-21 18:09:56,827:INFO:Uploading results into container
2024-05-21 18:09:56,828:INFO:Uploading model into container now
2024-05-21 18:09:56,828:INFO:_master_model_container: 7
2024-05-21 18:09:56,829:INFO:_display_container: 2
2024-05-21 18:09:56,829:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2024-05-21 18:09:56,829:INFO:create_model() successfully completed......................................
2024-05-21 18:09:56,947:INFO:SubProcess create_model() end ==================================
2024-05-21 18:09:56,947:INFO:Creating metrics dataframe
2024-05-21 18:09:56,960:INFO:Initializing Quadratic Discriminant Analysis
2024-05-21 18:09:56,960:INFO:Total runtime is 0.7833917776743571 minutes
2024-05-21 18:09:56,964:INFO:SubProcess create_model() called ==================================
2024-05-21 18:09:56,964:INFO:Initializing create_model()
2024-05-21 18:09:56,964:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:09:56,964:INFO:Checking exceptions
2024-05-21 18:09:56,964:INFO:Importing libraries
2024-05-21 18:09:56,965:INFO:Copying training dataset
2024-05-21 18:09:57,210:INFO:Defining folds
2024-05-21 18:09:57,210:INFO:Declaring metric variables
2024-05-21 18:09:57,216:INFO:Importing untrained model
2024-05-21 18:09:57,220:INFO:Quadratic Discriminant Analysis Imported successfully
2024-05-21 18:09:57,229:INFO:Starting cross validation
2024-05-21 18:09:57,232:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:09:58,262:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:58,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:58,459:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:58,753:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:58,874:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:58,925:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:58,932:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:58,973:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:58,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:58,990:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,013:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,031:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,039:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,039:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,053:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,056:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,066:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,095:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,122:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,135:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,143:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,161:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:59,164:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,175:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,186:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,200:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:59,274:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,292:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,307:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,339:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,346:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,361:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,364:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,375:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,380:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,383:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,395:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,416:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,427:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,434:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,444:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:59,452:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,461:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,469:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,541:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:59,583:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,596:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,600:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,627:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,636:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,637:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,638:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-05-21 18:09:59,641:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,654:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,662:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,665:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,670:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,695:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,699:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,754:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,766:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,774:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,785:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,792:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,796:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,806:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,814:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,854:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,860:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,864:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,873:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,884:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,911:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,919:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-05-21 18:09:59,934:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-05-21 18:09:59,943:WARNING:d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "d:\projects\research\.venv\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "d:\projects\research\.venv\lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-05-21 18:09:59,947:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,956:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:09:59,964:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:09:59,971:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:00,007:INFO:Calculating mean and std
2024-05-21 18:10:00,009:INFO:Creating metrics dataframe
2024-05-21 18:10:00,011:INFO:Uploading results into container
2024-05-21 18:10:00,012:INFO:Uploading model into container now
2024-05-21 18:10:00,013:INFO:_master_model_container: 8
2024-05-21 18:10:00,013:INFO:_display_container: 2
2024-05-21 18:10:00,013:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-05-21 18:10:00,014:INFO:create_model() successfully completed......................................
2024-05-21 18:10:00,130:INFO:SubProcess create_model() end ==================================
2024-05-21 18:10:00,130:INFO:Creating metrics dataframe
2024-05-21 18:10:00,141:INFO:Initializing Ada Boost Classifier
2024-05-21 18:10:00,143:INFO:Total runtime is 0.8364375233650208 minutes
2024-05-21 18:10:00,147:INFO:SubProcess create_model() called ==================================
2024-05-21 18:10:00,147:INFO:Initializing create_model()
2024-05-21 18:10:00,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:10:00,148:INFO:Checking exceptions
2024-05-21 18:10:00,148:INFO:Importing libraries
2024-05-21 18:10:00,148:INFO:Copying training dataset
2024-05-21 18:10:00,399:INFO:Defining folds
2024-05-21 18:10:00,399:INFO:Declaring metric variables
2024-05-21 18:10:00,403:INFO:Importing untrained model
2024-05-21 18:10:00,408:INFO:Ada Boost Classifier Imported successfully
2024-05-21 18:10:00,418:INFO:Starting cross validation
2024-05-21 18:10:00,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:10:00,732:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:00,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:00,870:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:00,967:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,062:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,153:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,231:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,332:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:01,497:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-05-21 18:10:23,318:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,336:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,348:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,356:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,408:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,423:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,456:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,475:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,480:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,486:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,490:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,506:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,551:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,566:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,697:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,706:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,716:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,722:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,756:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,759:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,765:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:23,770:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:23,777:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,036:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:24,047:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,049:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,063:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:10:24,067:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:10:24,086:INFO:Calculating mean and std
2024-05-21 18:10:24,087:INFO:Creating metrics dataframe
2024-05-21 18:10:24,090:INFO:Uploading results into container
2024-05-21 18:10:24,091:INFO:Uploading model into container now
2024-05-21 18:10:24,091:INFO:_master_model_container: 9
2024-05-21 18:10:24,091:INFO:_display_container: 2
2024-05-21 18:10:24,092:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2024-05-21 18:10:24,092:INFO:create_model() successfully completed......................................
2024-05-21 18:10:24,227:INFO:SubProcess create_model() end ==================================
2024-05-21 18:10:24,228:INFO:Creating metrics dataframe
2024-05-21 18:10:24,240:INFO:Initializing Gradient Boosting Classifier
2024-05-21 18:10:24,240:INFO:Total runtime is 1.2380524118741354 minutes
2024-05-21 18:10:24,245:INFO:SubProcess create_model() called ==================================
2024-05-21 18:10:24,246:INFO:Initializing create_model()
2024-05-21 18:10:24,246:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:10:24,246:INFO:Checking exceptions
2024-05-21 18:10:24,246:INFO:Importing libraries
2024-05-21 18:10:24,246:INFO:Copying training dataset
2024-05-21 18:10:24,488:INFO:Defining folds
2024-05-21 18:10:24,488:INFO:Declaring metric variables
2024-05-21 18:10:24,493:INFO:Importing untrained model
2024-05-21 18:10:24,498:INFO:Gradient Boosting Classifier Imported successfully
2024-05-21 18:10:24,507:INFO:Starting cross validation
2024-05-21 18:10:24,510:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:09,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,480:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,502:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:09,509:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,597:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,612:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,621:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:09,640:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,723:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,764:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:09,771:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,791:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,807:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:09,815:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:09,821:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,002:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,018:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,025:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,040:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,041:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,048:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,057:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,064:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,118:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,162:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,275:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,291:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,302:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,309:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,321:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,331:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,336:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,341:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,474:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,488:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,499:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:10,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:10,532:INFO:Calculating mean and std
2024-05-21 18:11:10,534:INFO:Creating metrics dataframe
2024-05-21 18:11:10,536:INFO:Uploading results into container
2024-05-21 18:11:10,537:INFO:Uploading model into container now
2024-05-21 18:11:10,537:INFO:_master_model_container: 10
2024-05-21 18:11:10,538:INFO:_display_container: 2
2024-05-21 18:11:10,538:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-05-21 18:11:10,538:INFO:create_model() successfully completed......................................
2024-05-21 18:11:10,645:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:10,645:INFO:Creating metrics dataframe
2024-05-21 18:11:10,658:INFO:Initializing Linear Discriminant Analysis
2024-05-21 18:11:10,659:INFO:Total runtime is 2.0117064237594606 minutes
2024-05-21 18:11:10,662:INFO:SubProcess create_model() called ==================================
2024-05-21 18:11:10,663:INFO:Initializing create_model()
2024-05-21 18:11:10,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:10,663:INFO:Checking exceptions
2024-05-21 18:11:10,663:INFO:Importing libraries
2024-05-21 18:11:10,663:INFO:Copying training dataset
2024-05-21 18:11:10,899:INFO:Defining folds
2024-05-21 18:11:10,899:INFO:Declaring metric variables
2024-05-21 18:11:10,904:INFO:Importing untrained model
2024-05-21 18:11:10,909:INFO:Linear Discriminant Analysis Imported successfully
2024-05-21 18:11:10,918:INFO:Starting cross validation
2024-05-21 18:11:10,920:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:11,818:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:11,835:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:11,852:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:11,921:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:11,939:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:11,957:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,040:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,058:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,075:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,178:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,195:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,214:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,255:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,271:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,283:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,376:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,388:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,405:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,453:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,466:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,476:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,506:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,522:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,538:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,642:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,660:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,713:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,721:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:12,759:INFO:Calculating mean and std
2024-05-21 18:11:12,761:INFO:Creating metrics dataframe
2024-05-21 18:11:12,763:INFO:Uploading results into container
2024-05-21 18:11:12,764:INFO:Uploading model into container now
2024-05-21 18:11:12,765:INFO:_master_model_container: 11
2024-05-21 18:11:12,765:INFO:_display_container: 2
2024-05-21 18:11:12,766:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-05-21 18:11:12,766:INFO:create_model() successfully completed......................................
2024-05-21 18:11:12,868:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:12,869:INFO:Creating metrics dataframe
2024-05-21 18:11:12,881:INFO:Initializing Extra Trees Classifier
2024-05-21 18:11:12,881:INFO:Total runtime is 2.0487444162368775 minutes
2024-05-21 18:11:12,886:INFO:SubProcess create_model() called ==================================
2024-05-21 18:11:12,886:INFO:Initializing create_model()
2024-05-21 18:11:12,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:12,887:INFO:Checking exceptions
2024-05-21 18:11:12,887:INFO:Importing libraries
2024-05-21 18:11:12,887:INFO:Copying training dataset
2024-05-21 18:11:13,110:INFO:Defining folds
2024-05-21 18:11:13,110:INFO:Declaring metric variables
2024-05-21 18:11:13,115:INFO:Importing untrained model
2024-05-21 18:11:13,120:INFO:Extra Trees Classifier Imported successfully
2024-05-21 18:11:13,129:INFO:Starting cross validation
2024-05-21 18:11:13,131:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:14,069:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,094:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,125:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:14,147:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,592:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,608:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,619:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:14,655:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,693:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,712:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:14,747:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,849:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,867:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,868:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,883:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,905:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:14,906:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:14,913:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:14,914:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,082:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,099:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,121:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:15,133:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,157:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,183:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:15,192:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,489:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,498:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:15,507:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,541:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,549:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,554:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:15,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,584:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,594:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:15,603:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:15,623:INFO:Calculating mean and std
2024-05-21 18:11:15,625:INFO:Creating metrics dataframe
2024-05-21 18:11:15,627:INFO:Uploading results into container
2024-05-21 18:11:15,628:INFO:Uploading model into container now
2024-05-21 18:11:15,628:INFO:_master_model_container: 12
2024-05-21 18:11:15,629:INFO:_display_container: 2
2024-05-21 18:11:15,629:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2024-05-21 18:11:15,629:INFO:create_model() successfully completed......................................
2024-05-21 18:11:15,735:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:15,735:INFO:Creating metrics dataframe
2024-05-21 18:11:15,748:INFO:Initializing Extreme Gradient Boosting
2024-05-21 18:11:15,748:INFO:Total runtime is 2.0965225060780845 minutes
2024-05-21 18:11:15,752:INFO:SubProcess create_model() called ==================================
2024-05-21 18:11:15,752:INFO:Initializing create_model()
2024-05-21 18:11:15,752:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=xgboost, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:15,752:INFO:Checking exceptions
2024-05-21 18:11:15,752:INFO:Importing libraries
2024-05-21 18:11:15,752:INFO:Copying training dataset
2024-05-21 18:11:15,982:INFO:Defining folds
2024-05-21 18:11:15,982:INFO:Declaring metric variables
2024-05-21 18:11:15,987:INFO:Importing untrained model
2024-05-21 18:11:15,991:INFO:Extreme Gradient Boosting Imported successfully
2024-05-21 18:11:16,000:INFO:Starting cross validation
2024-05-21 18:11:16,002:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:28,848:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:28,864:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:28,879:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,079:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,084:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,093:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,101:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,110:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,111:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,267:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,282:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,298:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,442:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,455:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,473:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,477:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,487:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,503:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,599:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,618:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,669:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,678:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,687:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,729:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,739:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,749:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,810:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,819:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,829:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:29,852:INFO:Calculating mean and std
2024-05-21 18:11:29,854:INFO:Creating metrics dataframe
2024-05-21 18:11:29,857:INFO:Uploading results into container
2024-05-21 18:11:29,858:INFO:Uploading model into container now
2024-05-21 18:11:29,858:INFO:_master_model_container: 13
2024-05-21 18:11:29,858:INFO:_display_container: 2
2024-05-21 18:11:29,859:INFO:XGBClassifier(base_score=None, booster='gbtree', callbacks=None,
              colsample_bylevel=None, colsample_bynode=None,
              colsample_bytree=None, device='cpu', early_stopping_rounds=None,
              enable_categorical=False, eval_metric=None, feature_types=None,
              gamma=None, grow_policy=None, importance_type=None,
              interaction_constraints=None, learning_rate=None, max_bin=None,
              max_cat_threshold=None, max_cat_to_onehot=None,
              max_delta_step=None, max_depth=None, max_leaves=None,
              min_child_weight=None, missing=nan, monotone_constraints=None,
              multi_strategy=None, n_estimators=None, n_jobs=-1,
              num_parallel_tree=None, objective='binary:logistic', ...)
2024-05-21 18:11:29,859:INFO:create_model() successfully completed......................................
2024-05-21 18:11:29,975:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:29,975:INFO:Creating metrics dataframe
2024-05-21 18:11:29,988:INFO:Initializing Light Gradient Boosting Machine
2024-05-21 18:11:29,988:INFO:Total runtime is 2.333864736557007 minutes
2024-05-21 18:11:29,993:INFO:SubProcess create_model() called ==================================
2024-05-21 18:11:29,993:INFO:Initializing create_model()
2024-05-21 18:11:29,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:29,994:INFO:Checking exceptions
2024-05-21 18:11:29,994:INFO:Importing libraries
2024-05-21 18:11:29,994:INFO:Copying training dataset
2024-05-21 18:11:30,234:INFO:Defining folds
2024-05-21 18:11:30,234:INFO:Declaring metric variables
2024-05-21 18:11:30,239:INFO:Importing untrained model
2024-05-21 18:11:30,244:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 18:11:30,254:INFO:Starting cross validation
2024-05-21 18:11:30,256:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:49,824:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:49,843:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:49,863:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:49,866:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:49,881:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:49,902:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,073:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,098:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,105:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,116:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,141:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,149:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,216:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,239:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,261:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,377:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,394:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,414:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,433:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,451:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,485:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,516:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,535:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,559:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,690:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,705:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:50,727:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:51,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:51,278:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:51,293:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:51,337:INFO:Calculating mean and std
2024-05-21 18:11:51,341:INFO:Creating metrics dataframe
2024-05-21 18:11:51,350:INFO:Uploading results into container
2024-05-21 18:11:51,352:INFO:Uploading model into container now
2024-05-21 18:11:51,353:INFO:_master_model_container: 14
2024-05-21 18:11:51,354:INFO:_display_container: 2
2024-05-21 18:11:51,355:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 18:11:51,356:INFO:create_model() successfully completed......................................
2024-05-21 18:11:51,522:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:51,522:INFO:Creating metrics dataframe
2024-05-21 18:11:51,541:INFO:Initializing Dummy Classifier
2024-05-21 18:11:51,541:INFO:Total runtime is 2.6930785655975344 minutes
2024-05-21 18:11:51,547:INFO:SubProcess create_model() called ==================================
2024-05-21 18:11:51,548:INFO:Initializing create_model()
2024-05-21 18:11:51,548:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002A7265320E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:51,548:INFO:Checking exceptions
2024-05-21 18:11:51,549:INFO:Importing libraries
2024-05-21 18:11:51,549:INFO:Copying training dataset
2024-05-21 18:11:51,815:INFO:Defining folds
2024-05-21 18:11:51,816:INFO:Declaring metric variables
2024-05-21 18:11:51,821:INFO:Importing untrained model
2024-05-21 18:11:51,828:INFO:Dummy Classifier Imported successfully
2024-05-21 18:11:51,838:INFO:Starting cross validation
2024-05-21 18:11:51,841:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-05-21 18:11:52,246:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,264:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,271:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,279:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,320:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,329:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,335:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,340:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,409:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,423:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,434:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,441:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,515:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,528:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,537:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,543:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,623:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,643:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,652:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,658:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,715:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,726:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,735:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,742:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,802:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,816:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,825:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,832:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,885:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,895:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,900:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:52,907:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:52,991:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,000:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,005:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:53,010:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,072:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,081:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,086:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-05-21 18:11:53,091:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-05-21 18:11:53,119:INFO:Calculating mean and std
2024-05-21 18:11:53,121:INFO:Creating metrics dataframe
2024-05-21 18:11:53,124:INFO:Uploading results into container
2024-05-21 18:11:53,125:INFO:Uploading model into container now
2024-05-21 18:11:53,125:INFO:_master_model_container: 15
2024-05-21 18:11:53,126:INFO:_display_container: 2
2024-05-21 18:11:53,126:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2024-05-21 18:11:53,126:INFO:create_model() successfully completed......................................
2024-05-21 18:11:53,242:INFO:SubProcess create_model() end ==================================
2024-05-21 18:11:53,242:INFO:Creating metrics dataframe
2024-05-21 18:11:53,272:INFO:Initializing create_model()
2024-05-21 18:11:53,272:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-05-21 18:11:53,272:INFO:Checking exceptions
2024-05-21 18:11:53,275:INFO:Importing libraries
2024-05-21 18:11:53,275:INFO:Copying training dataset
2024-05-21 18:11:53,527:INFO:Defining folds
2024-05-21 18:11:53,527:INFO:Declaring metric variables
2024-05-21 18:11:53,528:INFO:Importing untrained model
2024-05-21 18:11:53,528:INFO:Declaring custom model
2024-05-21 18:11:53,529:INFO:Light Gradient Boosting Machine Imported successfully
2024-05-21 18:11:53,533:INFO:Cross validation set to False
2024-05-21 18:11:53,533:INFO:Fitting Model
2024-05-21 18:11:53,939:INFO:[LightGBM] [Info] Number of positive: 3696, number of negative: 6174
2024-05-21 18:11:53,986:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026546 seconds.
2024-05-21 18:11:53,987:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:11:53,989:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:11:53,994:INFO:[LightGBM] [Info] Number of data points in the train set: 9870, number of used features: 343
2024-05-21 18:11:53,997:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374468 -> initscore=-0.513096
2024-05-21 18:11:53,997:INFO:[LightGBM] [Info] Start training from score -0.513096
2024-05-21 18:11:55,279:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 18:11:55,279:INFO:create_model() successfully completed......................................
2024-05-21 18:11:55,458:INFO:_master_model_container: 15
2024-05-21 18:11:55,459:INFO:_display_container: 2
2024-05-21 18:11:55,459:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-05-21 18:11:55,459:INFO:compare_models() successfully completed......................................
2024-05-21 18:11:55,544:INFO:Initializing evaluate_model()
2024-05-21 18:11:55,545:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2024-05-21 18:11:55,687:INFO:Initializing plot_model()
2024-05-21 18:11:55,687:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:11:55,687:INFO:Checking exceptions
2024-05-21 18:11:55,771:INFO:Preloading libraries
2024-05-21 18:11:55,779:INFO:Copying training dataset
2024-05-21 18:11:55,779:INFO:Plot type: pipeline
2024-05-21 18:11:56,025:INFO:Visual Rendered Successfully
2024-05-21 18:11:56,139:INFO:plot_model() successfully completed......................................
2024-05-21 18:11:56,186:INFO:Initializing predict_model()
2024-05-21 18:11:56,186:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A72C847BE0>)
2024-05-21 18:11:56,186:INFO:Checking exceptions
2024-05-21 18:11:56,186:INFO:Preloading libraries
2024-05-21 18:11:56,188:INFO:Set up data.
2024-05-21 18:11:56,314:INFO:Set up index.
2024-05-21 18:11:56,534:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2024-05-21 18:11:56,534:WARNING:  warnings.warn(
2024-05-21 18:11:56,574:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2024-05-21 18:11:56,574:WARNING:  warnings.warn(
2024-05-21 18:11:56,609:WARNING:d:\projects\research\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'M') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
2024-05-21 18:11:56,609:WARNING:  warnings.warn(
2024-05-21 18:12:27,107:INFO:Initializing plot_model()
2024-05-21 18:12:27,108:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:12:27,108:INFO:Checking exceptions
2024-05-21 18:12:27,195:INFO:Preloading libraries
2024-05-21 18:12:27,203:INFO:Copying training dataset
2024-05-21 18:12:27,203:INFO:Plot type: parameter
2024-05-21 18:12:27,211:INFO:Visual Rendered Successfully
2024-05-21 18:12:27,335:INFO:plot_model() successfully completed......................................
2024-05-21 18:12:30,660:INFO:Initializing plot_model()
2024-05-21 18:12:30,660:INFO:plot_model(plot=auc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:12:30,660:INFO:Checking exceptions
2024-05-21 18:12:30,750:INFO:Preloading libraries
2024-05-21 18:12:30,760:INFO:Copying training dataset
2024-05-21 18:12:30,760:INFO:Plot type: auc
2024-05-21 18:12:31,648:INFO:Fitting Model
2024-05-21 18:12:31,649:INFO:Scoring test/hold-out set
2024-05-21 18:12:32,008:INFO:Visual Rendered Successfully
2024-05-21 18:12:32,110:INFO:plot_model() successfully completed......................................
2024-05-21 18:12:37,729:INFO:Initializing plot_model()
2024-05-21 18:12:37,729:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:12:37,729:INFO:Checking exceptions
2024-05-21 18:12:37,803:INFO:Preloading libraries
2024-05-21 18:12:37,814:INFO:Copying training dataset
2024-05-21 18:12:37,814:INFO:Plot type: confusion_matrix
2024-05-21 18:12:38,709:INFO:Fitting Model
2024-05-21 18:12:38,711:INFO:Scoring test/hold-out set
2024-05-21 18:12:38,931:INFO:Visual Rendered Successfully
2024-05-21 18:12:39,033:INFO:plot_model() successfully completed......................................
2024-05-21 18:12:59,382:INFO:Initializing plot_model()
2024-05-21 18:12:59,383:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:12:59,383:INFO:Checking exceptions
2024-05-21 18:12:59,463:INFO:Preloading libraries
2024-05-21 18:12:59,469:INFO:Copying training dataset
2024-05-21 18:12:59,469:INFO:Plot type: threshold
2024-05-21 18:13:00,332:INFO:Fitting Model
2024-05-21 18:13:00,564:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:13:00,587:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022399 seconds.
2024-05-21 18:13:00,587:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:00,590:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:00,593:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:00,596:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:13:00,596:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:13:01,732:INFO:[LightGBM] [Info] Number of positive: 3321, number of negative: 5562
2024-05-21 18:13:01,756:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023218 seconds.
2024-05-21 18:13:01,756:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:01,759:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:01,763:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:01,766:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373860 -> initscore=-0.515692
2024-05-21 18:13:01,766:INFO:[LightGBM] [Info] Start training from score -0.515692
2024-05-21 18:13:03,286:INFO:[LightGBM] [Info] Number of positive: 3348, number of negative: 5535
2024-05-21 18:13:03,309:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021989 seconds.
2024-05-21 18:13:03,309:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:03,312:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:03,315:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:03,318:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376900 -> initscore=-0.502728
2024-05-21 18:13:03,318:INFO:[LightGBM] [Info] Start training from score -0.502728
2024-05-21 18:13:04,506:INFO:[LightGBM] [Info] Number of positive: 3331, number of negative: 5552
2024-05-21 18:13:04,528:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021357 seconds.
2024-05-21 18:13:04,528:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:04,531:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:04,534:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:04,537:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374986 -> initscore=-0.510886
2024-05-21 18:13:04,537:INFO:[LightGBM] [Info] Start training from score -0.510886
2024-05-21 18:13:05,743:INFO:[LightGBM] [Info] Number of positive: 3352, number of negative: 5531
2024-05-21 18:13:05,767:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023281 seconds.
2024-05-21 18:13:05,767:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:05,770:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:05,773:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:05,775:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377350 -> initscore=-0.500811
2024-05-21 18:13:05,776:INFO:[LightGBM] [Info] Start training from score -0.500811
2024-05-21 18:13:07,262:INFO:[LightGBM] [Info] Number of positive: 3300, number of negative: 5583
2024-05-21 18:13:07,285:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021719 seconds.
2024-05-21 18:13:07,285:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:07,288:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:07,291:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:07,294:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371496 -> initscore=-0.525804
2024-05-21 18:13:07,294:INFO:[LightGBM] [Info] Start training from score -0.525804
2024-05-21 18:13:08,645:INFO:[LightGBM] [Info] Number of positive: 3321, number of negative: 5562
2024-05-21 18:13:08,667:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021524 seconds.
2024-05-21 18:13:08,667:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:08,671:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:08,674:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:08,677:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373860 -> initscore=-0.515692
2024-05-21 18:13:08,677:INFO:[LightGBM] [Info] Start training from score -0.515692
2024-05-21 18:13:10,078:INFO:[LightGBM] [Info] Number of positive: 3312, number of negative: 5571
2024-05-21 18:13:10,104:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025999 seconds.
2024-05-21 18:13:10,105:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:10,108:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:10,112:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:10,115:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.372847 -> initscore=-0.520022
2024-05-21 18:13:10,115:INFO:[LightGBM] [Info] Start training from score -0.520022
2024-05-21 18:13:11,714:INFO:[LightGBM] [Info] Number of positive: 3314, number of negative: 5569
2024-05-21 18:13:11,739:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024584 seconds.
2024-05-21 18:13:11,739:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:11,743:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:11,746:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:11,749:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373072 -> initscore=-0.519060
2024-05-21 18:13:11,749:INFO:[LightGBM] [Info] Start training from score -0.519060
2024-05-21 18:13:13,031:INFO:[LightGBM] [Info] Number of positive: 3334, number of negative: 5549
2024-05-21 18:13:13,057:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025236 seconds.
2024-05-21 18:13:13,057:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:13,059:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:13,063:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:13,066:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375324 -> initscore=-0.509445
2024-05-21 18:13:13,066:INFO:[LightGBM] [Info] Start training from score -0.509445
2024-05-21 18:13:14,949:INFO:[LightGBM] [Info] Number of positive: 3318, number of negative: 5565
2024-05-21 18:13:14,976:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026374 seconds.
2024-05-21 18:13:14,976:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:14,979:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:14,982:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:14,984:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373522 -> initscore=-0.517135
2024-05-21 18:13:14,984:INFO:[LightGBM] [Info] Start training from score -0.517135
2024-05-21 18:13:16,929:INFO:[LightGBM] [Info] Number of positive: 3315, number of negative: 5568
2024-05-21 18:13:16,953:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023833 seconds.
2024-05-21 18:13:16,954:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:16,957:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:16,962:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:16,964:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373185 -> initscore=-0.518578
2024-05-21 18:13:16,964:INFO:[LightGBM] [Info] Start training from score -0.518578
2024-05-21 18:13:18,885:INFO:[LightGBM] [Info] Number of positive: 3316, number of negative: 5567
2024-05-21 18:13:18,918:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.032125 seconds.
2024-05-21 18:13:18,918:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:18,922:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:18,927:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:18,930:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373297 -> initscore=-0.518097
2024-05-21 18:13:18,930:INFO:[LightGBM] [Info] Start training from score -0.518097
2024-05-21 18:13:20,832:INFO:[LightGBM] [Info] Number of positive: 3293, number of negative: 5590
2024-05-21 18:13:20,863:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.030475 seconds.
2024-05-21 18:13:20,864:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:20,867:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:20,870:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:20,872:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.370708 -> initscore=-0.529180
2024-05-21 18:13:20,872:INFO:[LightGBM] [Info] Start training from score -0.529180
2024-05-21 18:13:22,627:INFO:[LightGBM] [Info] Number of positive: 3342, number of negative: 5541
2024-05-21 18:13:22,653:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024040 seconds.
2024-05-21 18:13:22,653:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:22,656:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:22,659:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:22,661:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376224 -> initscore=-0.505606
2024-05-21 18:13:22,662:INFO:[LightGBM] [Info] Start training from score -0.505606
2024-05-21 18:13:24,360:INFO:[LightGBM] [Info] Number of positive: 3326, number of negative: 5557
2024-05-21 18:13:24,392:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.031765 seconds.
2024-05-21 18:13:24,393:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:24,396:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:24,401:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:24,404:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374423 -> initscore=-0.513288
2024-05-21 18:13:24,404:INFO:[LightGBM] [Info] Start training from score -0.513288
2024-05-21 18:13:26,288:INFO:[LightGBM] [Info] Number of positive: 3298, number of negative: 5585
2024-05-21 18:13:26,314:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025351 seconds.
2024-05-21 18:13:26,315:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:26,318:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:26,321:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:26,324:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371271 -> initscore=-0.526768
2024-05-21 18:13:26,324:INFO:[LightGBM] [Info] Start training from score -0.526768
2024-05-21 18:13:27,963:INFO:[LightGBM] [Info] Number of positive: 3316, number of negative: 5567
2024-05-21 18:13:27,986:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023197 seconds.
2024-05-21 18:13:27,987:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:27,990:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:27,994:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:27,996:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373297 -> initscore=-0.518097
2024-05-21 18:13:27,997:INFO:[LightGBM] [Info] Start training from score -0.518097
2024-05-21 18:13:29,638:INFO:[LightGBM] [Info] Number of positive: 3344, number of negative: 5539
2024-05-21 18:13:29,663:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024003 seconds.
2024-05-21 18:13:29,664:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:29,667:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:29,671:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:29,673:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376449 -> initscore=-0.504646
2024-05-21 18:13:29,673:INFO:[LightGBM] [Info] Start training from score -0.504646
2024-05-21 18:13:31,102:INFO:[LightGBM] [Info] Number of positive: 3324, number of negative: 5559
2024-05-21 18:13:31,125:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022537 seconds.
2024-05-21 18:13:31,126:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:31,129:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:31,132:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:31,134:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374198 -> initscore=-0.514249
2024-05-21 18:13:31,135:INFO:[LightGBM] [Info] Start training from score -0.514249
2024-05-21 18:13:32,659:INFO:[LightGBM] [Info] Number of positive: 3341, number of negative: 5542
2024-05-21 18:13:32,684:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023689 seconds.
2024-05-21 18:13:32,684:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:32,687:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:32,692:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:32,695:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376112 -> initscore=-0.506085
2024-05-21 18:13:32,695:INFO:[LightGBM] [Info] Start training from score -0.506085
2024-05-21 18:13:34,195:INFO:[LightGBM] [Info] Number of positive: 3328, number of negative: 5555
2024-05-21 18:13:34,219:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023194 seconds.
2024-05-21 18:13:34,219:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:34,223:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:34,226:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:34,228:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374648 -> initscore=-0.512327
2024-05-21 18:13:34,228:INFO:[LightGBM] [Info] Start training from score -0.512327
2024-05-21 18:13:35,538:INFO:[LightGBM] [Info] Number of positive: 3310, number of negative: 5573
2024-05-21 18:13:35,562:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022256 seconds.
2024-05-21 18:13:35,562:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:35,565:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:35,568:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:35,571:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.372622 -> initscore=-0.520985
2024-05-21 18:13:35,571:INFO:[LightGBM] [Info] Start training from score -0.520985
2024-05-21 18:13:37,189:INFO:[LightGBM] [Info] Number of positive: 3297, number of negative: 5586
2024-05-21 18:13:37,219:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.029520 seconds.
2024-05-21 18:13:37,219:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:37,224:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:37,228:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:37,231:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371158 -> initscore=-0.527251
2024-05-21 18:13:37,231:INFO:[LightGBM] [Info] Start training from score -0.527251
2024-05-21 18:13:38,923:INFO:[LightGBM] [Info] Number of positive: 3298, number of negative: 5585
2024-05-21 18:13:38,945:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021922 seconds.
2024-05-21 18:13:38,953:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:38,956:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:38,959:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:38,962:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371271 -> initscore=-0.526768
2024-05-21 18:13:38,962:INFO:[LightGBM] [Info] Start training from score -0.526768
2024-05-21 18:13:40,357:INFO:[LightGBM] [Info] Number of positive: 3321, number of negative: 5562
2024-05-21 18:13:40,382:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023872 seconds.
2024-05-21 18:13:40,382:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:40,385:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:40,388:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:40,391:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373860 -> initscore=-0.515692
2024-05-21 18:13:40,391:INFO:[LightGBM] [Info] Start training from score -0.515692
2024-05-21 18:13:42,049:INFO:[LightGBM] [Info] Number of positive: 3331, number of negative: 5552
2024-05-21 18:13:42,075:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025147 seconds.
2024-05-21 18:13:42,075:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:42,079:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:42,082:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:42,084:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374986 -> initscore=-0.510886
2024-05-21 18:13:42,084:INFO:[LightGBM] [Info] Start training from score -0.510886
2024-05-21 18:13:43,326:INFO:[LightGBM] [Info] Number of positive: 3338, number of negative: 5545
2024-05-21 18:13:43,349:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023079 seconds.
2024-05-21 18:13:43,350:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:43,353:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:43,356:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:43,359:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375774 -> initscore=-0.507525
2024-05-21 18:13:43,359:INFO:[LightGBM] [Info] Start training from score -0.507525
2024-05-21 18:13:44,611:INFO:[LightGBM] [Info] Number of positive: 3336, number of negative: 5547
2024-05-21 18:13:44,635:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022203 seconds.
2024-05-21 18:13:44,635:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:44,638:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:44,641:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:44,644:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375549 -> initscore=-0.508485
2024-05-21 18:13:44,644:INFO:[LightGBM] [Info] Start training from score -0.508485
2024-05-21 18:13:46,159:INFO:[LightGBM] [Info] Number of positive: 3336, number of negative: 5547
2024-05-21 18:13:46,187:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.027243 seconds.
2024-05-21 18:13:46,187:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:46,189:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:46,194:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:46,197:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375549 -> initscore=-0.508485
2024-05-21 18:13:46,197:INFO:[LightGBM] [Info] Start training from score -0.508485
2024-05-21 18:13:47,421:INFO:[LightGBM] [Info] Number of positive: 3322, number of negative: 5561
2024-05-21 18:13:47,451:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.030459 seconds.
2024-05-21 18:13:47,452:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:47,455:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:47,459:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:47,462:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373973 -> initscore=-0.515211
2024-05-21 18:13:47,462:INFO:[LightGBM] [Info] Start training from score -0.515211
2024-05-21 18:13:48,605:INFO:[LightGBM] [Info] Number of positive: 3331, number of negative: 5552
2024-05-21 18:13:48,630:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024432 seconds.
2024-05-21 18:13:48,630:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:48,634:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:48,637:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:48,639:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374986 -> initscore=-0.510886
2024-05-21 18:13:48,639:INFO:[LightGBM] [Info] Start training from score -0.510886
2024-05-21 18:13:50,304:INFO:[LightGBM] [Info] Number of positive: 3322, number of negative: 5561
2024-05-21 18:13:50,329:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024088 seconds.
2024-05-21 18:13:50,329:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:50,332:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:50,335:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:50,337:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373973 -> initscore=-0.515211
2024-05-21 18:13:50,338:INFO:[LightGBM] [Info] Start training from score -0.515211
2024-05-21 18:13:51,850:INFO:[LightGBM] [Info] Number of positive: 3348, number of negative: 5535
2024-05-21 18:13:51,877:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026206 seconds.
2024-05-21 18:13:51,878:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:51,881:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:51,885:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:51,888:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376900 -> initscore=-0.502728
2024-05-21 18:13:51,888:INFO:[LightGBM] [Info] Start training from score -0.502728
2024-05-21 18:13:53,328:INFO:[LightGBM] [Info] Number of positive: 3323, number of negative: 5560
2024-05-21 18:13:53,354:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023838 seconds.
2024-05-21 18:13:53,354:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:53,357:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:53,360:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:53,362:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374085 -> initscore=-0.514730
2024-05-21 18:13:53,362:INFO:[LightGBM] [Info] Start training from score -0.514730
2024-05-21 18:13:54,901:INFO:[LightGBM] [Info] Number of positive: 3352, number of negative: 5531
2024-05-21 18:13:54,923:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021583 seconds.
2024-05-21 18:13:54,923:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:54,926:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:54,929:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:54,932:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377350 -> initscore=-0.500811
2024-05-21 18:13:54,932:INFO:[LightGBM] [Info] Start training from score -0.500811
2024-05-21 18:13:56,006:INFO:[LightGBM] [Info] Number of positive: 3337, number of negative: 5546
2024-05-21 18:13:56,028:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021054 seconds.
2024-05-21 18:13:56,028:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:56,031:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:56,034:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:56,036:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375661 -> initscore=-0.508005
2024-05-21 18:13:56,036:INFO:[LightGBM] [Info] Start training from score -0.508005
2024-05-21 18:13:57,125:INFO:[LightGBM] [Info] Number of positive: 3333, number of negative: 5550
2024-05-21 18:13:57,148:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021995 seconds.
2024-05-21 18:13:57,148:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:57,152:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:57,155:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:57,157:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375211 -> initscore=-0.509925
2024-05-21 18:13:57,157:INFO:[LightGBM] [Info] Start training from score -0.509925
2024-05-21 18:13:58,654:INFO:[LightGBM] [Info] Number of positive: 3321, number of negative: 5562
2024-05-21 18:13:58,679:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023927 seconds.
2024-05-21 18:13:58,679:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:58,683:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:58,687:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:58,689:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373860 -> initscore=-0.515692
2024-05-21 18:13:58,690:INFO:[LightGBM] [Info] Start training from score -0.515692
2024-05-21 18:13:59,906:INFO:[LightGBM] [Info] Number of positive: 3321, number of negative: 5562
2024-05-21 18:13:59,934:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.027539 seconds.
2024-05-21 18:13:59,935:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:13:59,938:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:13:59,941:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:13:59,944:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373860 -> initscore=-0.515692
2024-05-21 18:13:59,944:INFO:[LightGBM] [Info] Start training from score -0.515692
2024-05-21 18:14:01,282:INFO:[LightGBM] [Info] Number of positive: 3350, number of negative: 5533
2024-05-21 18:14:01,305:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022289 seconds.
2024-05-21 18:14:01,306:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:01,309:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:01,312:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:01,315:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.377125 -> initscore=-0.501770
2024-05-21 18:14:01,315:INFO:[LightGBM] [Info] Start training from score -0.501770
2024-05-21 18:14:02,897:INFO:[LightGBM] [Info] Number of positive: 3338, number of negative: 5545
2024-05-21 18:14:02,922:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023332 seconds.
2024-05-21 18:14:02,922:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:02,925:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:02,928:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:02,930:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375774 -> initscore=-0.507525
2024-05-21 18:14:02,930:INFO:[LightGBM] [Info] Start training from score -0.507525
2024-05-21 18:14:04,314:INFO:[LightGBM] [Info] Number of positive: 3337, number of negative: 5546
2024-05-21 18:14:04,340:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025104 seconds.
2024-05-21 18:14:04,341:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:04,344:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:04,347:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:04,349:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375661 -> initscore=-0.508005
2024-05-21 18:14:04,349:INFO:[LightGBM] [Info] Start training from score -0.508005
2024-05-21 18:14:05,586:INFO:[LightGBM] [Info] Number of positive: 3346, number of negative: 5537
2024-05-21 18:14:05,611:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024602 seconds.
2024-05-21 18:14:05,611:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:05,614:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:05,618:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:05,621:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376675 -> initscore=-0.503687
2024-05-21 18:14:05,621:INFO:[LightGBM] [Info] Start training from score -0.503687
2024-05-21 18:14:07,088:INFO:[LightGBM] [Info] Number of positive: 3348, number of negative: 5535
2024-05-21 18:14:07,112:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022507 seconds.
2024-05-21 18:14:07,112:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:07,115:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:07,119:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:07,121:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.376900 -> initscore=-0.502728
2024-05-21 18:14:07,121:INFO:[LightGBM] [Info] Start training from score -0.502728
2024-05-21 18:14:08,342:INFO:[LightGBM] [Info] Number of positive: 3316, number of negative: 5567
2024-05-21 18:14:08,364:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021748 seconds.
2024-05-21 18:14:08,364:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:08,367:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:08,371:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:08,373:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373297 -> initscore=-0.518097
2024-05-21 18:14:08,373:INFO:[LightGBM] [Info] Start training from score -0.518097
2024-05-21 18:14:09,470:INFO:[LightGBM] [Info] Number of positive: 3340, number of negative: 5543
2024-05-21 18:14:09,496:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024223 seconds.
2024-05-21 18:14:09,496:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:09,499:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:09,502:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:09,504:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375999 -> initscore=-0.506565
2024-05-21 18:14:09,504:INFO:[LightGBM] [Info] Start training from score -0.506565
2024-05-21 18:14:11,237:INFO:[LightGBM] [Info] Number of positive: 3336, number of negative: 5547
2024-05-21 18:14:11,262:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023829 seconds.
2024-05-21 18:14:11,262:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:11,266:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:11,269:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:11,272:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.375549 -> initscore=-0.508485
2024-05-21 18:14:11,272:INFO:[LightGBM] [Info] Start training from score -0.508485
2024-05-21 18:14:12,774:INFO:[LightGBM] [Info] Number of positive: 3322, number of negative: 5561
2024-05-21 18:14:12,801:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025890 seconds.
2024-05-21 18:14:12,801:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:12,804:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:12,809:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:12,812:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.373973 -> initscore=-0.515211
2024-05-21 18:14:12,812:INFO:[LightGBM] [Info] Start training from score -0.515211
2024-05-21 18:14:14,258:INFO:[LightGBM] [Info] Number of positive: 3298, number of negative: 5585
2024-05-21 18:14:14,281:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021282 seconds.
2024-05-21 18:14:14,281:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:14,285:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:14,288:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:14,291:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.371271 -> initscore=-0.526768
2024-05-21 18:14:14,291:INFO:[LightGBM] [Info] Start training from score -0.526768
2024-05-21 18:14:15,998:INFO:Scoring test/hold-out set
2024-05-21 18:14:16,637:INFO:Visual Rendered Successfully
2024-05-21 18:14:16,751:INFO:plot_model() successfully completed......................................
2024-05-21 18:14:16,867:INFO:Initializing plot_model()
2024-05-21 18:14:16,867:INFO:plot_model(plot=rfe, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A7361C76D0>, system=True)
2024-05-21 18:14:16,868:INFO:Checking exceptions
2024-05-21 18:14:16,955:INFO:Preloading libraries
2024-05-21 18:14:16,964:INFO:Copying training dataset
2024-05-21 18:14:16,964:INFO:Plot type: rfe
2024-05-21 18:14:17,812:INFO:Fitting Model
2024-05-21 18:14:18,043:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:18,069:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025389 seconds.
2024-05-21 18:14:18,069:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:18,073:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:14:18,075:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:14:18,078:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:18,078:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:19,536:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:19,563:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026125 seconds.
2024-05-21 18:14:19,563:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:19,566:INFO:[LightGBM] [Info] Total Bins 87210
2024-05-21 18:14:19,569:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 342
2024-05-21 18:14:19,572:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:19,572:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:20,808:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:20,830:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020753 seconds.
2024-05-21 18:14:20,830:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:20,833:INFO:[LightGBM] [Info] Total Bins 86955
2024-05-21 18:14:20,836:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 341
2024-05-21 18:14:20,839:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:20,839:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:21,870:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:21,892:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021468 seconds.
2024-05-21 18:14:21,892:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:21,896:INFO:[LightGBM] [Info] Total Bins 86700
2024-05-21 18:14:21,898:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 340
2024-05-21 18:14:21,901:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:21,902:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:23,326:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:23,348:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022124 seconds.
2024-05-21 18:14:23,349:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:23,351:INFO:[LightGBM] [Info] Total Bins 86445
2024-05-21 18:14:23,354:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 339
2024-05-21 18:14:23,357:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:23,357:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:24,703:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:24,724:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020168 seconds.
2024-05-21 18:14:24,724:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:24,728:INFO:[LightGBM] [Info] Total Bins 86190
2024-05-21 18:14:24,731:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 338
2024-05-21 18:14:24,733:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:24,733:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:25,894:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:25,916:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020800 seconds.
2024-05-21 18:14:25,916:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:25,919:INFO:[LightGBM] [Info] Total Bins 85935
2024-05-21 18:14:25,922:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 337
2024-05-21 18:14:25,924:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:25,925:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:27,145:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:27,167:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021715 seconds.
2024-05-21 18:14:27,167:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:27,170:INFO:[LightGBM] [Info] Total Bins 85680
2024-05-21 18:14:27,173:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 336
2024-05-21 18:14:27,176:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:27,176:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:28,572:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:28,594:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021469 seconds.
2024-05-21 18:14:28,594:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:28,598:INFO:[LightGBM] [Info] Total Bins 85425
2024-05-21 18:14:28,601:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 335
2024-05-21 18:14:28,603:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:28,603:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:29,599:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:29,620:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020198 seconds.
2024-05-21 18:14:29,620:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:29,623:INFO:[LightGBM] [Info] Total Bins 85170
2024-05-21 18:14:29,627:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 334
2024-05-21 18:14:29,629:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:29,629:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:30,675:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:30,697:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021086 seconds.
2024-05-21 18:14:30,697:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:30,701:INFO:[LightGBM] [Info] Total Bins 84915
2024-05-21 18:14:30,704:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 333
2024-05-21 18:14:30,706:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:30,707:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:32,108:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:32,135:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026066 seconds.
2024-05-21 18:14:32,135:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:32,138:INFO:[LightGBM] [Info] Total Bins 84660
2024-05-21 18:14:32,143:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 332
2024-05-21 18:14:32,145:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:32,146:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:33,365:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:33,401:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.034038 seconds.
2024-05-21 18:14:33,401:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:33,404:INFO:[LightGBM] [Info] Total Bins 84405
2024-05-21 18:14:33,408:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 331
2024-05-21 18:14:33,410:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:33,410:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:34,391:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:34,412:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020709 seconds.
2024-05-21 18:14:34,412:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:34,416:INFO:[LightGBM] [Info] Total Bins 84150
2024-05-21 18:14:34,419:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 330
2024-05-21 18:14:34,421:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:34,421:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:35,614:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:35,635:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019846 seconds.
2024-05-21 18:14:35,635:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:35,638:INFO:[LightGBM] [Info] Total Bins 83895
2024-05-21 18:14:35,642:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 329
2024-05-21 18:14:35,644:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:35,644:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:37,029:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:37,051:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020872 seconds.
2024-05-21 18:14:37,051:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:37,054:INFO:[LightGBM] [Info] Total Bins 83640
2024-05-21 18:14:37,058:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 328
2024-05-21 18:14:37,061:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:37,061:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:38,047:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:38,067:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019360 seconds.
2024-05-21 18:14:38,067:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:38,071:INFO:[LightGBM] [Info] Total Bins 83385
2024-05-21 18:14:38,075:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 327
2024-05-21 18:14:38,077:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:38,077:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:39,037:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:39,057:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019448 seconds.
2024-05-21 18:14:39,058:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:39,061:INFO:[LightGBM] [Info] Total Bins 83130
2024-05-21 18:14:39,064:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 326
2024-05-21 18:14:39,066:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:39,066:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:40,503:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:40,528:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024671 seconds.
2024-05-21 18:14:40,529:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:40,531:INFO:[LightGBM] [Info] Total Bins 82875
2024-05-21 18:14:40,534:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 325
2024-05-21 18:14:40,536:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:40,537:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:41,793:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:41,813:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019388 seconds.
2024-05-21 18:14:41,813:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:41,816:INFO:[LightGBM] [Info] Total Bins 82620
2024-05-21 18:14:41,819:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 324
2024-05-21 18:14:41,821:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:41,822:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:43,079:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:43,101:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020730 seconds.
2024-05-21 18:14:43,101:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:43,104:INFO:[LightGBM] [Info] Total Bins 82365
2024-05-21 18:14:43,107:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 323
2024-05-21 18:14:43,109:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:43,110:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:44,493:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:44,518:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024022 seconds.
2024-05-21 18:14:44,518:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:44,521:INFO:[LightGBM] [Info] Total Bins 82110
2024-05-21 18:14:44,525:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 322
2024-05-21 18:14:44,528:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:44,528:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:45,821:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:45,841:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019324 seconds.
2024-05-21 18:14:45,841:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:45,844:INFO:[LightGBM] [Info] Total Bins 81855
2024-05-21 18:14:45,847:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 321
2024-05-21 18:14:45,849:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:45,850:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:46,885:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:46,908:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022319 seconds.
2024-05-21 18:14:46,908:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:46,911:INFO:[LightGBM] [Info] Total Bins 81600
2024-05-21 18:14:46,914:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 320
2024-05-21 18:14:46,928:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:46,928:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:48,067:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:48,091:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023321 seconds.
2024-05-21 18:14:48,091:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:48,094:INFO:[LightGBM] [Info] Total Bins 81345
2024-05-21 18:14:48,097:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 319
2024-05-21 18:14:48,099:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:48,099:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:49,481:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:49,503:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020861 seconds.
2024-05-21 18:14:49,503:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:49,506:INFO:[LightGBM] [Info] Total Bins 81090
2024-05-21 18:14:49,509:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 318
2024-05-21 18:14:49,512:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:49,512:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:50,890:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:50,913:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021724 seconds.
2024-05-21 18:14:50,913:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:50,916:INFO:[LightGBM] [Info] Total Bins 80835
2024-05-21 18:14:50,920:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 317
2024-05-21 18:14:50,923:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:50,923:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:52,151:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:52,171:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019350 seconds.
2024-05-21 18:14:52,172:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:52,175:INFO:[LightGBM] [Info] Total Bins 80580
2024-05-21 18:14:52,178:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 316
2024-05-21 18:14:52,180:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:52,181:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:53,533:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:53,553:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019151 seconds.
2024-05-21 18:14:53,554:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:53,556:INFO:[LightGBM] [Info] Total Bins 80325
2024-05-21 18:14:53,559:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 315
2024-05-21 18:14:53,561:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:53,561:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:54,632:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:54,651:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018381 seconds.
2024-05-21 18:14:54,651:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:54,659:INFO:[LightGBM] [Info] Total Bins 80070
2024-05-21 18:14:54,662:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 314
2024-05-21 18:14:54,664:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:54,664:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:55,576:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:55,596:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018818 seconds.
2024-05-21 18:14:55,596:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:55,599:INFO:[LightGBM] [Info] Total Bins 79815
2024-05-21 18:14:55,602:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 313
2024-05-21 18:14:55,604:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:55,605:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:56,665:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:56,683:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018211 seconds.
2024-05-21 18:14:56,683:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:56,686:INFO:[LightGBM] [Info] Total Bins 79560
2024-05-21 18:14:56,689:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 312
2024-05-21 18:14:56,691:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:56,692:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:58,000:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:58,037:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018806 seconds.
2024-05-21 18:14:58,037:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:58,040:INFO:[LightGBM] [Info] Total Bins 79305
2024-05-21 18:14:58,043:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 311
2024-05-21 18:14:58,045:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:58,045:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:14:59,178:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:14:59,200:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020689 seconds.
2024-05-21 18:14:59,200:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:14:59,203:INFO:[LightGBM] [Info] Total Bins 79050
2024-05-21 18:14:59,206:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 310
2024-05-21 18:14:59,209:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:14:59,209:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:00,458:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:00,502:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.042727 seconds.
2024-05-21 18:15:00,502:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:00,506:INFO:[LightGBM] [Info] Total Bins 78795
2024-05-21 18:15:00,513:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 309
2024-05-21 18:15:00,516:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:00,516:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:01,896:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:01,918:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020378 seconds.
2024-05-21 18:15:01,918:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:01,921:INFO:[LightGBM] [Info] Total Bins 78540
2024-05-21 18:15:01,924:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 308
2024-05-21 18:15:01,926:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:01,927:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:03,185:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:03,204:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018617 seconds.
2024-05-21 18:15:03,204:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:03,207:INFO:[LightGBM] [Info] Total Bins 78285
2024-05-21 18:15:03,210:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 307
2024-05-21 18:15:03,212:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:03,212:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:04,299:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:04,317:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017954 seconds.
2024-05-21 18:15:04,318:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:04,320:INFO:[LightGBM] [Info] Total Bins 78030
2024-05-21 18:15:04,323:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 306
2024-05-21 18:15:04,326:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:04,326:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:05,490:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:05,515:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025229 seconds.
2024-05-21 18:15:05,515:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:05,518:INFO:[LightGBM] [Info] Total Bins 77775
2024-05-21 18:15:05,524:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 305
2024-05-21 18:15:05,526:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:05,527:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:06,913:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:06,934:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020310 seconds.
2024-05-21 18:15:06,935:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:06,938:INFO:[LightGBM] [Info] Total Bins 77520
2024-05-21 18:15:06,941:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 304
2024-05-21 18:15:06,943:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:06,943:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:08,000:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:08,023:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022312 seconds.
2024-05-21 18:15:08,024:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:08,027:INFO:[LightGBM] [Info] Total Bins 77265
2024-05-21 18:15:08,029:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 303
2024-05-21 18:15:08,031:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:08,032:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:09,271:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:09,291:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019393 seconds.
2024-05-21 18:15:09,292:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:09,295:INFO:[LightGBM] [Info] Total Bins 77010
2024-05-21 18:15:09,298:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 302
2024-05-21 18:15:09,300:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:09,300:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:10,633:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:10,652:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018692 seconds.
2024-05-21 18:15:10,652:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:10,655:INFO:[LightGBM] [Info] Total Bins 76755
2024-05-21 18:15:10,658:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 301
2024-05-21 18:15:10,660:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:10,661:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:11,759:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:11,776:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016807 seconds.
2024-05-21 18:15:11,777:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:11,779:INFO:[LightGBM] [Info] Total Bins 76500
2024-05-21 18:15:11,782:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 300
2024-05-21 18:15:11,785:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:11,785:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:12,777:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:12,795:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017338 seconds.
2024-05-21 18:15:12,795:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:12,798:INFO:[LightGBM] [Info] Total Bins 76245
2024-05-21 18:15:12,801:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 299
2024-05-21 18:15:12,804:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:12,804:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:13,939:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:13,963:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022886 seconds.
2024-05-21 18:15:13,963:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:13,965:INFO:[LightGBM] [Info] Total Bins 75990
2024-05-21 18:15:13,968:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 298
2024-05-21 18:15:13,970:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:13,971:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:15,294:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:15,317:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022479 seconds.
2024-05-21 18:15:15,318:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:15,320:INFO:[LightGBM] [Info] Total Bins 75735
2024-05-21 18:15:15,324:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 297
2024-05-21 18:15:15,328:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:15,328:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:16,477:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:16,502:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024313 seconds.
2024-05-21 18:15:16,503:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:16,506:INFO:[LightGBM] [Info] Total Bins 75480
2024-05-21 18:15:16,509:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 296
2024-05-21 18:15:16,511:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:16,512:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:17,691:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:17,710:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018380 seconds.
2024-05-21 18:15:17,710:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:17,713:INFO:[LightGBM] [Info] Total Bins 75225
2024-05-21 18:15:17,716:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 295
2024-05-21 18:15:17,718:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:17,718:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:19,009:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:19,029:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018996 seconds.
2024-05-21 18:15:19,029:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:19,032:INFO:[LightGBM] [Info] Total Bins 74970
2024-05-21 18:15:19,035:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 294
2024-05-21 18:15:19,037:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:19,038:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:20,345:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:20,364:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018304 seconds.
2024-05-21 18:15:20,364:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:20,367:INFO:[LightGBM] [Info] Total Bins 74715
2024-05-21 18:15:20,370:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 293
2024-05-21 18:15:20,373:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:20,373:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:21,521:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:21,540:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017949 seconds.
2024-05-21 18:15:21,540:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:21,543:INFO:[LightGBM] [Info] Total Bins 74460
2024-05-21 18:15:21,546:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 292
2024-05-21 18:15:21,548:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:21,548:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:22,795:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:22,812:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016336 seconds.
2024-05-21 18:15:22,812:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:22,815:INFO:[LightGBM] [Info] Total Bins 74205
2024-05-21 18:15:22,818:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 291
2024-05-21 18:15:22,820:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:22,820:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:24,040:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:24,058:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016819 seconds.
2024-05-21 18:15:24,058:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:24,060:INFO:[LightGBM] [Info] Total Bins 73950
2024-05-21 18:15:24,063:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 290
2024-05-21 18:15:24,065:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:24,065:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:25,145:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:25,162:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015932 seconds.
2024-05-21 18:15:25,162:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:25,165:INFO:[LightGBM] [Info] Total Bins 73695
2024-05-21 18:15:25,167:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 289
2024-05-21 18:15:25,169:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:25,169:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:26,253:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:26,271:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017162 seconds.
2024-05-21 18:15:26,271:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:26,274:INFO:[LightGBM] [Info] Total Bins 73440
2024-05-21 18:15:26,277:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 288
2024-05-21 18:15:26,279:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:26,279:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:27,597:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:27,616:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017743 seconds.
2024-05-21 18:15:27,616:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:27,619:INFO:[LightGBM] [Info] Total Bins 73185
2024-05-21 18:15:27,623:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 287
2024-05-21 18:15:27,625:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:27,625:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:29,199:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:29,220:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019559 seconds.
2024-05-21 18:15:29,220:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:29,222:INFO:[LightGBM] [Info] Total Bins 72930
2024-05-21 18:15:29,227:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 286
2024-05-21 18:15:29,229:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:29,229:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:30,221:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:30,244:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022633 seconds.
2024-05-21 18:15:30,245:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:30,247:INFO:[LightGBM] [Info] Total Bins 72675
2024-05-21 18:15:30,250:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 285
2024-05-21 18:15:30,252:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:30,252:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:31,593:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:31,610:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018153 seconds.
2024-05-21 18:15:31,611:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:31,613:INFO:[LightGBM] [Info] Total Bins 72420
2024-05-21 18:15:31,617:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 284
2024-05-21 18:15:31,619:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:31,619:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:32,759:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:32,776:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016474 seconds.
2024-05-21 18:15:32,776:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:32,779:INFO:[LightGBM] [Info] Total Bins 72165
2024-05-21 18:15:32,782:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 283
2024-05-21 18:15:32,784:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:32,784:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:33,637:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:33,659:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021610 seconds.
2024-05-21 18:15:33,659:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:33,662:INFO:[LightGBM] [Info] Total Bins 71910
2024-05-21 18:15:33,664:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 282
2024-05-21 18:15:33,666:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:33,666:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:34,480:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:34,499:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018424 seconds.
2024-05-21 18:15:34,499:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:34,502:INFO:[LightGBM] [Info] Total Bins 71655
2024-05-21 18:15:34,505:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 281
2024-05-21 18:15:34,507:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:34,507:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:35,697:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:35,714:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015982 seconds.
2024-05-21 18:15:35,714:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:35,717:INFO:[LightGBM] [Info] Total Bins 71400
2024-05-21 18:15:35,720:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 280
2024-05-21 18:15:35,722:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:35,722:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:36,899:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:36,916:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015607 seconds.
2024-05-21 18:15:36,916:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:36,919:INFO:[LightGBM] [Info] Total Bins 71145
2024-05-21 18:15:36,921:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 279
2024-05-21 18:15:36,923:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:36,924:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:37,764:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:37,780:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015735 seconds.
2024-05-21 18:15:37,781:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:37,783:INFO:[LightGBM] [Info] Total Bins 70890
2024-05-21 18:15:37,786:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 278
2024-05-21 18:15:37,788:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:37,788:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:38,600:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:38,617:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016273 seconds.
2024-05-21 18:15:38,617:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:38,619:INFO:[LightGBM] [Info] Total Bins 70635
2024-05-21 18:15:38,622:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 277
2024-05-21 18:15:38,624:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:38,624:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:39,819:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:39,837:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016879 seconds.
2024-05-21 18:15:39,837:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:39,843:INFO:[LightGBM] [Info] Total Bins 70380
2024-05-21 18:15:39,846:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 276
2024-05-21 18:15:39,848:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:39,848:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:41,004:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:41,021:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015011 seconds.
2024-05-21 18:15:41,021:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:41,023:INFO:[LightGBM] [Info] Total Bins 70125
2024-05-21 18:15:41,026:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 275
2024-05-21 18:15:41,028:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:41,028:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:41,884:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:41,901:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016987 seconds.
2024-05-21 18:15:41,901:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:41,904:INFO:[LightGBM] [Info] Total Bins 69870
2024-05-21 18:15:41,907:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 274
2024-05-21 18:15:41,909:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:41,909:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:42,749:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:42,765:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015236 seconds.
2024-05-21 18:15:42,766:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:42,768:INFO:[LightGBM] [Info] Total Bins 69615
2024-05-21 18:15:42,771:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 273
2024-05-21 18:15:42,773:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:42,773:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:43,888:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:43,905:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016012 seconds.
2024-05-21 18:15:43,905:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:43,908:INFO:[LightGBM] [Info] Total Bins 69360
2024-05-21 18:15:43,910:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 272
2024-05-21 18:15:43,912:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:43,912:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:45,078:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:45,094:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015680 seconds.
2024-05-21 18:15:45,094:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:45,096:INFO:[LightGBM] [Info] Total Bins 69105
2024-05-21 18:15:45,099:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 271
2024-05-21 18:15:45,101:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:45,101:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:45,923:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:45,938:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014554 seconds.
2024-05-21 18:15:45,938:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:45,941:INFO:[LightGBM] [Info] Total Bins 68850
2024-05-21 18:15:45,943:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 270
2024-05-21 18:15:45,945:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:45,945:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:46,778:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:46,793:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014348 seconds.
2024-05-21 18:15:46,793:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:46,795:INFO:[LightGBM] [Info] Total Bins 68595
2024-05-21 18:15:46,798:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 269
2024-05-21 18:15:46,800:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:46,800:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:47,801:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:47,821:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018793 seconds.
2024-05-21 18:15:47,821:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:47,823:INFO:[LightGBM] [Info] Total Bins 68340
2024-05-21 18:15:47,826:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 268
2024-05-21 18:15:47,828:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:47,829:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:48,976:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:48,992:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015685 seconds.
2024-05-21 18:15:48,992:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:48,995:INFO:[LightGBM] [Info] Total Bins 68085
2024-05-21 18:15:48,997:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 267
2024-05-21 18:15:48,999:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:49,000:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:50,071:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:50,086:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014994 seconds.
2024-05-21 18:15:50,087:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:50,089:INFO:[LightGBM] [Info] Total Bins 67830
2024-05-21 18:15:50,094:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 266
2024-05-21 18:15:50,096:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:50,096:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:51,285:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:51,302:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016770 seconds.
2024-05-21 18:15:51,302:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:51,304:INFO:[LightGBM] [Info] Total Bins 67575
2024-05-21 18:15:51,307:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 265
2024-05-21 18:15:51,310:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:51,310:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:52,576:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:52,592:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015435 seconds.
2024-05-21 18:15:52,592:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:52,594:INFO:[LightGBM] [Info] Total Bins 67320
2024-05-21 18:15:52,597:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 264
2024-05-21 18:15:52,599:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:52,599:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:53,762:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:53,777:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014360 seconds.
2024-05-21 18:15:53,778:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:53,780:INFO:[LightGBM] [Info] Total Bins 67065
2024-05-21 18:15:53,783:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 263
2024-05-21 18:15:53,785:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:53,785:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:54,749:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:54,766:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015783 seconds.
2024-05-21 18:15:54,766:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:54,768:INFO:[LightGBM] [Info] Total Bins 66810
2024-05-21 18:15:54,771:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 262
2024-05-21 18:15:54,773:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:54,773:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:55,755:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:55,773:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017212 seconds.
2024-05-21 18:15:55,773:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:55,776:INFO:[LightGBM] [Info] Total Bins 66555
2024-05-21 18:15:55,778:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 261
2024-05-21 18:15:55,780:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:55,780:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:56,971:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:56,993:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021454 seconds.
2024-05-21 18:15:56,994:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:56,996:INFO:[LightGBM] [Info] Total Bins 66300
2024-05-21 18:15:56,999:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 260
2024-05-21 18:15:57,001:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:57,002:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:58,241:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:58,256:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014154 seconds.
2024-05-21 18:15:58,256:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:58,258:INFO:[LightGBM] [Info] Total Bins 66045
2024-05-21 18:15:58,261:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 259
2024-05-21 18:15:58,263:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:58,263:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:59,072:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:59,086:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013525 seconds.
2024-05-21 18:15:59,086:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:59,089:INFO:[LightGBM] [Info] Total Bins 65790
2024-05-21 18:15:59,091:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 258
2024-05-21 18:15:59,093:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:59,093:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:15:59,861:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:15:59,879:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016841 seconds.
2024-05-21 18:15:59,879:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:15:59,882:INFO:[LightGBM] [Info] Total Bins 65535
2024-05-21 18:15:59,885:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 257
2024-05-21 18:15:59,887:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:15:59,887:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:00,956:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:00,971:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014412 seconds.
2024-05-21 18:16:00,972:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:00,974:INFO:[LightGBM] [Info] Total Bins 65280
2024-05-21 18:16:00,977:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 256
2024-05-21 18:16:00,979:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:00,979:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:02,090:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:02,106:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014457 seconds.
2024-05-21 18:16:02,106:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:02,108:INFO:[LightGBM] [Info] Total Bins 65025
2024-05-21 18:16:02,112:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 255
2024-05-21 18:16:02,114:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:02,114:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:02,903:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:02,917:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014101 seconds.
2024-05-21 18:16:02,918:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:02,920:INFO:[LightGBM] [Info] Total Bins 64770
2024-05-21 18:16:02,924:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 254
2024-05-21 18:16:02,926:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:02,926:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:03,717:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:03,732:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013992 seconds.
2024-05-21 18:16:03,732:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:03,734:INFO:[LightGBM] [Info] Total Bins 64515
2024-05-21 18:16:03,738:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 253
2024-05-21 18:16:03,740:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:03,740:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:04,506:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:04,525:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018349 seconds.
2024-05-21 18:16:04,526:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:04,528:INFO:[LightGBM] [Info] Total Bins 64260
2024-05-21 18:16:04,532:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 252
2024-05-21 18:16:04,533:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:04,534:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:05,586:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:05,601:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014507 seconds.
2024-05-21 18:16:05,601:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:05,603:INFO:[LightGBM] [Info] Total Bins 64005
2024-05-21 18:16:05,606:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 251
2024-05-21 18:16:05,608:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:05,608:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:06,675:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:06,692:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016299 seconds.
2024-05-21 18:16:06,692:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:06,695:INFO:[LightGBM] [Info] Total Bins 63750
2024-05-21 18:16:06,698:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 250
2024-05-21 18:16:06,699:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:06,700:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:07,528:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:07,562:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017955 seconds.
2024-05-21 18:16:07,562:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:07,565:INFO:[LightGBM] [Info] Total Bins 63495
2024-05-21 18:16:07,567:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 249
2024-05-21 18:16:07,569:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:07,569:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:08,298:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:08,311:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012918 seconds.
2024-05-21 18:16:08,311:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:08,313:INFO:[LightGBM] [Info] Total Bins 63240
2024-05-21 18:16:08,317:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 248
2024-05-21 18:16:08,319:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:08,319:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:09,383:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:09,400:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016682 seconds.
2024-05-21 18:16:09,401:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:09,403:INFO:[LightGBM] [Info] Total Bins 62985
2024-05-21 18:16:09,406:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 247
2024-05-21 18:16:09,408:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:09,409:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:10,505:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:10,524:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019016 seconds.
2024-05-21 18:16:10,525:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:10,527:INFO:[LightGBM] [Info] Total Bins 62730
2024-05-21 18:16:10,530:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 246
2024-05-21 18:16:10,532:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:10,532:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:11,346:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:11,359:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012675 seconds.
2024-05-21 18:16:11,359:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:11,361:INFO:[LightGBM] [Info] Total Bins 62475
2024-05-21 18:16:11,364:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 245
2024-05-21 18:16:11,366:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:11,366:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:12,260:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:12,274:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012959 seconds.
2024-05-21 18:16:12,275:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:12,277:INFO:[LightGBM] [Info] Total Bins 62220
2024-05-21 18:16:12,282:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 244
2024-05-21 18:16:12,284:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:12,284:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:13,280:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:13,295:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013990 seconds.
2024-05-21 18:16:13,295:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:13,297:INFO:[LightGBM] [Info] Total Bins 61965
2024-05-21 18:16:13,300:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 243
2024-05-21 18:16:13,302:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:13,302:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:14,433:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:14,449:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014956 seconds.
2024-05-21 18:16:14,449:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:14,451:INFO:[LightGBM] [Info] Total Bins 61710
2024-05-21 18:16:14,454:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 242
2024-05-21 18:16:14,456:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:14,456:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:15,407:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:15,421:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013718 seconds.
2024-05-21 18:16:15,421:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:15,423:INFO:[LightGBM] [Info] Total Bins 61455
2024-05-21 18:16:15,426:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 241
2024-05-21 18:16:15,429:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:15,429:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:16,207:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:16,220:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012292 seconds.
2024-05-21 18:16:16,220:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:16,226:INFO:[LightGBM] [Info] Total Bins 61200
2024-05-21 18:16:16,230:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 240
2024-05-21 18:16:16,232:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:16,232:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:16,992:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:17,007:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015101 seconds.
2024-05-21 18:16:17,007:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:17,010:INFO:[LightGBM] [Info] Total Bins 60945
2024-05-21 18:16:17,013:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 239
2024-05-21 18:16:17,016:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:17,016:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:18,113:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:18,127:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013307 seconds.
2024-05-21 18:16:18,127:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:18,129:INFO:[LightGBM] [Info] Total Bins 60690
2024-05-21 18:16:18,132:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 238
2024-05-21 18:16:18,134:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:18,134:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:19,161:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:19,178:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016543 seconds.
2024-05-21 18:16:19,178:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:19,180:INFO:[LightGBM] [Info] Total Bins 60435
2024-05-21 18:16:19,183:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 237
2024-05-21 18:16:19,185:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:19,185:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:20,000:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:20,012:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011599 seconds.
2024-05-21 18:16:20,012:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:20,014:INFO:[LightGBM] [Info] Total Bins 60180
2024-05-21 18:16:20,018:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 236
2024-05-21 18:16:20,020:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:20,020:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:20,734:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:20,746:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011832 seconds.
2024-05-21 18:16:20,746:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:20,749:INFO:[LightGBM] [Info] Total Bins 59925
2024-05-21 18:16:20,750:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 235
2024-05-21 18:16:20,752:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:20,752:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:21,438:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:21,450:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011737 seconds.
2024-05-21 18:16:21,451:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:21,453:INFO:[LightGBM] [Info] Total Bins 59670
2024-05-21 18:16:21,455:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 234
2024-05-21 18:16:21,457:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:21,457:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:22,458:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:22,471:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012580 seconds.
2024-05-21 18:16:22,471:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:22,473:INFO:[LightGBM] [Info] Total Bins 59415
2024-05-21 18:16:22,475:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 233
2024-05-21 18:16:22,477:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:22,477:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:23,493:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:23,506:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012670 seconds.
2024-05-21 18:16:23,506:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:23,508:INFO:[LightGBM] [Info] Total Bins 59160
2024-05-21 18:16:23,511:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 232
2024-05-21 18:16:23,512:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:23,513:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:24,281:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:24,293:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011601 seconds.
2024-05-21 18:16:24,293:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:24,295:INFO:[LightGBM] [Info] Total Bins 58905
2024-05-21 18:16:24,298:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 231
2024-05-21 18:16:24,299:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:24,299:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:24,998:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:25,010:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011550 seconds.
2024-05-21 18:16:25,010:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:25,013:INFO:[LightGBM] [Info] Total Bins 58650
2024-05-21 18:16:25,017:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 230
2024-05-21 18:16:25,018:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:25,019:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:25,708:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:25,720:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011355 seconds.
2024-05-21 18:16:25,720:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:25,722:INFO:[LightGBM] [Info] Total Bins 58395
2024-05-21 18:16:25,724:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 229
2024-05-21 18:16:25,726:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:25,726:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:26,688:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:26,702:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012405 seconds.
2024-05-21 18:16:26,702:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:26,704:INFO:[LightGBM] [Info] Total Bins 58140
2024-05-21 18:16:26,708:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 228
2024-05-21 18:16:26,709:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:26,710:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:27,700:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:27,712:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012252 seconds.
2024-05-21 18:16:27,712:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:27,714:INFO:[LightGBM] [Info] Total Bins 57885
2024-05-21 18:16:27,716:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 227
2024-05-21 18:16:27,718:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:27,718:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:28,482:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:28,494:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011441 seconds.
2024-05-21 18:16:28,494:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:28,496:INFO:[LightGBM] [Info] Total Bins 57630
2024-05-21 18:16:28,498:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 226
2024-05-21 18:16:28,500:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:28,500:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:29,167:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:29,179:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011229 seconds.
2024-05-21 18:16:29,179:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:29,181:INFO:[LightGBM] [Info] Total Bins 57375
2024-05-21 18:16:29,183:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 225
2024-05-21 18:16:29,184:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:29,185:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:29,891:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:29,902:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010976 seconds.
2024-05-21 18:16:29,902:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:29,904:INFO:[LightGBM] [Info] Total Bins 57120
2024-05-21 18:16:29,906:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 224
2024-05-21 18:16:29,907:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:29,908:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:30,782:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:30,794:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011584 seconds.
2024-05-21 18:16:30,794:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:30,797:INFO:[LightGBM] [Info] Total Bins 56865
2024-05-21 18:16:30,798:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 223
2024-05-21 18:16:30,800:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:30,800:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:31,751:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:31,766:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014656 seconds.
2024-05-21 18:16:31,766:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:31,768:INFO:[LightGBM] [Info] Total Bins 56610
2024-05-21 18:16:31,769:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 222
2024-05-21 18:16:31,771:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:31,771:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:32,795:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:32,810:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014605 seconds.
2024-05-21 18:16:32,811:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:32,813:INFO:[LightGBM] [Info] Total Bins 56355
2024-05-21 18:16:32,815:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 221
2024-05-21 18:16:32,817:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:32,817:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:33,647:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:33,662:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014415 seconds.
2024-05-21 18:16:33,662:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:33,664:INFO:[LightGBM] [Info] Total Bins 56100
2024-05-21 18:16:33,668:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 220
2024-05-21 18:16:33,670:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:33,670:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:34,353:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:34,365:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011029 seconds.
2024-05-21 18:16:34,365:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:34,367:INFO:[LightGBM] [Info] Total Bins 55845
2024-05-21 18:16:34,369:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 219
2024-05-21 18:16:34,370:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:34,370:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:35,317:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:35,329:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011610 seconds.
2024-05-21 18:16:35,329:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:35,331:INFO:[LightGBM] [Info] Total Bins 55590
2024-05-21 18:16:35,333:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 218
2024-05-21 18:16:35,334:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:35,335:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:36,358:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:36,372:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013581 seconds.
2024-05-21 18:16:36,372:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:36,374:INFO:[LightGBM] [Info] Total Bins 55335
2024-05-21 18:16:36,376:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 217
2024-05-21 18:16:36,378:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:36,379:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:37,165:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:37,176:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010496 seconds.
2024-05-21 18:16:37,176:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:37,178:INFO:[LightGBM] [Info] Total Bins 55080
2024-05-21 18:16:37,180:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 216
2024-05-21 18:16:37,181:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:37,182:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:37,838:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:37,851:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012378 seconds.
2024-05-21 18:16:37,851:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:37,853:INFO:[LightGBM] [Info] Total Bins 54825
2024-05-21 18:16:37,855:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 215
2024-05-21 18:16:37,857:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:37,857:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:38,534:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:38,549:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014683 seconds.
2024-05-21 18:16:38,549:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:38,551:INFO:[LightGBM] [Info] Total Bins 54570
2024-05-21 18:16:38,553:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 214
2024-05-21 18:16:38,554:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:38,555:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:39,400:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:39,412:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011812 seconds.
2024-05-21 18:16:39,412:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:39,414:INFO:[LightGBM] [Info] Total Bins 54315
2024-05-21 18:16:39,416:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 213
2024-05-21 18:16:39,418:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:39,418:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:40,367:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:40,379:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011664 seconds.
2024-05-21 18:16:40,379:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:40,381:INFO:[LightGBM] [Info] Total Bins 54060
2024-05-21 18:16:40,383:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 212
2024-05-21 18:16:40,385:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:40,385:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:41,238:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:41,249:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010104 seconds.
2024-05-21 18:16:41,249:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:41,251:INFO:[LightGBM] [Info] Total Bins 53805
2024-05-21 18:16:41,254:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 211
2024-05-21 18:16:41,256:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:41,256:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:41,894:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:41,904:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009760 seconds.
2024-05-21 18:16:41,905:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:41,906:INFO:[LightGBM] [Info] Total Bins 53550
2024-05-21 18:16:41,908:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 210
2024-05-21 18:16:41,910:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:41,910:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:42,738:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:42,749:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010510 seconds.
2024-05-21 18:16:42,749:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:42,751:INFO:[LightGBM] [Info] Total Bins 53295
2024-05-21 18:16:42,753:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 209
2024-05-21 18:16:42,754:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:42,754:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:43,514:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:43,525:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011340 seconds.
2024-05-21 18:16:43,526:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:43,528:INFO:[LightGBM] [Info] Total Bins 53040
2024-05-21 18:16:43,529:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 208
2024-05-21 18:16:43,531:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:43,531:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:44,487:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:44,499:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011526 seconds.
2024-05-21 18:16:44,499:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:44,501:INFO:[LightGBM] [Info] Total Bins 52785
2024-05-21 18:16:44,503:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 207
2024-05-21 18:16:44,504:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:44,504:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:45,436:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:45,449:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012469 seconds.
2024-05-21 18:16:45,449:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:45,451:INFO:[LightGBM] [Info] Total Bins 52530
2024-05-21 18:16:45,452:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 206
2024-05-21 18:16:45,454:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:45,454:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:46,071:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:46,082:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009968 seconds.
2024-05-21 18:16:46,082:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:46,084:INFO:[LightGBM] [Info] Total Bins 52275
2024-05-21 18:16:46,085:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 205
2024-05-21 18:16:46,087:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:46,087:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:46,820:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:46,831:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009990 seconds.
2024-05-21 18:16:46,831:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:46,833:INFO:[LightGBM] [Info] Total Bins 52020
2024-05-21 18:16:46,835:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 204
2024-05-21 18:16:46,836:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:46,836:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:47,624:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:47,635:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010630 seconds.
2024-05-21 18:16:47,635:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:47,637:INFO:[LightGBM] [Info] Total Bins 51765
2024-05-21 18:16:47,640:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 203
2024-05-21 18:16:47,641:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:47,641:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:48,556:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:48,572:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014830 seconds.
2024-05-21 18:16:48,572:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:48,575:INFO:[LightGBM] [Info] Total Bins 51510
2024-05-21 18:16:48,578:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 202
2024-05-21 18:16:48,580:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:48,580:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:49,507:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:49,521:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014563 seconds.
2024-05-21 18:16:49,522:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:49,524:INFO:[LightGBM] [Info] Total Bins 51255
2024-05-21 18:16:49,525:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 201
2024-05-21 18:16:49,527:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:49,527:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:50,177:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:50,188:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009867 seconds.
2024-05-21 18:16:50,188:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:50,190:INFO:[LightGBM] [Info] Total Bins 51000
2024-05-21 18:16:50,191:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 200
2024-05-21 18:16:50,193:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:50,193:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:50,821:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:50,834:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011912 seconds.
2024-05-21 18:16:50,834:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:50,836:INFO:[LightGBM] [Info] Total Bins 50745
2024-05-21 18:16:50,837:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 199
2024-05-21 18:16:50,839:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:50,839:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:51,692:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:51,704:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011662 seconds.
2024-05-21 18:16:51,704:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:51,706:INFO:[LightGBM] [Info] Total Bins 50490
2024-05-21 18:16:51,707:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 198
2024-05-21 18:16:51,709:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:51,709:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:52,620:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:52,633:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012033 seconds.
2024-05-21 18:16:52,633:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:52,635:INFO:[LightGBM] [Info] Total Bins 50235
2024-05-21 18:16:52,636:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 197
2024-05-21 18:16:52,638:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:52,638:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:53,782:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:53,797:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014219 seconds.
2024-05-21 18:16:53,797:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:53,799:INFO:[LightGBM] [Info] Total Bins 49980
2024-05-21 18:16:53,800:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 196
2024-05-21 18:16:53,802:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:53,802:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:54,864:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:54,878:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014039 seconds.
2024-05-21 18:16:54,879:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:54,881:INFO:[LightGBM] [Info] Total Bins 49725
2024-05-21 18:16:54,882:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 195
2024-05-21 18:16:54,884:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:54,884:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:55,921:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:55,932:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010764 seconds.
2024-05-21 18:16:55,933:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:55,935:INFO:[LightGBM] [Info] Total Bins 49470
2024-05-21 18:16:55,936:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 194
2024-05-21 18:16:55,938:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:55,938:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:56,934:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:56,947:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012064 seconds.
2024-05-21 18:16:56,947:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:56,949:INFO:[LightGBM] [Info] Total Bins 49215
2024-05-21 18:16:56,953:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 193
2024-05-21 18:16:56,955:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:56,955:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:58,094:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:58,107:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012597 seconds.
2024-05-21 18:16:58,107:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:58,109:INFO:[LightGBM] [Info] Total Bins 48960
2024-05-21 18:16:58,110:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 192
2024-05-21 18:16:58,112:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:58,112:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:16:59,134:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:16:59,144:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010023 seconds.
2024-05-21 18:16:59,145:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:16:59,146:INFO:[LightGBM] [Info] Total Bins 48705
2024-05-21 18:16:59,148:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 191
2024-05-21 18:16:59,149:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:16:59,149:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:00,078:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:00,088:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010301 seconds.
2024-05-21 18:17:00,089:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:00,091:INFO:[LightGBM] [Info] Total Bins 48450
2024-05-21 18:17:00,092:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 190
2024-05-21 18:17:00,093:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:00,094:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:00,977:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:00,988:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010970 seconds.
2024-05-21 18:17:00,988:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:00,990:INFO:[LightGBM] [Info] Total Bins 48195
2024-05-21 18:17:00,991:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 189
2024-05-21 18:17:00,993:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:00,993:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:02,026:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:02,041:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014350 seconds.
2024-05-21 18:17:02,041:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:02,043:INFO:[LightGBM] [Info] Total Bins 47940
2024-05-21 18:17:02,063:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 188
2024-05-21 18:17:02,064:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:02,065:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:03,175:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:03,191:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015422 seconds.
2024-05-21 18:17:03,191:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:03,194:INFO:[LightGBM] [Info] Total Bins 47685
2024-05-21 18:17:03,195:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 187
2024-05-21 18:17:03,196:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:03,197:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:04,207:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:04,221:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012887 seconds.
2024-05-21 18:17:04,221:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:04,223:INFO:[LightGBM] [Info] Total Bins 47430
2024-05-21 18:17:04,224:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 186
2024-05-21 18:17:04,226:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:04,227:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:04,943:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:04,953:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009511 seconds.
2024-05-21 18:17:04,954:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:04,955:INFO:[LightGBM] [Info] Total Bins 47175
2024-05-21 18:17:04,957:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 185
2024-05-21 18:17:04,958:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:04,958:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:05,881:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:05,893:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011460 seconds.
2024-05-21 18:17:05,893:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:05,895:INFO:[LightGBM] [Info] Total Bins 46920
2024-05-21 18:17:05,897:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 184
2024-05-21 18:17:05,898:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:05,899:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:06,909:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:06,922:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012099 seconds.
2024-05-21 18:17:06,922:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:06,924:INFO:[LightGBM] [Info] Total Bins 46665
2024-05-21 18:17:06,926:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 183
2024-05-21 18:17:06,928:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:06,929:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:07,671:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:07,684:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012750 seconds.
2024-05-21 18:17:07,684:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:07,686:INFO:[LightGBM] [Info] Total Bins 46410
2024-05-21 18:17:07,687:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 182
2024-05-21 18:17:07,688:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:07,689:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:08,384:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:08,394:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009408 seconds.
2024-05-21 18:17:08,394:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:08,396:INFO:[LightGBM] [Info] Total Bins 46155
2024-05-21 18:17:08,397:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 181
2024-05-21 18:17:08,399:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:08,399:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:09,174:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:09,184:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009631 seconds.
2024-05-21 18:17:09,184:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:09,186:INFO:[LightGBM] [Info] Total Bins 45900
2024-05-21 18:17:09,187:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 180
2024-05-21 18:17:09,189:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:09,189:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:10,001:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:10,012:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010693 seconds.
2024-05-21 18:17:10,012:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:10,014:INFO:[LightGBM] [Info] Total Bins 45645
2024-05-21 18:17:10,015:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 179
2024-05-21 18:17:10,017:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:10,017:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:10,904:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:10,914:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010226 seconds.
2024-05-21 18:17:10,914:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:10,916:INFO:[LightGBM] [Info] Total Bins 45390
2024-05-21 18:17:10,917:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 178
2024-05-21 18:17:10,919:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:10,919:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:11,740:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:11,750:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009225 seconds.
2024-05-21 18:17:11,750:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:11,752:INFO:[LightGBM] [Info] Total Bins 45135
2024-05-21 18:17:11,753:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 177
2024-05-21 18:17:11,754:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:11,754:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:12,447:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:12,457:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009625 seconds.
2024-05-21 18:17:12,457:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:12,459:INFO:[LightGBM] [Info] Total Bins 44880
2024-05-21 18:17:12,460:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 176
2024-05-21 18:17:12,461:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:12,461:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:13,106:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:13,115:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008463 seconds.
2024-05-21 18:17:13,115:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:13,116:INFO:[LightGBM] [Info] Total Bins 44625
2024-05-21 18:17:13,118:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 175
2024-05-21 18:17:13,119:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:13,119:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:13,770:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:13,781:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010083 seconds.
2024-05-21 18:17:13,781:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:13,783:INFO:[LightGBM] [Info] Total Bins 44370
2024-05-21 18:17:13,789:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 174
2024-05-21 18:17:13,790:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:13,791:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:14,636:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:14,648:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010958 seconds.
2024-05-21 18:17:14,648:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:14,650:INFO:[LightGBM] [Info] Total Bins 44115
2024-05-21 18:17:14,651:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 173
2024-05-21 18:17:14,653:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:14,653:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:15,491:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:15,501:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009228 seconds.
2024-05-21 18:17:15,501:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:15,502:INFO:[LightGBM] [Info] Total Bins 43860
2024-05-21 18:17:15,504:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 172
2024-05-21 18:17:15,505:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:15,505:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:16,276:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:16,285:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008128 seconds.
2024-05-21 18:17:16,285:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:16,286:INFO:[LightGBM] [Info] Total Bins 43605
2024-05-21 18:17:16,288:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 171
2024-05-21 18:17:16,289:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:16,289:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:16,946:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:16,955:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009020 seconds.
2024-05-21 18:17:16,955:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:16,957:INFO:[LightGBM] [Info] Total Bins 43350
2024-05-21 18:17:16,958:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 170
2024-05-21 18:17:16,960:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:16,960:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:17,631:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:17,642:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010959 seconds.
2024-05-21 18:17:17,642:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:17,644:INFO:[LightGBM] [Info] Total Bins 43095
2024-05-21 18:17:17,645:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 169
2024-05-21 18:17:17,646:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:17,646:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:18,309:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:18,322:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013048 seconds.
2024-05-21 18:17:18,323:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:18,327:INFO:[LightGBM] [Info] Total Bins 42840
2024-05-21 18:17:18,328:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 168
2024-05-21 18:17:18,330:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:18,330:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:19,267:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:19,276:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009092 seconds.
2024-05-21 18:17:19,276:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:19,278:INFO:[LightGBM] [Info] Total Bins 42585
2024-05-21 18:17:19,279:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 167
2024-05-21 18:17:19,280:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:19,280:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:20,200:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:20,213:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013005 seconds.
2024-05-21 18:17:20,213:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:20,216:INFO:[LightGBM] [Info] Total Bins 42330
2024-05-21 18:17:20,217:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 166
2024-05-21 18:17:20,219:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:20,219:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:20,925:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:20,937:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011829 seconds.
2024-05-21 18:17:20,937:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:20,939:INFO:[LightGBM] [Info] Total Bins 42075
2024-05-21 18:17:20,941:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 165
2024-05-21 18:17:20,942:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:20,943:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:21,491:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:21,503:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011683 seconds.
2024-05-21 18:17:21,504:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:21,506:INFO:[LightGBM] [Info] Total Bins 41820
2024-05-21 18:17:21,508:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 164
2024-05-21 18:17:21,509:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:21,509:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:22,260:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:22,271:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011044 seconds.
2024-05-21 18:17:22,272:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:22,273:INFO:[LightGBM] [Info] Total Bins 41565
2024-05-21 18:17:22,275:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 163
2024-05-21 18:17:22,276:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:22,276:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:23,201:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:23,214:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012268 seconds.
2024-05-21 18:17:23,214:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:23,216:INFO:[LightGBM] [Info] Total Bins 41310
2024-05-21 18:17:23,217:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 162
2024-05-21 18:17:23,219:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:23,219:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:24,024:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:24,032:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008427 seconds.
2024-05-21 18:17:24,032:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:24,035:INFO:[LightGBM] [Info] Total Bins 41055
2024-05-21 18:17:24,036:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 161
2024-05-21 18:17:24,037:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:24,038:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:24,848:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:24,856:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007718 seconds.
2024-05-21 18:17:24,857:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:24,859:INFO:[LightGBM] [Info] Total Bins 40800
2024-05-21 18:17:24,860:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 160
2024-05-21 18:17:24,861:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:24,862:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:25,568:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:25,576:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007520 seconds.
2024-05-21 18:17:25,577:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:25,578:INFO:[LightGBM] [Info] Total Bins 40545
2024-05-21 18:17:25,579:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 159
2024-05-21 18:17:25,581:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:25,581:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:26,114:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:26,124:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008841 seconds.
2024-05-21 18:17:26,124:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:26,125:INFO:[LightGBM] [Info] Total Bins 40290
2024-05-21 18:17:26,126:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 158
2024-05-21 18:17:26,128:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:26,128:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:26,699:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:26,708:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009105 seconds.
2024-05-21 18:17:26,708:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:26,710:INFO:[LightGBM] [Info] Total Bins 40035
2024-05-21 18:17:26,711:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 157
2024-05-21 18:17:26,712:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:26,713:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:27,554:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:27,564:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009172 seconds.
2024-05-21 18:17:27,564:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:27,565:INFO:[LightGBM] [Info] Total Bins 39780
2024-05-21 18:17:27,567:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 156
2024-05-21 18:17:27,568:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:27,568:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:28,340:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:28,351:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010482 seconds.
2024-05-21 18:17:28,351:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:28,353:INFO:[LightGBM] [Info] Total Bins 39525
2024-05-21 18:17:28,354:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 155
2024-05-21 18:17:28,356:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:28,356:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:29,128:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:29,138:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008627 seconds.
2024-05-21 18:17:29,138:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:29,139:INFO:[LightGBM] [Info] Total Bins 39270
2024-05-21 18:17:29,140:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 154
2024-05-21 18:17:29,142:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:29,142:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:29,768:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:29,775:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007304 seconds.
2024-05-21 18:17:29,775:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:29,777:INFO:[LightGBM] [Info] Total Bins 39015
2024-05-21 18:17:29,778:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 153
2024-05-21 18:17:29,780:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:29,780:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:30,303:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:30,311:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007063 seconds.
2024-05-21 18:17:30,311:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:30,312:INFO:[LightGBM] [Info] Total Bins 38760
2024-05-21 18:17:30,314:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 152
2024-05-21 18:17:30,315:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:30,315:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:30,956:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:30,964:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007197 seconds.
2024-05-21 18:17:30,964:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:30,965:INFO:[LightGBM] [Info] Total Bins 38505
2024-05-21 18:17:30,966:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 151
2024-05-21 18:17:30,968:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:30,968:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:31,496:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:31,509:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011974 seconds.
2024-05-21 18:17:31,509:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:31,510:INFO:[LightGBM] [Info] Total Bins 38250
2024-05-21 18:17:31,514:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 150
2024-05-21 18:17:31,515:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:31,515:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:32,263:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:32,272:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008403 seconds.
2024-05-21 18:17:32,272:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:32,274:INFO:[LightGBM] [Info] Total Bins 37995
2024-05-21 18:17:32,275:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 149
2024-05-21 18:17:32,276:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:32,276:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:33,098:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:33,110:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012053 seconds.
2024-05-21 18:17:33,110:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:33,112:INFO:[LightGBM] [Info] Total Bins 37740
2024-05-21 18:17:33,113:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 148
2024-05-21 18:17:33,114:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:33,115:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:33,874:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:33,881:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006879 seconds.
2024-05-21 18:17:33,882:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:33,883:INFO:[LightGBM] [Info] Total Bins 37485
2024-05-21 18:17:33,884:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 147
2024-05-21 18:17:33,885:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:33,885:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:34,390:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:34,399:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008048 seconds.
2024-05-21 18:17:34,399:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:34,400:INFO:[LightGBM] [Info] Total Bins 37230
2024-05-21 18:17:34,401:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 146
2024-05-21 18:17:34,402:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:34,403:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:34,956:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:34,964:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007213 seconds.
2024-05-21 18:17:34,964:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:34,965:INFO:[LightGBM] [Info] Total Bins 36975
2024-05-21 18:17:34,966:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 145
2024-05-21 18:17:34,968:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:34,968:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:35,478:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:35,485:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007072 seconds.
2024-05-21 18:17:35,486:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:35,487:INFO:[LightGBM] [Info] Total Bins 36720
2024-05-21 18:17:35,488:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 144
2024-05-21 18:17:35,489:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:35,489:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:36,056:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:36,066:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009745 seconds.
2024-05-21 18:17:36,067:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:36,068:INFO:[LightGBM] [Info] Total Bins 36465
2024-05-21 18:17:36,069:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 143
2024-05-21 18:17:36,070:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:36,070:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:36,784:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:36,792:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007871 seconds.
2024-05-21 18:17:36,793:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:36,794:INFO:[LightGBM] [Info] Total Bins 36210
2024-05-21 18:17:36,795:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 142
2024-05-21 18:17:36,796:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:36,797:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:37,492:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:37,500:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007811 seconds.
2024-05-21 18:17:37,513:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:37,514:INFO:[LightGBM] [Info] Total Bins 35955
2024-05-21 18:17:37,515:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 141
2024-05-21 18:17:37,517:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:37,517:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:38,273:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:38,281:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007644 seconds.
2024-05-21 18:17:38,281:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:38,282:INFO:[LightGBM] [Info] Total Bins 35700
2024-05-21 18:17:38,283:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 140
2024-05-21 18:17:38,284:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:38,285:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:38,835:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:38,841:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006484 seconds.
2024-05-21 18:17:38,841:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:38,842:INFO:[LightGBM] [Info] Total Bins 35445
2024-05-21 18:17:38,843:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 139
2024-05-21 18:17:38,844:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:38,845:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:39,283:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:39,289:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006365 seconds.
2024-05-21 18:17:39,289:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:39,291:INFO:[LightGBM] [Info] Total Bins 35190
2024-05-21 18:17:39,291:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 138
2024-05-21 18:17:39,293:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:39,293:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:39,764:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:39,771:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006389 seconds.
2024-05-21 18:17:39,771:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:39,772:INFO:[LightGBM] [Info] Total Bins 34935
2024-05-21 18:17:39,775:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 137
2024-05-21 18:17:39,776:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:39,776:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:40,241:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:40,249:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007445 seconds.
2024-05-21 18:17:40,249:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:40,251:INFO:[LightGBM] [Info] Total Bins 34680
2024-05-21 18:17:40,252:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 136
2024-05-21 18:17:40,253:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:40,253:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:40,928:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:40,937:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008331 seconds.
2024-05-21 18:17:40,937:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:40,939:INFO:[LightGBM] [Info] Total Bins 34425
2024-05-21 18:17:40,940:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 135
2024-05-21 18:17:40,941:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:40,942:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:41,662:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:41,669:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007508 seconds.
2024-05-21 18:17:41,670:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:41,671:INFO:[LightGBM] [Info] Total Bins 34170
2024-05-21 18:17:41,672:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 134
2024-05-21 18:17:41,673:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:41,673:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:42,419:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:42,427:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007240 seconds.
2024-05-21 18:17:42,428:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:42,429:INFO:[LightGBM] [Info] Total Bins 33915
2024-05-21 18:17:42,430:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 133
2024-05-21 18:17:42,431:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:42,431:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:42,964:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:42,972:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007006 seconds.
2024-05-21 18:17:42,972:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:42,974:INFO:[LightGBM] [Info] Total Bins 33660
2024-05-21 18:17:42,975:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 132
2024-05-21 18:17:42,976:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:42,976:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:43,511:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:43,519:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007905 seconds.
2024-05-21 18:17:43,519:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:43,521:INFO:[LightGBM] [Info] Total Bins 33405
2024-05-21 18:17:43,522:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 131
2024-05-21 18:17:43,523:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:43,523:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:44,142:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:44,149:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006464 seconds.
2024-05-21 18:17:44,149:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:44,150:INFO:[LightGBM] [Info] Total Bins 33150
2024-05-21 18:17:44,151:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 130
2024-05-21 18:17:44,152:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:44,153:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:44,794:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:44,802:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007504 seconds.
2024-05-21 18:17:44,802:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:44,804:INFO:[LightGBM] [Info] Total Bins 32895
2024-05-21 18:17:44,805:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 129
2024-05-21 18:17:44,806:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:44,806:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:45,478:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:45,485:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006758 seconds.
2024-05-21 18:17:45,486:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:45,487:INFO:[LightGBM] [Info] Total Bins 32640
2024-05-21 18:17:45,488:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 128
2024-05-21 18:17:45,489:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:45,490:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:46,251:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:46,259:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007477 seconds.
2024-05-21 18:17:46,259:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:46,260:INFO:[LightGBM] [Info] Total Bins 32385
2024-05-21 18:17:46,261:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 127
2024-05-21 18:17:46,262:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:46,262:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:46,880:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:46,887:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006582 seconds.
2024-05-21 18:17:46,887:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:46,889:INFO:[LightGBM] [Info] Total Bins 32130
2024-05-21 18:17:46,890:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 126
2024-05-21 18:17:46,891:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:46,891:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:47,281:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:47,288:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006283 seconds.
2024-05-21 18:17:47,288:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:47,290:INFO:[LightGBM] [Info] Total Bins 31875
2024-05-21 18:17:47,290:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 125
2024-05-21 18:17:47,291:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:47,291:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:47,781:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:47,787:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005666 seconds.
2024-05-21 18:17:47,787:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:47,788:INFO:[LightGBM] [Info] Total Bins 31620
2024-05-21 18:17:47,789:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 124
2024-05-21 18:17:47,790:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:47,791:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:48,211:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:48,220:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008828 seconds.
2024-05-21 18:17:48,220:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:48,222:INFO:[LightGBM] [Info] Total Bins 31365
2024-05-21 18:17:48,223:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 123
2024-05-21 18:17:48,224:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:48,224:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:48,712:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:48,717:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005594 seconds.
2024-05-21 18:17:48,718:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:48,719:INFO:[LightGBM] [Info] Total Bins 31110
2024-05-21 18:17:48,720:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 122
2024-05-21 18:17:48,721:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:48,721:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:49,212:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:49,220:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008007 seconds.
2024-05-21 18:17:49,221:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:49,222:INFO:[LightGBM] [Info] Total Bins 30855
2024-05-21 18:17:49,223:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 121
2024-05-21 18:17:49,224:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:49,224:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:49,833:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:49,841:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008165 seconds.
2024-05-21 18:17:49,841:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:49,843:INFO:[LightGBM] [Info] Total Bins 30600
2024-05-21 18:17:49,843:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 120
2024-05-21 18:17:49,845:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:49,845:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:50,436:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:50,443:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007010 seconds.
2024-05-21 18:17:50,443:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:50,444:INFO:[LightGBM] [Info] Total Bins 30345
2024-05-21 18:17:50,445:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 119
2024-05-21 18:17:50,446:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:50,446:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:51,047:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:51,054:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006284 seconds.
2024-05-21 18:17:51,054:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:51,055:INFO:[LightGBM] [Info] Total Bins 30090
2024-05-21 18:17:51,056:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 118
2024-05-21 18:17:51,057:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:51,057:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:51,602:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:51,608:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006254 seconds.
2024-05-21 18:17:51,608:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:51,609:INFO:[LightGBM] [Info] Total Bins 29835
2024-05-21 18:17:51,610:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 117
2024-05-21 18:17:51,611:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:51,612:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:52,182:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:52,189:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006236 seconds.
2024-05-21 18:17:52,189:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:52,190:INFO:[LightGBM] [Info] Total Bins 29580
2024-05-21 18:17:52,191:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 116
2024-05-21 18:17:52,192:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:52,192:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:52,616:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:52,622:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006216 seconds.
2024-05-21 18:17:52,622:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:52,623:INFO:[LightGBM] [Info] Total Bins 29325
2024-05-21 18:17:52,624:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 115
2024-05-21 18:17:52,625:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:52,625:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:52,999:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:53,005:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005076 seconds.
2024-05-21 18:17:53,005:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:53,006:INFO:[LightGBM] [Info] Total Bins 29070
2024-05-21 18:17:53,007:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 114
2024-05-21 18:17:53,008:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:53,008:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:53,593:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:53,600:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006624 seconds.
2024-05-21 18:17:53,600:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:53,601:INFO:[LightGBM] [Info] Total Bins 28815
2024-05-21 18:17:53,602:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 113
2024-05-21 18:17:53,603:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:53,603:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:54,276:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:54,284:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007485 seconds.
2024-05-21 18:17:54,284:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:54,285:INFO:[LightGBM] [Info] Total Bins 28560
2024-05-21 18:17:54,286:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 112
2024-05-21 18:17:54,287:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:54,287:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:54,983:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:54,991:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007218 seconds.
2024-05-21 18:17:54,991:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:54,992:INFO:[LightGBM] [Info] Total Bins 28305
2024-05-21 18:17:54,993:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 111
2024-05-21 18:17:54,994:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:54,994:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:55,603:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:55,610:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006525 seconds.
2024-05-21 18:17:55,610:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:55,611:INFO:[LightGBM] [Info] Total Bins 28050
2024-05-21 18:17:55,612:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 110
2024-05-21 18:17:55,613:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:55,613:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:56,098:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:56,103:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004803 seconds.
2024-05-21 18:17:56,103:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:56,104:INFO:[LightGBM] [Info] Total Bins 27795
2024-05-21 18:17:56,105:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 109
2024-05-21 18:17:56,106:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:56,106:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:56,446:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:56,451:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004877 seconds.
2024-05-21 18:17:56,452:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:56,453:INFO:[LightGBM] [Info] Total Bins 27540
2024-05-21 18:17:56,453:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 108
2024-05-21 18:17:56,454:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:56,454:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:56,810:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:56,815:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004865 seconds.
2024-05-21 18:17:56,815:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:56,816:INFO:[LightGBM] [Info] Total Bins 27285
2024-05-21 18:17:56,817:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 107
2024-05-21 18:17:56,818:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:56,818:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:57,170:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:57,175:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004632 seconds.
2024-05-21 18:17:57,175:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:57,176:INFO:[LightGBM] [Info] Total Bins 27030
2024-05-21 18:17:57,177:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 106
2024-05-21 18:17:57,178:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:57,178:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:57,514:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:57,519:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004853 seconds.
2024-05-21 18:17:57,519:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:57,520:INFO:[LightGBM] [Info] Total Bins 26775
2024-05-21 18:17:57,521:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 105
2024-05-21 18:17:57,522:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:57,522:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:57,991:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:57,997:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005392 seconds.
2024-05-21 18:17:57,997:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:57,998:INFO:[LightGBM] [Info] Total Bins 26520
2024-05-21 18:17:57,999:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 104
2024-05-21 18:17:58,000:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:58,000:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:58,521:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:58,527:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005613 seconds.
2024-05-21 18:17:58,527:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:58,528:INFO:[LightGBM] [Info] Total Bins 26265
2024-05-21 18:17:58,528:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 103
2024-05-21 18:17:58,529:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:58,530:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:17:59,083:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:17:59,090:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007054 seconds.
2024-05-21 18:17:59,091:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:17:59,092:INFO:[LightGBM] [Info] Total Bins 26010
2024-05-21 18:17:59,092:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 102
2024-05-21 18:17:59,093:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:17:59,093:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:00,192:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:00,211:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019473 seconds.
2024-05-21 18:18:00,212:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:00,213:INFO:[LightGBM] [Info] Total Bins 25755
2024-05-21 18:18:00,218:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 101
2024-05-21 18:18:00,219:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:00,220:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:02,891:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:02,912:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.011964 seconds.
2024-05-21 18:18:02,912:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-05-21 18:18:02,913:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-05-21 18:18:02,913:INFO:[LightGBM] [Info] Total Bins 25500
2024-05-21 18:18:02,914:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 100
2024-05-21 18:18:02,915:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:02,916:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:04,456:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:04,463:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006644 seconds.
2024-05-21 18:18:04,463:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:04,464:INFO:[LightGBM] [Info] Total Bins 25245
2024-05-21 18:18:04,465:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 99
2024-05-21 18:18:04,466:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:04,466:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:05,082:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:05,089:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006341 seconds.
2024-05-21 18:18:05,089:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:05,090:INFO:[LightGBM] [Info] Total Bins 24990
2024-05-21 18:18:05,090:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 98
2024-05-21 18:18:05,091:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:05,091:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:05,676:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:05,682:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005076 seconds.
2024-05-21 18:18:05,682:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:05,683:INFO:[LightGBM] [Info] Total Bins 24735
2024-05-21 18:18:05,684:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 97
2024-05-21 18:18:05,685:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:05,685:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:06,217:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:06,223:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005398 seconds.
2024-05-21 18:18:06,223:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:06,224:INFO:[LightGBM] [Info] Total Bins 24480
2024-05-21 18:18:06,225:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 96
2024-05-21 18:18:06,226:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:06,226:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:06,795:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:06,802:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006121 seconds.
2024-05-21 18:18:06,802:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:06,803:INFO:[LightGBM] [Info] Total Bins 24225
2024-05-21 18:18:06,804:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 95
2024-05-21 18:18:06,805:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:06,805:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:07,361:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:07,367:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006091 seconds.
2024-05-21 18:18:07,367:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:07,369:INFO:[LightGBM] [Info] Total Bins 23970
2024-05-21 18:18:07,370:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 94
2024-05-21 18:18:07,371:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:07,371:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:07,963:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:07,970:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006711 seconds.
2024-05-21 18:18:07,970:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:07,971:INFO:[LightGBM] [Info] Total Bins 23715
2024-05-21 18:18:07,972:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 93
2024-05-21 18:18:07,973:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:07,973:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:08,545:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:08,551:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006359 seconds.
2024-05-21 18:18:08,551:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:08,552:INFO:[LightGBM] [Info] Total Bins 23460
2024-05-21 18:18:08,553:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 92
2024-05-21 18:18:08,554:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:08,554:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:09,087:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:09,093:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005441 seconds.
2024-05-21 18:18:09,093:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:09,094:INFO:[LightGBM] [Info] Total Bins 23205
2024-05-21 18:18:09,095:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 91
2024-05-21 18:18:09,096:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:09,096:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:09,554:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:09,560:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005915 seconds.
2024-05-21 18:18:09,560:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:09,561:INFO:[LightGBM] [Info] Total Bins 22950
2024-05-21 18:18:09,562:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 90
2024-05-21 18:18:09,563:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:09,563:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:10,031:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:10,036:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004470 seconds.
2024-05-21 18:18:10,036:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:10,037:INFO:[LightGBM] [Info] Total Bins 22695
2024-05-21 18:18:10,037:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 89
2024-05-21 18:18:10,038:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:10,038:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:10,504:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:10,509:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004493 seconds.
2024-05-21 18:18:10,509:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:10,510:INFO:[LightGBM] [Info] Total Bins 22440
2024-05-21 18:18:10,510:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 88
2024-05-21 18:18:10,511:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:10,512:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:11,034:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:11,040:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005296 seconds.
2024-05-21 18:18:11,040:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:11,041:INFO:[LightGBM] [Info] Total Bins 22185
2024-05-21 18:18:11,041:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 87
2024-05-21 18:18:11,042:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:11,042:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:11,560:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:11,568:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007150 seconds.
2024-05-21 18:18:11,584:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:11,585:INFO:[LightGBM] [Info] Total Bins 21930
2024-05-21 18:18:11,585:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 86
2024-05-21 18:18:11,586:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:11,587:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:12,040:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:12,045:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004835 seconds.
2024-05-21 18:18:12,046:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:12,047:INFO:[LightGBM] [Info] Total Bins 21675
2024-05-21 18:18:12,047:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 85
2024-05-21 18:18:12,048:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:12,048:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:12,485:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:12,490:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005252 seconds.
2024-05-21 18:18:12,490:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:12,491:INFO:[LightGBM] [Info] Total Bins 21420
2024-05-21 18:18:12,492:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 84
2024-05-21 18:18:12,493:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:12,493:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:12,940:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:12,957:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005277 seconds.
2024-05-21 18:18:12,957:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:12,958:INFO:[LightGBM] [Info] Total Bins 21165
2024-05-21 18:18:12,958:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 83
2024-05-21 18:18:12,959:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:12,959:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:13,390:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:13,395:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004033 seconds.
2024-05-21 18:18:13,395:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:13,396:INFO:[LightGBM] [Info] Total Bins 20910
2024-05-21 18:18:13,396:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 82
2024-05-21 18:18:13,397:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:13,397:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:13,765:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:13,769:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003932 seconds.
2024-05-21 18:18:13,769:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:13,770:INFO:[LightGBM] [Info] Total Bins 20655
2024-05-21 18:18:13,771:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 81
2024-05-21 18:18:13,772:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:13,772:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:14,120:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:14,125:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004020 seconds.
2024-05-21 18:18:14,125:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:14,126:INFO:[LightGBM] [Info] Total Bins 20400
2024-05-21 18:18:14,126:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 80
2024-05-21 18:18:14,127:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:14,127:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:14,523:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:14,528:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004106 seconds.
2024-05-21 18:18:14,528:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:14,529:INFO:[LightGBM] [Info] Total Bins 20145
2024-05-21 18:18:14,529:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 79
2024-05-21 18:18:14,531:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:14,531:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:14,871:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:14,875:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003420 seconds.
2024-05-21 18:18:14,875:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:14,876:INFO:[LightGBM] [Info] Total Bins 19890
2024-05-21 18:18:14,876:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 78
2024-05-21 18:18:14,877:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:14,877:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:15,150:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:15,154:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003443 seconds.
2024-05-21 18:18:15,154:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:15,155:INFO:[LightGBM] [Info] Total Bins 19635
2024-05-21 18:18:15,155:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 77
2024-05-21 18:18:15,156:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:15,156:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:15,486:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:15,491:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004311 seconds.
2024-05-21 18:18:15,491:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:15,492:INFO:[LightGBM] [Info] Total Bins 19380
2024-05-21 18:18:15,493:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 76
2024-05-21 18:18:15,493:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:15,494:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:15,926:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:15,931:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003798 seconds.
2024-05-21 18:18:15,931:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:15,931:INFO:[LightGBM] [Info] Total Bins 19125
2024-05-21 18:18:15,932:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 75
2024-05-21 18:18:15,933:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:15,933:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:16,336:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:16,341:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004482 seconds.
2024-05-21 18:18:16,341:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:16,342:INFO:[LightGBM] [Info] Total Bins 18870
2024-05-21 18:18:16,342:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 74
2024-05-21 18:18:16,343:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:16,343:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:16,769:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:16,776:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005799 seconds.
2024-05-21 18:18:16,776:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:16,777:INFO:[LightGBM] [Info] Total Bins 18615
2024-05-21 18:18:16,777:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 73
2024-05-21 18:18:16,779:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:16,779:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:17,243:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:17,247:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003648 seconds.
2024-05-21 18:18:17,247:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:17,248:INFO:[LightGBM] [Info] Total Bins 18360
2024-05-21 18:18:17,249:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 72
2024-05-21 18:18:17,249:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:17,250:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:17,698:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:17,704:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005143 seconds.
2024-05-21 18:18:17,704:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:17,705:INFO:[LightGBM] [Info] Total Bins 18105
2024-05-21 18:18:17,705:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 71
2024-05-21 18:18:17,706:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:17,707:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:18,117:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:18,121:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003186 seconds.
2024-05-21 18:18:18,121:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:18,121:INFO:[LightGBM] [Info] Total Bins 17850
2024-05-21 18:18:18,122:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 70
2024-05-21 18:18:18,123:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:18,123:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:18,510:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:18,513:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003012 seconds.
2024-05-21 18:18:18,513:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:18,514:INFO:[LightGBM] [Info] Total Bins 17595
2024-05-21 18:18:18,514:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 69
2024-05-21 18:18:18,515:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:18,515:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:18,859:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:18,863:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003394 seconds.
2024-05-21 18:18:18,863:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:18,864:INFO:[LightGBM] [Info] Total Bins 17340
2024-05-21 18:18:18,864:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 68
2024-05-21 18:18:18,865:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:18,865:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:19,106:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:19,110:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003011 seconds.
2024-05-21 18:18:19,110:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:19,110:INFO:[LightGBM] [Info] Total Bins 17085
2024-05-21 18:18:19,111:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 67
2024-05-21 18:18:19,112:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:19,112:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:19,340:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:19,343:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003039 seconds.
2024-05-21 18:18:19,343:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:19,344:INFO:[LightGBM] [Info] Total Bins 16830
2024-05-21 18:18:19,345:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 66
2024-05-21 18:18:19,345:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:19,345:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:19,598:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:19,601:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002966 seconds.
2024-05-21 18:18:19,601:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:19,602:INFO:[LightGBM] [Info] Total Bins 16575
2024-05-21 18:18:19,602:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 65
2024-05-21 18:18:19,603:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:19,603:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:19,841:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:19,844:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003118 seconds.
2024-05-21 18:18:19,844:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:19,845:INFO:[LightGBM] [Info] Total Bins 16320
2024-05-21 18:18:19,845:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 64
2024-05-21 18:18:19,846:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:19,846:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:20,217:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:20,221:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003090 seconds.
2024-05-21 18:18:20,221:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:20,222:INFO:[LightGBM] [Info] Total Bins 16065
2024-05-21 18:18:20,222:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 63
2024-05-21 18:18:20,223:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:20,223:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:20,585:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:20,589:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003293 seconds.
2024-05-21 18:18:20,589:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:20,590:INFO:[LightGBM] [Info] Total Bins 15810
2024-05-21 18:18:20,590:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 62
2024-05-21 18:18:20,591:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:20,591:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:20,949:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:20,952:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002964 seconds.
2024-05-21 18:18:20,952:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:20,953:INFO:[LightGBM] [Info] Total Bins 15555
2024-05-21 18:18:20,953:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 61
2024-05-21 18:18:20,953:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:20,954:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:21,302:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:21,306:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003520 seconds.
2024-05-21 18:18:21,306:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:21,307:INFO:[LightGBM] [Info] Total Bins 15300
2024-05-21 18:18:21,307:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 60
2024-05-21 18:18:21,308:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:21,308:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:21,670:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:21,674:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002891 seconds.
2024-05-21 18:18:21,674:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:21,674:INFO:[LightGBM] [Info] Total Bins 15045
2024-05-21 18:18:21,675:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 59
2024-05-21 18:18:21,676:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:21,676:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:22,019:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:22,022:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003030 seconds.
2024-05-21 18:18:22,022:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:22,023:INFO:[LightGBM] [Info] Total Bins 14790
2024-05-21 18:18:22,023:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 58
2024-05-21 18:18:22,024:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:22,024:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:22,377:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:22,380:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002817 seconds.
2024-05-21 18:18:22,380:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:22,380:INFO:[LightGBM] [Info] Total Bins 14535
2024-05-21 18:18:22,381:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 57
2024-05-21 18:18:22,381:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:22,382:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:22,732:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:22,734:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002495 seconds.
2024-05-21 18:18:22,734:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:22,735:INFO:[LightGBM] [Info] Total Bins 14280
2024-05-21 18:18:22,735:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 56
2024-05-21 18:18:22,736:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:22,736:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:23,036:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:23,039:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002852 seconds.
2024-05-21 18:18:23,039:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:23,040:INFO:[LightGBM] [Info] Total Bins 14025
2024-05-21 18:18:23,040:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 55
2024-05-21 18:18:23,041:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:23,041:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:23,290:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:23,293:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002483 seconds.
2024-05-21 18:18:23,293:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:23,294:INFO:[LightGBM] [Info] Total Bins 13770
2024-05-21 18:18:23,294:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 54
2024-05-21 18:18:23,295:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:23,295:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:23,583:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:23,587:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003354 seconds.
2024-05-21 18:18:23,587:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:23,588:INFO:[LightGBM] [Info] Total Bins 13515
2024-05-21 18:18:23,588:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 53
2024-05-21 18:18:23,589:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:23,590:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:24,067:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:24,070:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002743 seconds.
2024-05-21 18:18:24,070:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:24,071:INFO:[LightGBM] [Info] Total Bins 13260
2024-05-21 18:18:24,071:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 52
2024-05-21 18:18:24,072:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:24,072:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:24,395:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:24,399:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003437 seconds.
2024-05-21 18:18:24,399:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:24,400:INFO:[LightGBM] [Info] Total Bins 13005
2024-05-21 18:18:24,400:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 51
2024-05-21 18:18:24,401:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:24,401:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:24,761:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:24,764:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002617 seconds.
2024-05-21 18:18:24,764:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:24,765:INFO:[LightGBM] [Info] Total Bins 12750
2024-05-21 18:18:24,765:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 50
2024-05-21 18:18:24,766:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:24,766:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:25,101:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:25,106:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005027 seconds.
2024-05-21 18:18:25,106:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:25,107:INFO:[LightGBM] [Info] Total Bins 12495
2024-05-21 18:18:25,108:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 49
2024-05-21 18:18:25,108:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:25,109:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:25,645:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:25,649:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002940 seconds.
2024-05-21 18:18:25,649:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:25,650:INFO:[LightGBM] [Info] Total Bins 12240
2024-05-21 18:18:25,650:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 48
2024-05-21 18:18:25,651:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:25,651:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:26,019:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:26,022:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002976 seconds.
2024-05-21 18:18:26,022:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:26,023:INFO:[LightGBM] [Info] Total Bins 11985
2024-05-21 18:18:26,023:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 47
2024-05-21 18:18:26,024:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:26,024:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:26,333:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:26,335:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002262 seconds.
2024-05-21 18:18:26,335:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:26,336:INFO:[LightGBM] [Info] Total Bins 11730
2024-05-21 18:18:26,336:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 46
2024-05-21 18:18:26,337:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:26,337:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:26,631:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:26,633:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002135 seconds.
2024-05-21 18:18:26,633:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:26,634:INFO:[LightGBM] [Info] Total Bins 11475
2024-05-21 18:18:26,634:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 45
2024-05-21 18:18:26,635:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:26,635:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:26,815:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:26,817:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002273 seconds.
2024-05-21 18:18:26,817:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:26,818:INFO:[LightGBM] [Info] Total Bins 11220
2024-05-21 18:18:26,818:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 44
2024-05-21 18:18:26,819:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:26,819:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:27,053:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:27,055:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002012 seconds.
2024-05-21 18:18:27,055:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:27,055:INFO:[LightGBM] [Info] Total Bins 10965
2024-05-21 18:18:27,056:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 43
2024-05-21 18:18:27,056:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:27,056:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:27,256:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:27,259:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002118 seconds.
2024-05-21 18:18:27,259:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:27,259:INFO:[LightGBM] [Info] Total Bins 10710
2024-05-21 18:18:27,260:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 42
2024-05-21 18:18:27,260:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:27,260:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:27,437:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:27,440:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002190 seconds.
2024-05-21 18:18:27,440:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:27,440:INFO:[LightGBM] [Info] Total Bins 10455
2024-05-21 18:18:27,441:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 41
2024-05-21 18:18:27,441:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:27,441:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:27,640:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:27,643:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001852 seconds.
2024-05-21 18:18:27,643:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:27,643:INFO:[LightGBM] [Info] Total Bins 10200
2024-05-21 18:18:27,644:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 40
2024-05-21 18:18:27,644:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:27,644:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:27,823:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:27,825:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001763 seconds.
2024-05-21 18:18:27,825:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:27,826:INFO:[LightGBM] [Info] Total Bins 9945
2024-05-21 18:18:27,826:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 39
2024-05-21 18:18:27,827:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:27,827:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:28,012:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:28,014:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001762 seconds.
2024-05-21 18:18:28,014:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:28,014:INFO:[LightGBM] [Info] Total Bins 9690
2024-05-21 18:18:28,015:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 38
2024-05-21 18:18:28,015:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:28,015:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:28,188:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:28,190:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001986 seconds.
2024-05-21 18:18:28,191:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:28,191:INFO:[LightGBM] [Info] Total Bins 9435
2024-05-21 18:18:28,191:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 37
2024-05-21 18:18:28,192:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:28,192:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:28,362:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:28,364:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001621 seconds.
2024-05-21 18:18:28,364:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:28,365:INFO:[LightGBM] [Info] Total Bins 9180
2024-05-21 18:18:28,365:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 36
2024-05-21 18:18:28,365:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:28,366:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:28,536:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:28,538:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002217 seconds.
2024-05-21 18:18:28,538:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:28,539:INFO:[LightGBM] [Info] Total Bins 8925
2024-05-21 18:18:28,539:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 35
2024-05-21 18:18:28,540:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:28,540:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:28,852:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:28,855:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002154 seconds.
2024-05-21 18:18:28,855:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:28,855:INFO:[LightGBM] [Info] Total Bins 8670
2024-05-21 18:18:28,856:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 34
2024-05-21 18:18:28,856:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:28,856:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:29,117:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:29,119:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001724 seconds.
2024-05-21 18:18:29,119:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:29,119:INFO:[LightGBM] [Info] Total Bins 8415
2024-05-21 18:18:29,119:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 33
2024-05-21 18:18:29,120:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:29,120:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:29,380:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:29,382:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001625 seconds.
2024-05-21 18:18:29,382:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:29,383:INFO:[LightGBM] [Info] Total Bins 8160
2024-05-21 18:18:29,383:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 32
2024-05-21 18:18:29,384:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:29,384:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:29,639:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:29,641:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001600 seconds.
2024-05-21 18:18:29,641:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:29,641:INFO:[LightGBM] [Info] Total Bins 7905
2024-05-21 18:18:29,642:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 31
2024-05-21 18:18:29,642:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:29,642:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:29,870:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:29,872:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001586 seconds.
2024-05-21 18:18:29,872:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:29,872:INFO:[LightGBM] [Info] Total Bins 7650
2024-05-21 18:18:29,873:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 30
2024-05-21 18:18:29,873:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:29,873:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:30,111:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:30,113:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001481 seconds.
2024-05-21 18:18:30,113:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:30,113:INFO:[LightGBM] [Info] Total Bins 7395
2024-05-21 18:18:30,114:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 29
2024-05-21 18:18:30,114:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:30,114:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:30,373:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:30,375:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001475 seconds.
2024-05-21 18:18:30,375:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:30,375:INFO:[LightGBM] [Info] Total Bins 7140
2024-05-21 18:18:30,376:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 28
2024-05-21 18:18:30,376:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:30,376:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:30,624:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:30,626:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001409 seconds.
2024-05-21 18:18:30,626:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:30,626:INFO:[LightGBM] [Info] Total Bins 6885
2024-05-21 18:18:30,626:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 27
2024-05-21 18:18:30,627:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:30,627:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:30,855:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:30,857:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001963 seconds.
2024-05-21 18:18:30,857:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:30,858:INFO:[LightGBM] [Info] Total Bins 6630
2024-05-21 18:18:30,858:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 26
2024-05-21 18:18:30,859:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:30,859:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,040:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,041:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001144 seconds.
2024-05-21 18:18:31,042:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,042:INFO:[LightGBM] [Info] Total Bins 6375
2024-05-21 18:18:31,042:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 25
2024-05-21 18:18:31,043:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,043:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,181:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,182:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001092 seconds.
2024-05-21 18:18:31,182:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,183:INFO:[LightGBM] [Info] Total Bins 6120
2024-05-21 18:18:31,183:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 24
2024-05-21 18:18:31,183:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,183:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,315:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,316:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001109 seconds.
2024-05-21 18:18:31,316:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,316:INFO:[LightGBM] [Info] Total Bins 5865
2024-05-21 18:18:31,317:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 23
2024-05-21 18:18:31,317:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,317:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,456:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,457:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001145 seconds.
2024-05-21 18:18:31,457:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,457:INFO:[LightGBM] [Info] Total Bins 5610
2024-05-21 18:18:31,457:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 22
2024-05-21 18:18:31,458:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,458:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,603:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,604:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001231 seconds.
2024-05-21 18:18:31,604:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,604:INFO:[LightGBM] [Info] Total Bins 5355
2024-05-21 18:18:31,605:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 21
2024-05-21 18:18:31,605:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,605:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,725:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,726:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000766 seconds.
2024-05-21 18:18:31,726:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,726:INFO:[LightGBM] [Info] Total Bins 5100
2024-05-21 18:18:31,727:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 20
2024-05-21 18:18:31,727:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,727:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,848:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,849:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000693 seconds.
2024-05-21 18:18:31,849:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,849:INFO:[LightGBM] [Info] Total Bins 4845
2024-05-21 18:18:31,849:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 19
2024-05-21 18:18:31,850:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,850:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:31,974:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:31,975:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000686 seconds.
2024-05-21 18:18:31,975:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:31,975:INFO:[LightGBM] [Info] Total Bins 4590
2024-05-21 18:18:31,975:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 18
2024-05-21 18:18:31,976:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:31,976:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,098:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,099:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000626 seconds.
2024-05-21 18:18:32,099:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,099:INFO:[LightGBM] [Info] Total Bins 4335
2024-05-21 18:18:32,099:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 17
2024-05-21 18:18:32,099:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,100:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,218:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,219:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000581 seconds.
2024-05-21 18:18:32,219:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,219:INFO:[LightGBM] [Info] Total Bins 4080
2024-05-21 18:18:32,219:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 16
2024-05-21 18:18:32,220:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,220:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,338:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,339:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000683 seconds.
2024-05-21 18:18:32,339:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,339:INFO:[LightGBM] [Info] Total Bins 3825
2024-05-21 18:18:32,339:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 15
2024-05-21 18:18:32,340:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,340:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,477:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,478:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000524 seconds.
2024-05-21 18:18:32,478:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,478:INFO:[LightGBM] [Info] Total Bins 3570
2024-05-21 18:18:32,478:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 14
2024-05-21 18:18:32,478:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,478:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,609:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,610:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000537 seconds.
2024-05-21 18:18:32,610:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,610:INFO:[LightGBM] [Info] Total Bins 3315
2024-05-21 18:18:32,611:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 13
2024-05-21 18:18:32,611:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,611:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,716:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,717:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000470 seconds.
2024-05-21 18:18:32,717:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,717:INFO:[LightGBM] [Info] Total Bins 3060
2024-05-21 18:18:32,718:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 12
2024-05-21 18:18:32,718:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,718:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,812:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,812:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000431 seconds.
2024-05-21 18:18:32,813:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,813:INFO:[LightGBM] [Info] Total Bins 2805
2024-05-21 18:18:32,813:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 11
2024-05-21 18:18:32,813:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,813:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:32,915:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:32,915:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000543 seconds.
2024-05-21 18:18:32,916:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:32,916:INFO:[LightGBM] [Info] Total Bins 2550
2024-05-21 18:18:32,916:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 10
2024-05-21 18:18:32,916:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:32,916:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,070:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,071:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000388 seconds.
2024-05-21 18:18:33,071:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,071:INFO:[LightGBM] [Info] Total Bins 2295
2024-05-21 18:18:33,071:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 9
2024-05-21 18:18:33,071:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,072:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,210:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,210:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000449 seconds.
2024-05-21 18:18:33,211:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,211:INFO:[LightGBM] [Info] Total Bins 2040
2024-05-21 18:18:33,211:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 8
2024-05-21 18:18:33,211:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,212:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,361:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,362:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000336 seconds.
2024-05-21 18:18:33,362:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,362:INFO:[LightGBM] [Info] Total Bins 1785
2024-05-21 18:18:33,363:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 7
2024-05-21 18:18:33,363:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,363:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,517:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,518:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000351 seconds.
2024-05-21 18:18:33,518:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,518:INFO:[LightGBM] [Info] Total Bins 1530
2024-05-21 18:18:33,518:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 6
2024-05-21 18:18:33,519:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,519:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,703:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,703:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000362 seconds.
2024-05-21 18:18:33,703:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,704:INFO:[LightGBM] [Info] Total Bins 1275
2024-05-21 18:18:33,704:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 5
2024-05-21 18:18:33,704:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,704:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:33,857:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:33,857:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000258 seconds.
2024-05-21 18:18:33,857:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:33,858:INFO:[LightGBM] [Info] Total Bins 1020
2024-05-21 18:18:33,858:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 4
2024-05-21 18:18:33,858:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:33,858:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:34,008:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:34,009:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000284 seconds.
2024-05-21 18:18:34,009:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:34,009:INFO:[LightGBM] [Info] Total Bins 765
2024-05-21 18:18:34,009:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 3
2024-05-21 18:18:34,010:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:34,010:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:34,141:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:34,141:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000152 seconds.
2024-05-21 18:18:34,142:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:34,142:INFO:[LightGBM] [Info] Total Bins 510
2024-05-21 18:18:34,142:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 2
2024-05-21 18:18:34,142:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:34,142:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:34,269:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:34,270:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000109 seconds.
2024-05-21 18:18:34,270:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:34,270:INFO:[LightGBM] [Info] Total Bins 255
2024-05-21 18:18:34,270:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 1
2024-05-21 18:18:34,270:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:34,271:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:34,646:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:34,670:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023086 seconds.
2024-05-21 18:18:34,671:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:34,674:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:18:34,677:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:18:34,680:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:34,680:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:36,119:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:36,145:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025527 seconds.
2024-05-21 18:18:36,146:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:36,149:INFO:[LightGBM] [Info] Total Bins 87210
2024-05-21 18:18:36,152:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 342
2024-05-21 18:18:36,154:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:36,155:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:37,590:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:37,613:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022373 seconds.
2024-05-21 18:18:37,613:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:37,616:INFO:[LightGBM] [Info] Total Bins 86955
2024-05-21 18:18:37,619:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 341
2024-05-21 18:18:37,622:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:37,622:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:39,273:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:39,296:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022732 seconds.
2024-05-21 18:18:39,296:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:39,300:INFO:[LightGBM] [Info] Total Bins 86700
2024-05-21 18:18:39,303:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 340
2024-05-21 18:18:39,306:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:39,306:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:40,735:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:40,759:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023192 seconds.
2024-05-21 18:18:40,759:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:40,761:INFO:[LightGBM] [Info] Total Bins 86445
2024-05-21 18:18:40,765:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 339
2024-05-21 18:18:40,767:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:40,767:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:41,984:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:42,007:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022288 seconds.
2024-05-21 18:18:42,008:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:42,011:INFO:[LightGBM] [Info] Total Bins 86190
2024-05-21 18:18:42,014:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 338
2024-05-21 18:18:42,016:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:42,017:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:43,536:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:43,567:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.031177 seconds.
2024-05-21 18:18:43,567:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:43,570:INFO:[LightGBM] [Info] Total Bins 85935
2024-05-21 18:18:43,574:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 337
2024-05-21 18:18:43,577:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:43,577:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:45,284:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:45,312:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.028187 seconds.
2024-05-21 18:18:45,313:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:45,316:INFO:[LightGBM] [Info] Total Bins 85680
2024-05-21 18:18:45,319:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 336
2024-05-21 18:18:45,322:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:45,322:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:46,888:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:46,926:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.037128 seconds.
2024-05-21 18:18:46,926:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:46,930:INFO:[LightGBM] [Info] Total Bins 85425
2024-05-21 18:18:46,935:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 335
2024-05-21 18:18:46,939:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:46,939:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:48,748:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:48,770:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020811 seconds.
2024-05-21 18:18:48,770:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:48,774:INFO:[LightGBM] [Info] Total Bins 85170
2024-05-21 18:18:48,777:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 334
2024-05-21 18:18:48,779:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:48,779:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:49,905:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:49,927:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020657 seconds.
2024-05-21 18:18:49,927:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:49,930:INFO:[LightGBM] [Info] Total Bins 84915
2024-05-21 18:18:49,934:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 333
2024-05-21 18:18:49,936:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:49,936:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:51,274:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:51,302:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.026842 seconds.
2024-05-21 18:18:51,302:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:51,306:INFO:[LightGBM] [Info] Total Bins 84660
2024-05-21 18:18:51,310:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 332
2024-05-21 18:18:51,313:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:51,313:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:52,894:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:52,917:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022591 seconds.
2024-05-21 18:18:52,917:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:52,920:INFO:[LightGBM] [Info] Total Bins 84405
2024-05-21 18:18:52,924:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 331
2024-05-21 18:18:52,927:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:52,927:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:54,119:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:54,142:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021688 seconds.
2024-05-21 18:18:54,142:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:54,145:INFO:[LightGBM] [Info] Total Bins 84150
2024-05-21 18:18:54,148:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 330
2024-05-21 18:18:54,150:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:54,150:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:55,802:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:55,846:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.043199 seconds.
2024-05-21 18:18:55,846:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:55,850:INFO:[LightGBM] [Info] Total Bins 83895
2024-05-21 18:18:55,860:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 329
2024-05-21 18:18:55,862:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:55,863:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:57,635:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:57,664:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.027426 seconds.
2024-05-21 18:18:57,664:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:57,666:INFO:[LightGBM] [Info] Total Bins 83640
2024-05-21 18:18:57,670:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 328
2024-05-21 18:18:57,672:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:57,672:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:18:59,297:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:18:59,324:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025687 seconds.
2024-05-21 18:18:59,324:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:18:59,327:INFO:[LightGBM] [Info] Total Bins 83385
2024-05-21 18:18:59,330:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 327
2024-05-21 18:18:59,333:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:18:59,333:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:01,212:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:01,236:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023037 seconds.
2024-05-21 18:19:01,236:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:01,239:INFO:[LightGBM] [Info] Total Bins 83130
2024-05-21 18:19:01,244:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 326
2024-05-21 18:19:01,247:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:01,247:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:02,883:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:02,906:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021730 seconds.
2024-05-21 18:19:02,906:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:02,909:INFO:[LightGBM] [Info] Total Bins 82875
2024-05-21 18:19:02,912:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 325
2024-05-21 18:19:02,915:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:02,915:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:04,084:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:04,109:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024521 seconds.
2024-05-21 18:19:04,109:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:04,112:INFO:[LightGBM] [Info] Total Bins 82620
2024-05-21 18:19:04,116:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 324
2024-05-21 18:19:04,118:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:04,118:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:05,711:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:05,746:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.033998 seconds.
2024-05-21 18:19:05,746:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:05,751:INFO:[LightGBM] [Info] Total Bins 82365
2024-05-21 18:19:05,757:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 323
2024-05-21 18:19:05,761:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:05,761:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:07,261:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:07,285:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023667 seconds.
2024-05-21 18:19:07,285:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:07,288:INFO:[LightGBM] [Info] Total Bins 82110
2024-05-21 18:19:07,293:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 322
2024-05-21 18:19:07,296:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:07,296:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:08,744:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:08,766:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020838 seconds.
2024-05-21 18:19:08,766:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:08,769:INFO:[LightGBM] [Info] Total Bins 81855
2024-05-21 18:19:08,772:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 321
2024-05-21 18:19:08,774:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:08,774:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:10,366:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:10,388:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022017 seconds.
2024-05-21 18:19:10,388:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:10,392:INFO:[LightGBM] [Info] Total Bins 81600
2024-05-21 18:19:10,395:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 320
2024-05-21 18:19:10,397:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:10,397:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:11,888:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:11,912:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023207 seconds.
2024-05-21 18:19:11,912:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:11,915:INFO:[LightGBM] [Info] Total Bins 81345
2024-05-21 18:19:11,918:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 319
2024-05-21 18:19:11,920:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:11,921:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:13,153:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:13,177:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022590 seconds.
2024-05-21 18:19:13,177:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:13,181:INFO:[LightGBM] [Info] Total Bins 81090
2024-05-21 18:19:13,184:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 318
2024-05-21 18:19:13,187:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:13,187:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:15,203:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:15,242:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.038098 seconds.
2024-05-21 18:19:15,243:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:15,249:INFO:[LightGBM] [Info] Total Bins 80835
2024-05-21 18:19:15,257:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 317
2024-05-21 18:19:15,261:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:15,261:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:16,736:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:16,758:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021072 seconds.
2024-05-21 18:19:16,758:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:16,761:INFO:[LightGBM] [Info] Total Bins 80580
2024-05-21 18:19:16,764:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 316
2024-05-21 18:19:16,766:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:16,766:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:18,247:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:18,268:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020237 seconds.
2024-05-21 18:19:18,268:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:18,271:INFO:[LightGBM] [Info] Total Bins 80325
2024-05-21 18:19:18,275:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 315
2024-05-21 18:19:18,278:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:18,278:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:19,743:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:19,767:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023388 seconds.
2024-05-21 18:19:19,767:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:19,771:INFO:[LightGBM] [Info] Total Bins 80070
2024-05-21 18:19:19,774:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 314
2024-05-21 18:19:19,776:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:19,776:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:20,837:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:20,857:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019293 seconds.
2024-05-21 18:19:20,857:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:20,860:INFO:[LightGBM] [Info] Total Bins 79815
2024-05-21 18:19:20,864:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 313
2024-05-21 18:19:20,865:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:20,865:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:21,929:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:21,951:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021405 seconds.
2024-05-21 18:19:21,951:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:21,954:INFO:[LightGBM] [Info] Total Bins 79560
2024-05-21 18:19:21,957:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 312
2024-05-21 18:19:21,960:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:21,960:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:23,474:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:23,494:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019233 seconds.
2024-05-21 18:19:23,494:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:23,497:INFO:[LightGBM] [Info] Total Bins 79305
2024-05-21 18:19:23,500:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 311
2024-05-21 18:19:23,502:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:23,502:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:24,816:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:24,837:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019706 seconds.
2024-05-21 18:19:24,837:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:24,840:INFO:[LightGBM] [Info] Total Bins 79050
2024-05-21 18:19:24,843:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 310
2024-05-21 18:19:24,845:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:24,846:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:25,849:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:25,870:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020577 seconds.
2024-05-21 18:19:25,871:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:25,874:INFO:[LightGBM] [Info] Total Bins 78795
2024-05-21 18:19:25,877:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 309
2024-05-21 18:19:25,879:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:25,879:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:27,217:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:27,241:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022793 seconds.
2024-05-21 18:19:27,241:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:27,244:INFO:[LightGBM] [Info] Total Bins 78540
2024-05-21 18:19:27,247:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 308
2024-05-21 18:19:27,249:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:27,250:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:28,744:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:28,763:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018400 seconds.
2024-05-21 18:19:28,763:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:28,766:INFO:[LightGBM] [Info] Total Bins 78285
2024-05-21 18:19:28,769:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 307
2024-05-21 18:19:28,771:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:28,771:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:29,894:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:29,913:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018048 seconds.
2024-05-21 18:19:29,913:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:29,916:INFO:[LightGBM] [Info] Total Bins 78030
2024-05-21 18:19:29,919:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 306
2024-05-21 18:19:29,921:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:29,921:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:31,389:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:31,412:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022545 seconds.
2024-05-21 18:19:31,413:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:31,416:INFO:[LightGBM] [Info] Total Bins 77775
2024-05-21 18:19:31,419:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 305
2024-05-21 18:19:31,421:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:31,421:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:33,026:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:33,046:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018797 seconds.
2024-05-21 18:19:33,046:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:33,049:INFO:[LightGBM] [Info] Total Bins 77520
2024-05-21 18:19:33,052:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 304
2024-05-21 18:19:33,054:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:33,054:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:34,389:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:34,414:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023892 seconds.
2024-05-21 18:19:34,414:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:34,418:INFO:[LightGBM] [Info] Total Bins 77265
2024-05-21 18:19:34,423:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 303
2024-05-21 18:19:34,425:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:34,426:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:35,841:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:35,873:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.030955 seconds.
2024-05-21 18:19:35,873:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:35,877:INFO:[LightGBM] [Info] Total Bins 77010
2024-05-21 18:19:35,882:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 302
2024-05-21 18:19:35,884:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:35,885:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:37,671:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:37,694:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021535 seconds.
2024-05-21 18:19:37,694:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:37,697:INFO:[LightGBM] [Info] Total Bins 76755
2024-05-21 18:19:37,700:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 301
2024-05-21 18:19:37,702:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:37,702:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:38,900:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:38,922:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021795 seconds.
2024-05-21 18:19:38,922:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:38,926:INFO:[LightGBM] [Info] Total Bins 76500
2024-05-21 18:19:38,929:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 300
2024-05-21 18:19:38,932:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:38,932:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:40,771:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:40,796:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024254 seconds.
2024-05-21 18:19:40,796:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:40,799:INFO:[LightGBM] [Info] Total Bins 76245
2024-05-21 18:19:40,802:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 299
2024-05-21 18:19:40,804:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:40,804:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:42,255:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:42,277:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021311 seconds.
2024-05-21 18:19:42,277:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:42,280:INFO:[LightGBM] [Info] Total Bins 75990
2024-05-21 18:19:42,283:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 298
2024-05-21 18:19:42,285:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:42,285:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:43,419:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:43,438:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018311 seconds.
2024-05-21 18:19:43,438:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:43,441:INFO:[LightGBM] [Info] Total Bins 75735
2024-05-21 18:19:43,444:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 297
2024-05-21 18:19:43,446:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:43,446:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:44,441:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:44,462:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020412 seconds.
2024-05-21 18:19:44,463:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:44,465:INFO:[LightGBM] [Info] Total Bins 75480
2024-05-21 18:19:44,468:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 296
2024-05-21 18:19:44,470:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:44,470:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:45,849:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:45,872:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021642 seconds.
2024-05-21 18:19:45,872:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:45,875:INFO:[LightGBM] [Info] Total Bins 75225
2024-05-21 18:19:45,878:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 295
2024-05-21 18:19:45,880:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:45,880:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:47,137:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:47,153:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015642 seconds.
2024-05-21 18:19:47,153:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:47,156:INFO:[LightGBM] [Info] Total Bins 74970
2024-05-21 18:19:47,159:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 294
2024-05-21 18:19:47,161:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:47,161:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:48,195:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:48,212:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016194 seconds.
2024-05-21 18:19:48,212:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:48,215:INFO:[LightGBM] [Info] Total Bins 74715
2024-05-21 18:19:48,217:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 293
2024-05-21 18:19:48,219:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:48,219:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:49,287:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:49,305:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018096 seconds.
2024-05-21 18:19:49,305:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:49,308:INFO:[LightGBM] [Info] Total Bins 74460
2024-05-21 18:19:49,312:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 292
2024-05-21 18:19:49,314:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:49,314:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:50,713:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:50,731:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017911 seconds.
2024-05-21 18:19:50,732:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:50,734:INFO:[LightGBM] [Info] Total Bins 74205
2024-05-21 18:19:50,738:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 291
2024-05-21 18:19:50,740:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:50,740:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:51,970:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:51,988:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017345 seconds.
2024-05-21 18:19:51,988:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:51,991:INFO:[LightGBM] [Info] Total Bins 73950
2024-05-21 18:19:51,994:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 290
2024-05-21 18:19:51,996:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:51,997:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:52,964:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:52,981:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016142 seconds.
2024-05-21 18:19:52,982:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:52,984:INFO:[LightGBM] [Info] Total Bins 73695
2024-05-21 18:19:52,987:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 289
2024-05-21 18:19:52,989:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:52,989:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:54,146:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:54,170:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022835 seconds.
2024-05-21 18:19:54,170:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:54,173:INFO:[LightGBM] [Info] Total Bins 73440
2024-05-21 18:19:54,176:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 288
2024-05-21 18:19:54,178:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:54,178:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:55,516:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:55,534:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017412 seconds.
2024-05-21 18:19:55,534:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:55,537:INFO:[LightGBM] [Info] Total Bins 73185
2024-05-21 18:19:55,541:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 287
2024-05-21 18:19:55,543:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:55,544:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:56,511:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:56,528:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016712 seconds.
2024-05-21 18:19:56,539:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:56,542:INFO:[LightGBM] [Info] Total Bins 72930
2024-05-21 18:19:56,544:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 286
2024-05-21 18:19:56,546:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:56,546:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:57,448:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:57,464:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015187 seconds.
2024-05-21 18:19:57,464:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:57,466:INFO:[LightGBM] [Info] Total Bins 72675
2024-05-21 18:19:57,469:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 285
2024-05-21 18:19:57,471:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:57,471:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:19:58,639:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:19:58,662:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022132 seconds.
2024-05-21 18:19:58,662:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:19:58,665:INFO:[LightGBM] [Info] Total Bins 72420
2024-05-21 18:19:58,668:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 284
2024-05-21 18:19:58,672:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:19:58,672:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:00,019:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:00,042:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022871 seconds.
2024-05-21 18:20:00,043:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:00,045:INFO:[LightGBM] [Info] Total Bins 72165
2024-05-21 18:20:00,049:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 283
2024-05-21 18:20:00,051:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:00,052:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:01,014:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:01,030:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015392 seconds.
2024-05-21 18:20:01,030:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:01,033:INFO:[LightGBM] [Info] Total Bins 71910
2024-05-21 18:20:01,036:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 282
2024-05-21 18:20:01,038:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:01,038:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:01,969:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:01,987:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017384 seconds.
2024-05-21 18:20:01,994:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:01,997:INFO:[LightGBM] [Info] Total Bins 71655
2024-05-21 18:20:01,999:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 281
2024-05-21 18:20:02,001:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:02,002:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:03,214:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:03,232:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017490 seconds.
2024-05-21 18:20:03,232:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:03,235:INFO:[LightGBM] [Info] Total Bins 71400
2024-05-21 18:20:03,238:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 280
2024-05-21 18:20:03,240:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:03,241:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:04,538:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:04,559:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020719 seconds.
2024-05-21 18:20:04,560:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:04,563:INFO:[LightGBM] [Info] Total Bins 71145
2024-05-21 18:20:04,566:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 279
2024-05-21 18:20:04,569:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:04,569:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:05,528:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:05,545:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016576 seconds.
2024-05-21 18:20:05,545:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:05,548:INFO:[LightGBM] [Info] Total Bins 70890
2024-05-21 18:20:05,551:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 278
2024-05-21 18:20:05,553:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:05,553:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:06,471:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:06,489:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017083 seconds.
2024-05-21 18:20:06,490:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:06,492:INFO:[LightGBM] [Info] Total Bins 70635
2024-05-21 18:20:06,494:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 277
2024-05-21 18:20:06,497:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:06,497:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:07,757:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:07,775:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016899 seconds.
2024-05-21 18:20:07,775:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:07,778:INFO:[LightGBM] [Info] Total Bins 70380
2024-05-21 18:20:07,781:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 276
2024-05-21 18:20:07,783:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:07,783:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:09,042:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:09,059:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015883 seconds.
2024-05-21 18:20:09,059:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:09,061:INFO:[LightGBM] [Info] Total Bins 70125
2024-05-21 18:20:09,064:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 275
2024-05-21 18:20:09,066:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:09,066:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:09,989:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:10,006:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016294 seconds.
2024-05-21 18:20:10,007:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:10,009:INFO:[LightGBM] [Info] Total Bins 69870
2024-05-21 18:20:10,012:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 274
2024-05-21 18:20:10,013:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:10,014:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:10,891:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:10,907:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014280 seconds.
2024-05-21 18:20:10,907:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:10,910:INFO:[LightGBM] [Info] Total Bins 69615
2024-05-21 18:20:10,912:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 273
2024-05-21 18:20:10,914:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:10,914:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:12,004:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:12,020:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015558 seconds.
2024-05-21 18:20:12,021:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:12,023:INFO:[LightGBM] [Info] Total Bins 69360
2024-05-21 18:20:12,026:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 272
2024-05-21 18:20:12,028:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:12,028:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:13,278:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:13,294:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016004 seconds.
2024-05-21 18:20:13,295:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:13,297:INFO:[LightGBM] [Info] Total Bins 69105
2024-05-21 18:20:13,301:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 271
2024-05-21 18:20:13,303:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:13,303:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:14,303:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:14,319:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015248 seconds.
2024-05-21 18:20:14,319:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:14,322:INFO:[LightGBM] [Info] Total Bins 68850
2024-05-21 18:20:14,325:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 270
2024-05-21 18:20:14,327:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:14,327:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:15,240:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:15,257:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015909 seconds.
2024-05-21 18:20:15,257:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:15,259:INFO:[LightGBM] [Info] Total Bins 68595
2024-05-21 18:20:15,262:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 269
2024-05-21 18:20:15,264:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:15,264:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:16,418:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:16,435:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016648 seconds.
2024-05-21 18:20:16,435:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:16,438:INFO:[LightGBM] [Info] Total Bins 68340
2024-05-21 18:20:16,441:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 268
2024-05-21 18:20:16,443:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:16,443:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:17,697:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:17,715:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016745 seconds.
2024-05-21 18:20:17,715:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:17,718:INFO:[LightGBM] [Info] Total Bins 68085
2024-05-21 18:20:17,720:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 267
2024-05-21 18:20:17,722:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:17,723:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:18,810:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:18,826:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014614 seconds.
2024-05-21 18:20:18,826:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:18,828:INFO:[LightGBM] [Info] Total Bins 67830
2024-05-21 18:20:18,831:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 266
2024-05-21 18:20:18,833:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:18,833:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:19,814:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:19,830:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014778 seconds.
2024-05-21 18:20:19,830:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:19,832:INFO:[LightGBM] [Info] Total Bins 67575
2024-05-21 18:20:19,835:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 265
2024-05-21 18:20:19,837:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:19,837:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:21,495:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:21,512:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015964 seconds.
2024-05-21 18:20:21,512:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:21,515:INFO:[LightGBM] [Info] Total Bins 67320
2024-05-21 18:20:21,517:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 264
2024-05-21 18:20:21,519:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:21,520:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:22,807:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:22,828:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019511 seconds.
2024-05-21 18:20:22,828:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:22,831:INFO:[LightGBM] [Info] Total Bins 67065
2024-05-21 18:20:22,834:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 263
2024-05-21 18:20:22,836:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:22,836:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:23,768:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:23,784:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015292 seconds.
2024-05-21 18:20:23,785:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:23,787:INFO:[LightGBM] [Info] Total Bins 66810
2024-05-21 18:20:23,790:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 262
2024-05-21 18:20:23,810:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:23,810:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:24,806:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:24,824:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017610 seconds.
2024-05-21 18:20:24,825:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:24,827:INFO:[LightGBM] [Info] Total Bins 66555
2024-05-21 18:20:24,830:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 261
2024-05-21 18:20:24,832:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:24,832:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:26,142:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:26,163:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020717 seconds.
2024-05-21 18:20:26,164:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:26,167:INFO:[LightGBM] [Info] Total Bins 66300
2024-05-21 18:20:26,170:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 260
2024-05-21 18:20:26,172:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:26,172:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:27,497:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:27,519:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020517 seconds.
2024-05-21 18:20:27,519:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:27,522:INFO:[LightGBM] [Info] Total Bins 66045
2024-05-21 18:20:27,526:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 259
2024-05-21 18:20:27,528:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:27,528:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:28,459:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:28,476:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016638 seconds.
2024-05-21 18:20:28,476:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:28,479:INFO:[LightGBM] [Info] Total Bins 65790
2024-05-21 18:20:28,481:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 258
2024-05-21 18:20:28,483:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:28,484:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:29,561:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:29,581:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020049 seconds.
2024-05-21 18:20:29,582:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:29,584:INFO:[LightGBM] [Info] Total Bins 65535
2024-05-21 18:20:29,588:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 257
2024-05-21 18:20:29,590:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:29,591:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:30,817:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:30,832:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014669 seconds.
2024-05-21 18:20:30,832:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:30,835:INFO:[LightGBM] [Info] Total Bins 65280
2024-05-21 18:20:30,838:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 256
2024-05-21 18:20:30,840:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:30,841:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:32,005:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:32,020:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013024 seconds.
2024-05-21 18:20:32,021:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:32,023:INFO:[LightGBM] [Info] Total Bins 65025
2024-05-21 18:20:32,027:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 255
2024-05-21 18:20:32,029:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:32,029:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:32,958:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:32,974:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014982 seconds.
2024-05-21 18:20:32,974:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:32,976:INFO:[LightGBM] [Info] Total Bins 64770
2024-05-21 18:20:32,980:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 254
2024-05-21 18:20:32,982:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:32,982:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:33,921:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:33,939:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016591 seconds.
2024-05-21 18:20:33,939:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:33,941:INFO:[LightGBM] [Info] Total Bins 64515
2024-05-21 18:20:33,945:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 253
2024-05-21 18:20:33,948:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:33,948:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:35,198:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:35,215:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016117 seconds.
2024-05-21 18:20:35,216:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:35,218:INFO:[LightGBM] [Info] Total Bins 64260
2024-05-21 18:20:35,222:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 252
2024-05-21 18:20:35,223:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:35,224:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:36,463:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:36,479:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015581 seconds.
2024-05-21 18:20:36,479:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:36,482:INFO:[LightGBM] [Info] Total Bins 64005
2024-05-21 18:20:36,485:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 251
2024-05-21 18:20:36,487:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:36,487:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:37,561:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:37,579:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016463 seconds.
2024-05-21 18:20:37,579:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:37,581:INFO:[LightGBM] [Info] Total Bins 63750
2024-05-21 18:20:37,586:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 250
2024-05-21 18:20:37,588:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:37,588:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:38,623:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:38,639:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014983 seconds.
2024-05-21 18:20:38,639:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:38,642:INFO:[LightGBM] [Info] Total Bins 63495
2024-05-21 18:20:38,644:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 249
2024-05-21 18:20:38,646:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:38,646:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:39,836:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:39,855:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018323 seconds.
2024-05-21 18:20:39,855:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:39,858:INFO:[LightGBM] [Info] Total Bins 63240
2024-05-21 18:20:39,862:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 248
2024-05-21 18:20:39,864:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:39,864:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:41,054:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:41,068:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012948 seconds.
2024-05-21 18:20:41,068:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:41,070:INFO:[LightGBM] [Info] Total Bins 62985
2024-05-21 18:20:41,073:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 247
2024-05-21 18:20:41,075:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:41,075:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:41,917:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:41,932:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014519 seconds.
2024-05-21 18:20:41,932:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:41,934:INFO:[LightGBM] [Info] Total Bins 62730
2024-05-21 18:20:41,937:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 246
2024-05-21 18:20:41,939:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:41,940:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:42,804:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:42,819:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014863 seconds.
2024-05-21 18:20:42,819:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:42,822:INFO:[LightGBM] [Info] Total Bins 62475
2024-05-21 18:20:42,824:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 245
2024-05-21 18:20:42,826:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:42,826:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:44,055:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:44,071:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015007 seconds.
2024-05-21 18:20:44,071:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:44,074:INFO:[LightGBM] [Info] Total Bins 62220
2024-05-21 18:20:44,076:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 244
2024-05-21 18:20:44,078:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:44,079:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:45,272:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:45,287:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014497 seconds.
2024-05-21 18:20:45,288:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:45,290:INFO:[LightGBM] [Info] Total Bins 61965
2024-05-21 18:20:45,293:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 243
2024-05-21 18:20:45,295:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:45,295:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:46,185:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:46,199:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013326 seconds.
2024-05-21 18:20:46,199:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:46,202:INFO:[LightGBM] [Info] Total Bins 61710
2024-05-21 18:20:46,204:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 242
2024-05-21 18:20:46,206:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:46,206:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:47,047:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:47,062:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013270 seconds.
2024-05-21 18:20:47,062:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:47,064:INFO:[LightGBM] [Info] Total Bins 61455
2024-05-21 18:20:47,068:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 241
2024-05-21 18:20:47,070:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:47,070:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:48,076:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:48,092:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015170 seconds.
2024-05-21 18:20:48,092:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:48,094:INFO:[LightGBM] [Info] Total Bins 61200
2024-05-21 18:20:48,097:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 240
2024-05-21 18:20:48,099:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:48,099:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:49,282:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:49,300:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017579 seconds.
2024-05-21 18:20:49,300:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:49,302:INFO:[LightGBM] [Info] Total Bins 60945
2024-05-21 18:20:49,305:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 239
2024-05-21 18:20:49,307:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:49,307:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:50,304:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:50,317:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012225 seconds.
2024-05-21 18:20:50,317:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:50,319:INFO:[LightGBM] [Info] Total Bins 60690
2024-05-21 18:20:50,321:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 238
2024-05-21 18:20:50,323:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:50,323:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:51,137:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:51,149:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012114 seconds.
2024-05-21 18:20:51,149:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:51,152:INFO:[LightGBM] [Info] Total Bins 60435
2024-05-21 18:20:51,154:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 237
2024-05-21 18:20:51,155:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:51,156:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:51,981:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:51,996:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014317 seconds.
2024-05-21 18:20:51,996:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:51,998:INFO:[LightGBM] [Info] Total Bins 60180
2024-05-21 18:20:52,000:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 236
2024-05-21 18:20:52,002:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:52,003:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:53,150:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:53,167:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016398 seconds.
2024-05-21 18:20:53,167:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:53,170:INFO:[LightGBM] [Info] Total Bins 59925
2024-05-21 18:20:53,171:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 235
2024-05-21 18:20:53,174:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:53,174:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:54,315:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:54,330:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013856 seconds.
2024-05-21 18:20:54,330:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:54,332:INFO:[LightGBM] [Info] Total Bins 59670
2024-05-21 18:20:54,333:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 234
2024-05-21 18:20:54,335:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:54,335:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:55,159:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:55,180:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012622 seconds.
2024-05-21 18:20:55,180:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:55,182:INFO:[LightGBM] [Info] Total Bins 59415
2024-05-21 18:20:55,187:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 233
2024-05-21 18:20:55,189:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:55,189:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:56,074:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:56,087:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012769 seconds.
2024-05-21 18:20:56,088:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:56,090:INFO:[LightGBM] [Info] Total Bins 59160
2024-05-21 18:20:56,092:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 232
2024-05-21 18:20:56,093:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:56,094:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:57,077:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:57,092:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014454 seconds.
2024-05-21 18:20:57,092:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:57,094:INFO:[LightGBM] [Info] Total Bins 58905
2024-05-21 18:20:57,096:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 231
2024-05-21 18:20:57,098:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:57,098:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:58,199:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:58,218:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017747 seconds.
2024-05-21 18:20:58,218:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:58,222:INFO:[LightGBM] [Info] Total Bins 58650
2024-05-21 18:20:58,224:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 230
2024-05-21 18:20:58,226:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:58,226:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:59,193:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:20:59,206:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011977 seconds.
2024-05-21 18:20:59,206:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:20:59,208:INFO:[LightGBM] [Info] Total Bins 58395
2024-05-21 18:20:59,209:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 229
2024-05-21 18:20:59,211:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:20:59,211:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:20:59,992:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:00,004:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011604 seconds.
2024-05-21 18:21:00,004:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:00,006:INFO:[LightGBM] [Info] Total Bins 58140
2024-05-21 18:21:00,007:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 228
2024-05-21 18:21:00,009:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:00,009:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:00,851:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:00,864:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012201 seconds.
2024-05-21 18:21:00,864:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:00,866:INFO:[LightGBM] [Info] Total Bins 57885
2024-05-21 18:21:00,868:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 227
2024-05-21 18:21:00,870:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:00,870:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:01,935:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:01,948:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012540 seconds.
2024-05-21 18:21:01,948:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:01,950:INFO:[LightGBM] [Info] Total Bins 57630
2024-05-21 18:21:01,953:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 226
2024-05-21 18:21:01,974:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:01,974:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:03,078:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:03,095:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016517 seconds.
2024-05-21 18:21:03,096:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:03,098:INFO:[LightGBM] [Info] Total Bins 57375
2024-05-21 18:21:03,103:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 225
2024-05-21 18:21:03,104:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:03,105:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:03,997:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:04,008:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011416 seconds.
2024-05-21 18:21:04,009:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:04,011:INFO:[LightGBM] [Info] Total Bins 57120
2024-05-21 18:21:04,012:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 224
2024-05-21 18:21:04,014:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:04,014:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:04,817:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:04,831:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013715 seconds.
2024-05-21 18:21:04,831:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:04,833:INFO:[LightGBM] [Info] Total Bins 56865
2024-05-21 18:21:04,834:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 223
2024-05-21 18:21:04,836:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:04,836:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:05,639:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:05,653:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013321 seconds.
2024-05-21 18:21:05,653:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:05,655:INFO:[LightGBM] [Info] Total Bins 56610
2024-05-21 18:21:05,657:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 222
2024-05-21 18:21:05,659:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:05,659:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:06,766:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:06,782:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015251 seconds.
2024-05-21 18:21:06,782:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:06,785:INFO:[LightGBM] [Info] Total Bins 56355
2024-05-21 18:21:06,786:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 221
2024-05-21 18:21:06,788:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:06,788:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:07,826:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:07,839:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012275 seconds.
2024-05-21 18:21:07,839:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:07,841:INFO:[LightGBM] [Info] Total Bins 56100
2024-05-21 18:21:07,843:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 220
2024-05-21 18:21:07,844:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:07,845:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:08,642:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:08,655:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012388 seconds.
2024-05-21 18:21:08,655:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:08,658:INFO:[LightGBM] [Info] Total Bins 55845
2024-05-21 18:21:08,659:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 219
2024-05-21 18:21:08,660:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:08,661:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:09,402:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:09,413:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010940 seconds.
2024-05-21 18:21:09,413:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:09,415:INFO:[LightGBM] [Info] Total Bins 55590
2024-05-21 18:21:09,417:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 218
2024-05-21 18:21:09,419:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:09,419:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:10,361:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:10,379:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017229 seconds.
2024-05-21 18:21:10,379:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:10,381:INFO:[LightGBM] [Info] Total Bins 55335
2024-05-21 18:21:10,383:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 217
2024-05-21 18:21:10,385:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:10,385:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:11,491:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:11,507:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014880 seconds.
2024-05-21 18:21:11,521:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:11,524:INFO:[LightGBM] [Info] Total Bins 55080
2024-05-21 18:21:11,528:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 216
2024-05-21 18:21:11,530:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:11,530:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:12,621:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:12,633:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011809 seconds.
2024-05-21 18:21:12,634:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:12,636:INFO:[LightGBM] [Info] Total Bins 54825
2024-05-21 18:21:12,637:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 215
2024-05-21 18:21:12,639:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:12,639:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:13,408:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:13,419:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010777 seconds.
2024-05-21 18:21:13,419:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:13,421:INFO:[LightGBM] [Info] Total Bins 54570
2024-05-21 18:21:13,423:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 214
2024-05-21 18:21:13,425:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:13,425:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:14,249:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:14,276:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025657 seconds.
2024-05-21 18:21:14,276:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:14,279:INFO:[LightGBM] [Info] Total Bins 54315
2024-05-21 18:21:14,281:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 213
2024-05-21 18:21:14,283:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:14,284:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:15,480:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:15,495:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014689 seconds.
2024-05-21 18:21:15,495:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:15,497:INFO:[LightGBM] [Info] Total Bins 54060
2024-05-21 18:21:15,499:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 212
2024-05-21 18:21:15,501:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:15,501:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:16,657:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:16,670:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013106 seconds.
2024-05-21 18:21:16,670:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:16,673:INFO:[LightGBM] [Info] Total Bins 53805
2024-05-21 18:21:16,675:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 211
2024-05-21 18:21:16,677:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:16,677:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:17,815:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:17,827:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011368 seconds.
2024-05-21 18:21:17,827:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:17,829:INFO:[LightGBM] [Info] Total Bins 53550
2024-05-21 18:21:17,831:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 210
2024-05-21 18:21:17,832:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:17,832:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:18,910:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:18,922:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011552 seconds.
2024-05-21 18:21:18,922:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:18,924:INFO:[LightGBM] [Info] Total Bins 53295
2024-05-21 18:21:18,926:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 209
2024-05-21 18:21:18,927:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:18,927:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:20,071:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:20,084:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012649 seconds.
2024-05-21 18:21:20,085:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:20,087:INFO:[LightGBM] [Info] Total Bins 53040
2024-05-21 18:21:20,088:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 208
2024-05-21 18:21:20,090:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:20,090:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:21,193:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:21,209:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015193 seconds.
2024-05-21 18:21:21,209:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:21,211:INFO:[LightGBM] [Info] Total Bins 52785
2024-05-21 18:21:21,216:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 207
2024-05-21 18:21:21,218:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:21,218:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:22,181:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:22,193:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012044 seconds.
2024-05-21 18:21:22,194:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:22,196:INFO:[LightGBM] [Info] Total Bins 52530
2024-05-21 18:21:22,198:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 206
2024-05-21 18:21:22,199:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:22,199:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:22,987:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:23,002:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014617 seconds.
2024-05-21 18:21:23,003:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:23,005:INFO:[LightGBM] [Info] Total Bins 52275
2024-05-21 18:21:23,006:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 205
2024-05-21 18:21:23,008:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:23,008:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:23,946:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:23,958:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011613 seconds.
2024-05-21 18:21:23,958:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:23,960:INFO:[LightGBM] [Info] Total Bins 52020
2024-05-21 18:21:23,962:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 204
2024-05-21 18:21:23,963:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:23,963:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:25,059:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:25,072:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012559 seconds.
2024-05-21 18:21:25,072:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:25,074:INFO:[LightGBM] [Info] Total Bins 51765
2024-05-21 18:21:25,075:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 203
2024-05-21 18:21:25,078:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:25,078:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:27,070:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:27,090:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019355 seconds.
2024-05-21 18:21:27,090:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:27,092:INFO:[LightGBM] [Info] Total Bins 51510
2024-05-21 18:21:27,094:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 202
2024-05-21 18:21:27,096:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:27,097:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:28,280:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:28,293:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012947 seconds.
2024-05-21 18:21:28,294:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:28,296:INFO:[LightGBM] [Info] Total Bins 51255
2024-05-21 18:21:28,297:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 201
2024-05-21 18:21:28,299:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:28,299:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:29,744:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:29,766:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021960 seconds.
2024-05-21 18:21:29,766:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:29,768:INFO:[LightGBM] [Info] Total Bins 51000
2024-05-21 18:21:29,770:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 200
2024-05-21 18:21:29,772:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:29,772:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:30,856:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:30,868:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011247 seconds.
2024-05-21 18:21:30,868:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:30,870:INFO:[LightGBM] [Info] Total Bins 50745
2024-05-21 18:21:30,871:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 199
2024-05-21 18:21:30,873:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:30,873:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:31,742:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:31,753:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010040 seconds.
2024-05-21 18:21:31,753:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:31,755:INFO:[LightGBM] [Info] Total Bins 50490
2024-05-21 18:21:31,758:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 198
2024-05-21 18:21:31,759:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:31,759:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:32,448:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:32,463:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014058 seconds.
2024-05-21 18:21:32,463:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:32,465:INFO:[LightGBM] [Info] Total Bins 50235
2024-05-21 18:21:32,466:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 197
2024-05-21 18:21:32,468:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:32,468:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:33,281:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:33,294:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012231 seconds.
2024-05-21 18:21:33,294:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:33,296:INFO:[LightGBM] [Info] Total Bins 49980
2024-05-21 18:21:33,297:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 196
2024-05-21 18:21:33,299:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:33,299:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:34,333:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:34,347:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013308 seconds.
2024-05-21 18:21:34,347:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:34,349:INFO:[LightGBM] [Info] Total Bins 49725
2024-05-21 18:21:34,350:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 195
2024-05-21 18:21:34,352:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:34,352:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:35,348:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:35,361:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011682 seconds.
2024-05-21 18:21:35,361:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:35,363:INFO:[LightGBM] [Info] Total Bins 49470
2024-05-21 18:21:35,364:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 194
2024-05-21 18:21:35,365:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:35,366:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:36,054:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:36,070:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009761 seconds.
2024-05-21 18:21:36,070:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:36,072:INFO:[LightGBM] [Info] Total Bins 49215
2024-05-21 18:21:36,073:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 193
2024-05-21 18:21:36,075:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:36,075:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:36,810:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:36,821:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009887 seconds.
2024-05-21 18:21:36,821:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:36,823:INFO:[LightGBM] [Info] Total Bins 48960
2024-05-21 18:21:36,824:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 192
2024-05-21 18:21:36,826:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:36,826:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:37,460:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:37,472:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011556 seconds.
2024-05-21 18:21:37,473:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:37,474:INFO:[LightGBM] [Info] Total Bins 48705
2024-05-21 18:21:37,476:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 191
2024-05-21 18:21:37,477:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:37,478:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:38,412:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:38,424:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011204 seconds.
2024-05-21 18:21:38,424:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:38,426:INFO:[LightGBM] [Info] Total Bins 48450
2024-05-21 18:21:38,427:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 190
2024-05-21 18:21:38,429:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:38,429:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:39,497:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:39,511:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014433 seconds.
2024-05-21 18:21:39,512:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:39,514:INFO:[LightGBM] [Info] Total Bins 48195
2024-05-21 18:21:39,515:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 189
2024-05-21 18:21:39,517:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:39,517:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:40,283:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:40,294:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010373 seconds.
2024-05-21 18:21:40,294:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:40,296:INFO:[LightGBM] [Info] Total Bins 47940
2024-05-21 18:21:40,299:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 188
2024-05-21 18:21:40,301:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:40,301:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:40,951:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:40,962:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010818 seconds.
2024-05-21 18:21:40,963:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:40,965:INFO:[LightGBM] [Info] Total Bins 47685
2024-05-21 18:21:40,966:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 187
2024-05-21 18:21:40,969:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:40,969:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:41,602:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:41,614:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012001 seconds.
2024-05-21 18:21:41,614:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:41,616:INFO:[LightGBM] [Info] Total Bins 47430
2024-05-21 18:21:41,618:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 186
2024-05-21 18:21:41,619:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:41,620:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:42,404:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:42,419:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015045 seconds.
2024-05-21 18:21:42,420:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:42,422:INFO:[LightGBM] [Info] Total Bins 47175
2024-05-21 18:21:42,423:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 185
2024-05-21 18:21:42,424:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:42,425:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:43,360:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:43,373:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013163 seconds.
2024-05-21 18:21:43,373:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:43,375:INFO:[LightGBM] [Info] Total Bins 46920
2024-05-21 18:21:43,378:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 184
2024-05-21 18:21:43,378:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:43,379:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:44,307:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:44,318:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010607 seconds.
2024-05-21 18:21:44,318:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:44,320:INFO:[LightGBM] [Info] Total Bins 46665
2024-05-21 18:21:44,322:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 183
2024-05-21 18:21:44,324:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:44,324:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:45,030:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:45,040:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010439 seconds.
2024-05-21 18:21:45,040:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:45,042:INFO:[LightGBM] [Info] Total Bins 46410
2024-05-21 18:21:45,043:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 182
2024-05-21 18:21:45,045:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:45,045:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:45,705:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:45,719:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013554 seconds.
2024-05-21 18:21:45,719:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:45,721:INFO:[LightGBM] [Info] Total Bins 46155
2024-05-21 18:21:45,723:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 181
2024-05-21 18:21:45,724:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:45,724:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:46,310:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:46,319:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008730 seconds.
2024-05-21 18:21:46,319:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:46,321:INFO:[LightGBM] [Info] Total Bins 45900
2024-05-21 18:21:46,323:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 180
2024-05-21 18:21:46,324:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:46,324:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:47,155:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:47,169:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014008 seconds.
2024-05-21 18:21:47,169:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:47,171:INFO:[LightGBM] [Info] Total Bins 45645
2024-05-21 18:21:47,173:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 179
2024-05-21 18:21:47,174:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:47,174:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:48,079:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:48,091:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011128 seconds.
2024-05-21 18:21:48,092:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:48,094:INFO:[LightGBM] [Info] Total Bins 45390
2024-05-21 18:21:48,097:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 178
2024-05-21 18:21:48,099:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:48,099:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:48,978:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:48,987:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009479 seconds.
2024-05-21 18:21:48,988:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:48,989:INFO:[LightGBM] [Info] Total Bins 45135
2024-05-21 18:21:48,991:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 177
2024-05-21 18:21:48,992:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:48,992:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:49,591:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:49,606:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015312 seconds.
2024-05-21 18:21:49,607:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:49,608:INFO:[LightGBM] [Info] Total Bins 44880
2024-05-21 18:21:49,610:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 176
2024-05-21 18:21:49,611:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:49,611:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:50,260:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:50,270:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009415 seconds.
2024-05-21 18:21:50,270:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:50,272:INFO:[LightGBM] [Info] Total Bins 44625
2024-05-21 18:21:50,273:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 175
2024-05-21 18:21:50,275:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:50,275:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:50,899:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:50,908:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008763 seconds.
2024-05-21 18:21:50,908:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:50,910:INFO:[LightGBM] [Info] Total Bins 44370
2024-05-21 18:21:50,911:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 174
2024-05-21 18:21:50,912:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:50,913:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:51,802:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:51,812:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009650 seconds.
2024-05-21 18:21:51,813:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:51,814:INFO:[LightGBM] [Info] Total Bins 44115
2024-05-21 18:21:51,816:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 173
2024-05-21 18:21:51,817:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:51,817:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:52,674:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:52,685:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009953 seconds.
2024-05-21 18:21:52,685:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:52,687:INFO:[LightGBM] [Info] Total Bins 43860
2024-05-21 18:21:52,688:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 172
2024-05-21 18:21:52,690:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:52,690:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:53,516:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:53,525:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009038 seconds.
2024-05-21 18:21:53,525:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:53,527:INFO:[LightGBM] [Info] Total Bins 43605
2024-05-21 18:21:53,528:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 171
2024-05-21 18:21:53,530:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:53,530:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:54,178:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:54,186:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008108 seconds.
2024-05-21 18:21:54,187:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:54,188:INFO:[LightGBM] [Info] Total Bins 43350
2024-05-21 18:21:54,189:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 170
2024-05-21 18:21:54,191:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:54,191:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:54,780:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:54,789:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008159 seconds.
2024-05-21 18:21:54,789:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:54,791:INFO:[LightGBM] [Info] Total Bins 43095
2024-05-21 18:21:54,793:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 169
2024-05-21 18:21:54,794:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:54,794:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:55,342:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:55,351:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008252 seconds.
2024-05-21 18:21:55,351:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:55,353:INFO:[LightGBM] [Info] Total Bins 42840
2024-05-21 18:21:55,354:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 168
2024-05-21 18:21:55,356:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:55,356:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:56,113:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:56,127:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.012620 seconds.
2024-05-21 18:21:56,127:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:56,129:INFO:[LightGBM] [Info] Total Bins 42585
2024-05-21 18:21:56,132:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 167
2024-05-21 18:21:56,134:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:56,134:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:56,968:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:56,980:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011418 seconds.
2024-05-21 18:21:56,980:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:56,982:INFO:[LightGBM] [Info] Total Bins 42330
2024-05-21 18:21:56,983:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 166
2024-05-21 18:21:56,984:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:56,985:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:57,805:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:57,815:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009682 seconds.
2024-05-21 18:21:57,815:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:57,817:INFO:[LightGBM] [Info] Total Bins 42075
2024-05-21 18:21:57,818:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 165
2024-05-21 18:21:57,820:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:57,820:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:58,430:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:58,440:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009427 seconds.
2024-05-21 18:21:58,440:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:58,441:INFO:[LightGBM] [Info] Total Bins 41820
2024-05-21 18:21:58,442:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 164
2024-05-21 18:21:58,444:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:58,444:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:59,029:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:59,038:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008054 seconds.
2024-05-21 18:21:59,038:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:59,040:INFO:[LightGBM] [Info] Total Bins 41565
2024-05-21 18:21:59,041:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 163
2024-05-21 18:21:59,042:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:59,042:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:21:59,577:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:21:59,585:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007722 seconds.
2024-05-21 18:21:59,585:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:21:59,587:INFO:[LightGBM] [Info] Total Bins 41310
2024-05-21 18:21:59,588:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 162
2024-05-21 18:21:59,590:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:21:59,590:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:00,228:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:00,238:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009703 seconds.
2024-05-21 18:22:00,238:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:00,240:INFO:[LightGBM] [Info] Total Bins 41055
2024-05-21 18:22:00,242:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 161
2024-05-21 18:22:00,243:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:00,243:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:01,057:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:01,066:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008863 seconds.
2024-05-21 18:22:01,066:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:01,068:INFO:[LightGBM] [Info] Total Bins 40800
2024-05-21 18:22:01,069:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 160
2024-05-21 18:22:01,071:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:01,071:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:02,010:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:02,024:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.013641 seconds.
2024-05-21 18:22:02,024:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:02,026:INFO:[LightGBM] [Info] Total Bins 40545
2024-05-21 18:22:02,028:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 159
2024-05-21 18:22:02,029:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:02,030:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:03,226:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:03,235:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008356 seconds.
2024-05-21 18:22:03,235:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:03,236:INFO:[LightGBM] [Info] Total Bins 40290
2024-05-21 18:22:03,238:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 158
2024-05-21 18:22:03,239:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:03,239:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:03,804:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:03,813:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008793 seconds.
2024-05-21 18:22:03,814:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:03,815:INFO:[LightGBM] [Info] Total Bins 40035
2024-05-21 18:22:03,816:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 157
2024-05-21 18:22:03,818:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:03,818:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:04,396:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:04,404:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007784 seconds.
2024-05-21 18:22:04,405:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:04,406:INFO:[LightGBM] [Info] Total Bins 39780
2024-05-21 18:22:04,409:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 156
2024-05-21 18:22:04,410:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:04,411:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:05,056:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:05,066:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010337 seconds.
2024-05-21 18:22:05,067:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:05,069:INFO:[LightGBM] [Info] Total Bins 39525
2024-05-21 18:22:05,070:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 155
2024-05-21 18:22:05,071:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:05,071:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:05,881:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:05,891:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009039 seconds.
2024-05-21 18:22:05,891:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:05,893:INFO:[LightGBM] [Info] Total Bins 39270
2024-05-21 18:22:05,894:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 154
2024-05-21 18:22:05,895:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:05,896:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:06,710:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:06,720:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010012 seconds.
2024-05-21 18:22:06,720:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:06,722:INFO:[LightGBM] [Info] Total Bins 39015
2024-05-21 18:22:06,723:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 153
2024-05-21 18:22:06,725:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:06,725:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:07,547:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:07,557:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009621 seconds.
2024-05-21 18:22:07,557:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:07,559:INFO:[LightGBM] [Info] Total Bins 38760
2024-05-21 18:22:07,560:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 152
2024-05-21 18:22:07,562:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:07,562:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:08,318:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:08,329:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010978 seconds.
2024-05-21 18:22:08,329:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:08,331:INFO:[LightGBM] [Info] Total Bins 38505
2024-05-21 18:22:08,332:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 151
2024-05-21 18:22:08,334:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:08,334:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:09,021:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:09,030:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009006 seconds.
2024-05-21 18:22:09,030:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:09,032:INFO:[LightGBM] [Info] Total Bins 38250
2024-05-21 18:22:09,033:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 150
2024-05-21 18:22:09,035:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:09,035:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:09,653:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:09,662:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008450 seconds.
2024-05-21 18:22:09,663:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:09,664:INFO:[LightGBM] [Info] Total Bins 37995
2024-05-21 18:22:09,665:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 149
2024-05-21 18:22:09,667:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:09,667:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:10,457:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:10,468:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010573 seconds.
2024-05-21 18:22:10,468:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:10,470:INFO:[LightGBM] [Info] Total Bins 37740
2024-05-21 18:22:10,471:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 148
2024-05-21 18:22:10,472:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:10,472:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:11,314:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:11,326:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011588 seconds.
2024-05-21 18:22:11,327:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:11,328:INFO:[LightGBM] [Info] Total Bins 37485
2024-05-21 18:22:11,329:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 147
2024-05-21 18:22:11,331:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:11,331:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:12,018:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:12,025:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007317 seconds.
2024-05-21 18:22:12,025:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:12,027:INFO:[LightGBM] [Info] Total Bins 37230
2024-05-21 18:22:12,028:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 146
2024-05-21 18:22:12,029:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:12,030:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:12,542:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:12,550:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007565 seconds.
2024-05-21 18:22:12,550:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:12,552:INFO:[LightGBM] [Info] Total Bins 36975
2024-05-21 18:22:12,553:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 145
2024-05-21 18:22:12,554:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:12,554:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:13,083:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:13,090:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006990 seconds.
2024-05-21 18:22:13,091:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:13,092:INFO:[LightGBM] [Info] Total Bins 36720
2024-05-21 18:22:13,093:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 144
2024-05-21 18:22:13,095:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:13,095:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:13,692:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:13,703:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010751 seconds.
2024-05-21 18:22:13,704:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:13,705:INFO:[LightGBM] [Info] Total Bins 36465
2024-05-21 18:22:13,706:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 143
2024-05-21 18:22:13,708:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:13,708:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:14,489:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:14,499:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008755 seconds.
2024-05-21 18:22:14,499:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:14,501:INFO:[LightGBM] [Info] Total Bins 36210
2024-05-21 18:22:14,502:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 142
2024-05-21 18:22:14,503:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:14,503:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:15,329:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:15,339:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009659 seconds.
2024-05-21 18:22:15,339:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:15,340:INFO:[LightGBM] [Info] Total Bins 35955
2024-05-21 18:22:15,341:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 141
2024-05-21 18:22:15,342:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:15,344:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:16,157:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:16,165:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007586 seconds.
2024-05-21 18:22:16,165:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:16,167:INFO:[LightGBM] [Info] Total Bins 35700
2024-05-21 18:22:16,168:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 140
2024-05-21 18:22:16,169:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:16,169:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:16,722:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:16,729:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006694 seconds.
2024-05-21 18:22:16,729:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:16,730:INFO:[LightGBM] [Info] Total Bins 35445
2024-05-21 18:22:16,731:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 139
2024-05-21 18:22:16,733:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:16,733:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:17,284:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:17,291:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007029 seconds.
2024-05-21 18:22:17,291:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:17,293:INFO:[LightGBM] [Info] Total Bins 35190
2024-05-21 18:22:17,294:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 138
2024-05-21 18:22:17,295:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:17,295:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:17,817:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:17,824:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006654 seconds.
2024-05-21 18:22:17,824:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:17,825:INFO:[LightGBM] [Info] Total Bins 34935
2024-05-21 18:22:17,827:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 137
2024-05-21 18:22:17,828:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:17,828:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:18,326:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:18,332:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006527 seconds.
2024-05-21 18:22:18,333:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:18,334:INFO:[LightGBM] [Info] Total Bins 34680
2024-05-21 18:22:18,335:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 136
2024-05-21 18:22:18,336:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:18,336:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:19,088:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:19,098:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.010006 seconds.
2024-05-21 18:22:19,098:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:19,100:INFO:[LightGBM] [Info] Total Bins 34425
2024-05-21 18:22:19,101:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 135
2024-05-21 18:22:19,102:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:19,102:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:19,829:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:19,836:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007206 seconds.
2024-05-21 18:22:19,836:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:19,838:INFO:[LightGBM] [Info] Total Bins 34170
2024-05-21 18:22:19,839:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 134
2024-05-21 18:22:19,840:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:19,840:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:20,522:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:20,531:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007908 seconds.
2024-05-21 18:22:20,531:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:20,532:INFO:[LightGBM] [Info] Total Bins 33915
2024-05-21 18:22:20,533:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 133
2024-05-21 18:22:20,534:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:20,535:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:21,136:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:21,143:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006551 seconds.
2024-05-21 18:22:21,143:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:21,144:INFO:[LightGBM] [Info] Total Bins 33660
2024-05-21 18:22:21,145:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 132
2024-05-21 18:22:21,146:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:21,146:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:21,612:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:21,621:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007849 seconds.
2024-05-21 18:22:21,621:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:21,622:INFO:[LightGBM] [Info] Total Bins 33405
2024-05-21 18:22:21,623:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 131
2024-05-21 18:22:21,625:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:21,625:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:22,147:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:22,153:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006081 seconds.
2024-05-21 18:22:22,154:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:22,155:INFO:[LightGBM] [Info] Total Bins 33150
2024-05-21 18:22:22,157:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 130
2024-05-21 18:22:22,158:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:22,159:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:22,676:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:22,683:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006162 seconds.
2024-05-21 18:22:22,683:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:22,684:INFO:[LightGBM] [Info] Total Bins 32895
2024-05-21 18:22:22,685:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 129
2024-05-21 18:22:22,687:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:22,687:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:23,352:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:23,361:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008690 seconds.
2024-05-21 18:22:23,362:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:23,363:INFO:[LightGBM] [Info] Total Bins 32640
2024-05-21 18:22:23,364:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 128
2024-05-21 18:22:23,366:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:23,366:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:24,080:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:24,087:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006781 seconds.
2024-05-21 18:22:24,087:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:24,089:INFO:[LightGBM] [Info] Total Bins 32385
2024-05-21 18:22:24,089:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 127
2024-05-21 18:22:24,091:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:24,091:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:24,778:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:24,786:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008038 seconds.
2024-05-21 18:22:24,786:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:24,788:INFO:[LightGBM] [Info] Total Bins 32130
2024-05-21 18:22:24,789:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 126
2024-05-21 18:22:24,790:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:24,790:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:25,478:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:25,485:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006081 seconds.
2024-05-21 18:22:25,485:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:25,486:INFO:[LightGBM] [Info] Total Bins 31875
2024-05-21 18:22:25,487:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 125
2024-05-21 18:22:25,488:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:25,488:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:25,960:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:25,968:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007194 seconds.
2024-05-21 18:22:25,968:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:25,970:INFO:[LightGBM] [Info] Total Bins 31620
2024-05-21 18:22:25,970:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 124
2024-05-21 18:22:25,972:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:25,972:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:26,528:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:26,535:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006448 seconds.
2024-05-21 18:22:26,535:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:26,536:INFO:[LightGBM] [Info] Total Bins 31365
2024-05-21 18:22:26,537:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 123
2024-05-21 18:22:26,539:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:26,539:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:27,032:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:27,038:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006131 seconds.
2024-05-21 18:22:27,038:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:27,040:INFO:[LightGBM] [Info] Total Bins 31110
2024-05-21 18:22:27,041:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 122
2024-05-21 18:22:27,042:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:27,042:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:27,518:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:27,526:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007323 seconds.
2024-05-21 18:22:27,526:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:27,527:INFO:[LightGBM] [Info] Total Bins 30855
2024-05-21 18:22:27,528:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 121
2024-05-21 18:22:27,529:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:27,529:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:28,211:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:28,218:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006889 seconds.
2024-05-21 18:22:28,219:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:28,220:INFO:[LightGBM] [Info] Total Bins 30600
2024-05-21 18:22:28,221:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 120
2024-05-21 18:22:28,222:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:28,222:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:28,905:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:28,911:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006618 seconds.
2024-05-21 18:22:28,912:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:28,913:INFO:[LightGBM] [Info] Total Bins 30345
2024-05-21 18:22:28,914:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 119
2024-05-21 18:22:28,915:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:28,915:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:29,577:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:29,584:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006768 seconds.
2024-05-21 18:22:29,584:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:29,586:INFO:[LightGBM] [Info] Total Bins 30090
2024-05-21 18:22:29,587:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 118
2024-05-21 18:22:29,588:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:29,589:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:30,151:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:30,159:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007130 seconds.
2024-05-21 18:22:30,159:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:30,160:INFO:[LightGBM] [Info] Total Bins 29835
2024-05-21 18:22:30,161:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 117
2024-05-21 18:22:30,162:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:30,162:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:30,781:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:30,788:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006543 seconds.
2024-05-21 18:22:30,789:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:30,790:INFO:[LightGBM] [Info] Total Bins 29580
2024-05-21 18:22:30,791:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 116
2024-05-21 18:22:30,792:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:30,792:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:31,429:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:31,437:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006967 seconds.
2024-05-21 18:22:31,437:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:31,439:INFO:[LightGBM] [Info] Total Bins 29325
2024-05-21 18:22:31,440:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 115
2024-05-21 18:22:31,442:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:31,442:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:32,073:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:32,080:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006997 seconds.
2024-05-21 18:22:32,080:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:32,081:INFO:[LightGBM] [Info] Total Bins 29070
2024-05-21 18:22:32,082:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 114
2024-05-21 18:22:32,083:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:32,083:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:32,731:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:32,739:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006974 seconds.
2024-05-21 18:22:32,739:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:32,740:INFO:[LightGBM] [Info] Total Bins 28815
2024-05-21 18:22:32,741:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 113
2024-05-21 18:22:32,742:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:32,742:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:33,358:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:33,368:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.009732 seconds.
2024-05-21 18:22:33,368:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:33,369:INFO:[LightGBM] [Info] Total Bins 28560
2024-05-21 18:22:33,370:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 112
2024-05-21 18:22:33,372:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:33,372:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:34,034:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:34,044:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008861 seconds.
2024-05-21 18:22:34,044:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:34,045:INFO:[LightGBM] [Info] Total Bins 28305
2024-05-21 18:22:34,046:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 111
2024-05-21 18:22:34,047:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:34,047:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:34,718:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:34,725:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006498 seconds.
2024-05-21 18:22:34,725:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:34,726:INFO:[LightGBM] [Info] Total Bins 28050
2024-05-21 18:22:34,727:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 110
2024-05-21 18:22:34,728:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:34,728:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:35,365:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:35,372:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006269 seconds.
2024-05-21 18:22:35,372:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:35,373:INFO:[LightGBM] [Info] Total Bins 27795
2024-05-21 18:22:35,374:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 109
2024-05-21 18:22:35,375:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:35,375:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:36,011:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:36,017:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006205 seconds.
2024-05-21 18:22:36,037:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:36,038:INFO:[LightGBM] [Info] Total Bins 27540
2024-05-21 18:22:36,039:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 108
2024-05-21 18:22:36,040:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:36,040:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:36,541:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:36,548:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005800 seconds.
2024-05-21 18:22:36,548:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:36,549:INFO:[LightGBM] [Info] Total Bins 27285
2024-05-21 18:22:36,549:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 107
2024-05-21 18:22:36,550:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:36,551:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:37,150:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:37,158:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006812 seconds.
2024-05-21 18:22:37,158:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:37,159:INFO:[LightGBM] [Info] Total Bins 27030
2024-05-21 18:22:37,160:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 106
2024-05-21 18:22:37,161:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:37,161:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:37,775:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:37,782:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006353 seconds.
2024-05-21 18:22:37,782:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:37,783:INFO:[LightGBM] [Info] Total Bins 26775
2024-05-21 18:22:37,784:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 105
2024-05-21 18:22:37,785:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:37,786:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:38,371:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:38,377:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005929 seconds.
2024-05-21 18:22:38,378:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:38,379:INFO:[LightGBM] [Info] Total Bins 26520
2024-05-21 18:22:38,379:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 104
2024-05-21 18:22:38,380:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:38,380:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:39,073:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:39,079:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005868 seconds.
2024-05-21 18:22:39,079:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:39,080:INFO:[LightGBM] [Info] Total Bins 26265
2024-05-21 18:22:39,081:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 103
2024-05-21 18:22:39,082:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:39,082:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:39,569:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:39,575:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005856 seconds.
2024-05-21 18:22:39,575:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:39,576:INFO:[LightGBM] [Info] Total Bins 26010
2024-05-21 18:22:39,577:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 102
2024-05-21 18:22:39,578:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:39,578:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:40,032:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:40,039:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007040 seconds.
2024-05-21 18:22:40,039:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:40,040:INFO:[LightGBM] [Info] Total Bins 25755
2024-05-21 18:22:40,041:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 101
2024-05-21 18:22:40,042:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:40,042:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:40,437:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:40,442:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004480 seconds.
2024-05-21 18:22:40,442:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:40,443:INFO:[LightGBM] [Info] Total Bins 25500
2024-05-21 18:22:40,444:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 100
2024-05-21 18:22:40,445:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:40,445:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:40,904:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:40,910:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005250 seconds.
2024-05-21 18:22:40,910:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:40,911:INFO:[LightGBM] [Info] Total Bins 25245
2024-05-21 18:22:40,912:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 99
2024-05-21 18:22:40,913:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:40,913:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:41,444:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:41,450:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005580 seconds.
2024-05-21 18:22:41,450:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:41,451:INFO:[LightGBM] [Info] Total Bins 24990
2024-05-21 18:22:41,452:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 98
2024-05-21 18:22:41,453:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:41,453:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:42,017:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:42,022:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005371 seconds.
2024-05-21 18:22:42,023:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:42,024:INFO:[LightGBM] [Info] Total Bins 24735
2024-05-21 18:22:42,024:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 97
2024-05-21 18:22:42,025:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:42,026:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:42,562:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:42,567:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004934 seconds.
2024-05-21 18:22:42,567:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:42,567:INFO:[LightGBM] [Info] Total Bins 24480
2024-05-21 18:22:42,568:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 96
2024-05-21 18:22:42,569:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:42,569:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:43,129:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:43,134:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005173 seconds.
2024-05-21 18:22:43,134:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:43,135:INFO:[LightGBM] [Info] Total Bins 24225
2024-05-21 18:22:43,136:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 95
2024-05-21 18:22:43,137:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:43,137:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:43,696:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:43,700:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004520 seconds.
2024-05-21 18:22:43,701:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:43,702:INFO:[LightGBM] [Info] Total Bins 23970
2024-05-21 18:22:43,702:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 94
2024-05-21 18:22:43,703:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:43,703:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:44,086:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:44,090:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004385 seconds.
2024-05-21 18:22:44,091:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:44,092:INFO:[LightGBM] [Info] Total Bins 23715
2024-05-21 18:22:44,092:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 93
2024-05-21 18:22:44,093:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:44,094:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:44,528:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:44,535:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005998 seconds.
2024-05-21 18:22:44,535:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:44,536:INFO:[LightGBM] [Info] Total Bins 23460
2024-05-21 18:22:44,537:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 92
2024-05-21 18:22:44,538:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:44,538:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:44,951:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:44,956:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005136 seconds.
2024-05-21 18:22:44,957:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:44,958:INFO:[LightGBM] [Info] Total Bins 23205
2024-05-21 18:22:44,959:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 91
2024-05-21 18:22:44,960:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:44,960:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:45,472:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:45,484:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.011005 seconds.
2024-05-21 18:22:45,484:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:45,485:INFO:[LightGBM] [Info] Total Bins 22950
2024-05-21 18:22:45,486:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 90
2024-05-21 18:22:45,487:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:45,488:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:46,009:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:46,015:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005015 seconds.
2024-05-21 18:22:46,015:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:46,016:INFO:[LightGBM] [Info] Total Bins 22695
2024-05-21 18:22:46,016:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 89
2024-05-21 18:22:46,017:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:46,018:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:46,505:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:46,512:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006350 seconds.
2024-05-21 18:22:46,512:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:46,513:INFO:[LightGBM] [Info] Total Bins 22440
2024-05-21 18:22:46,513:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 88
2024-05-21 18:22:46,514:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:46,515:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:47,053:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:47,060:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.007117 seconds.
2024-05-21 18:22:47,061:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:47,061:INFO:[LightGBM] [Info] Total Bins 22185
2024-05-21 18:22:47,062:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 87
2024-05-21 18:22:47,063:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:47,063:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:47,648:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:47,653:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004817 seconds.
2024-05-21 18:22:47,653:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:47,654:INFO:[LightGBM] [Info] Total Bins 21930
2024-05-21 18:22:47,655:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 86
2024-05-21 18:22:47,656:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:47,656:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:48,103:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:48,108:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004480 seconds.
2024-05-21 18:22:48,108:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:48,109:INFO:[LightGBM] [Info] Total Bins 21675
2024-05-21 18:22:48,109:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 85
2024-05-21 18:22:48,110:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:48,111:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:48,416:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:48,421:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004946 seconds.
2024-05-21 18:22:48,421:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:48,422:INFO:[LightGBM] [Info] Total Bins 21420
2024-05-21 18:22:48,423:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 84
2024-05-21 18:22:48,424:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:48,424:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:48,794:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:48,798:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003820 seconds.
2024-05-21 18:22:48,798:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:48,799:INFO:[LightGBM] [Info] Total Bins 21165
2024-05-21 18:22:48,800:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 83
2024-05-21 18:22:48,801:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:48,801:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:49,128:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:49,133:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003877 seconds.
2024-05-21 18:22:49,133:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:49,134:INFO:[LightGBM] [Info] Total Bins 20910
2024-05-21 18:22:49,134:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 82
2024-05-21 18:22:49,135:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:49,135:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:49,570:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:49,575:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004488 seconds.
2024-05-21 18:22:49,575:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:49,576:INFO:[LightGBM] [Info] Total Bins 20655
2024-05-21 18:22:49,577:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 81
2024-05-21 18:22:49,577:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:49,578:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:50,104:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:50,111:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.006562 seconds.
2024-05-21 18:22:50,111:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:50,113:INFO:[LightGBM] [Info] Total Bins 20400
2024-05-21 18:22:50,113:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 80
2024-05-21 18:22:50,114:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:50,115:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:50,629:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:50,635:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005701 seconds.
2024-05-21 18:22:50,635:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:50,636:INFO:[LightGBM] [Info] Total Bins 20145
2024-05-21 18:22:50,637:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 79
2024-05-21 18:22:50,638:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:50,638:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:51,280:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:51,293:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.009180 seconds.
2024-05-21 18:22:51,293:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-05-21 18:22:51,293:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-05-21 18:22:51,294:INFO:[LightGBM] [Info] Total Bins 19890
2024-05-21 18:22:51,294:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 78
2024-05-21 18:22:51,295:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:51,295:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:53,454:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:53,459:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004898 seconds.
2024-05-21 18:22:53,460:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:53,460:INFO:[LightGBM] [Info] Total Bins 19635
2024-05-21 18:22:53,460:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 77
2024-05-21 18:22:53,462:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:53,463:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:53,979:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:53,988:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.008531 seconds.
2024-05-21 18:22:53,988:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:53,989:INFO:[LightGBM] [Info] Total Bins 19380
2024-05-21 18:22:53,989:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 76
2024-05-21 18:22:53,990:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:53,991:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:54,457:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:54,462:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004253 seconds.
2024-05-21 18:22:54,462:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:54,463:INFO:[LightGBM] [Info] Total Bins 19125
2024-05-21 18:22:54,463:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 75
2024-05-21 18:22:54,464:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:54,465:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:54,936:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:54,941:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004474 seconds.
2024-05-21 18:22:54,941:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:54,942:INFO:[LightGBM] [Info] Total Bins 18870
2024-05-21 18:22:54,942:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 74
2024-05-21 18:22:54,943:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:54,944:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:55,466:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:55,472:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005514 seconds.
2024-05-21 18:22:55,472:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:55,473:INFO:[LightGBM] [Info] Total Bins 18615
2024-05-21 18:22:55,473:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 73
2024-05-21 18:22:55,474:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:55,475:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:55,966:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:55,971:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004954 seconds.
2024-05-21 18:22:55,971:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:55,972:INFO:[LightGBM] [Info] Total Bins 18360
2024-05-21 18:22:55,973:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 72
2024-05-21 18:22:55,974:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:55,974:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:56,451:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:56,457:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.005150 seconds.
2024-05-21 18:22:56,457:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:56,458:INFO:[LightGBM] [Info] Total Bins 18105
2024-05-21 18:22:56,458:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 71
2024-05-21 18:22:56,459:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:56,459:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:56,961:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:56,966:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004822 seconds.
2024-05-21 18:22:56,966:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:56,967:INFO:[LightGBM] [Info] Total Bins 17850
2024-05-21 18:22:56,967:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 70
2024-05-21 18:22:56,968:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:56,969:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:57,417:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:57,422:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004858 seconds.
2024-05-21 18:22:57,422:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:57,423:INFO:[LightGBM] [Info] Total Bins 17595
2024-05-21 18:22:57,423:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 69
2024-05-21 18:22:57,424:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:57,424:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:57,861:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:57,865:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004019 seconds.
2024-05-21 18:22:57,865:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:57,866:INFO:[LightGBM] [Info] Total Bins 17340
2024-05-21 18:22:57,866:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 68
2024-05-21 18:22:57,867:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:57,867:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:58,373:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:58,377:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003718 seconds.
2024-05-21 18:22:58,378:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:58,378:INFO:[LightGBM] [Info] Total Bins 17085
2024-05-21 18:22:58,379:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 67
2024-05-21 18:22:58,379:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:58,380:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:58,829:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:58,832:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003501 seconds.
2024-05-21 18:22:58,833:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:58,833:INFO:[LightGBM] [Info] Total Bins 16830
2024-05-21 18:22:58,834:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 66
2024-05-21 18:22:58,835:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:58,835:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:59,106:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:59,109:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003111 seconds.
2024-05-21 18:22:59,109:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:59,110:INFO:[LightGBM] [Info] Total Bins 16575
2024-05-21 18:22:59,110:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 65
2024-05-21 18:22:59,111:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:59,111:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:59,399:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:59,403:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002979 seconds.
2024-05-21 18:22:59,403:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:59,403:INFO:[LightGBM] [Info] Total Bins 16320
2024-05-21 18:22:59,404:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 64
2024-05-21 18:22:59,405:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:59,405:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:22:59,765:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:22:59,769:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003762 seconds.
2024-05-21 18:22:59,769:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:22:59,770:INFO:[LightGBM] [Info] Total Bins 16065
2024-05-21 18:22:59,771:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 63
2024-05-21 18:22:59,772:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:22:59,772:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:00,174:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:00,178:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003256 seconds.
2024-05-21 18:23:00,178:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:00,179:INFO:[LightGBM] [Info] Total Bins 15810
2024-05-21 18:23:00,179:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 62
2024-05-21 18:23:00,180:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:00,181:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:00,554:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:00,558:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003374 seconds.
2024-05-21 18:23:00,558:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:00,559:INFO:[LightGBM] [Info] Total Bins 15555
2024-05-21 18:23:00,580:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 61
2024-05-21 18:23:00,580:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:00,581:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:01,019:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:01,023:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003730 seconds.
2024-05-21 18:23:01,023:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:01,024:INFO:[LightGBM] [Info] Total Bins 15300
2024-05-21 18:23:01,024:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 60
2024-05-21 18:23:01,025:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:01,025:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:01,420:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:01,424:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003808 seconds.
2024-05-21 18:23:01,424:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:01,425:INFO:[LightGBM] [Info] Total Bins 15045
2024-05-21 18:23:01,425:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 59
2024-05-21 18:23:01,426:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:01,426:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:01,829:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:01,833:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003905 seconds.
2024-05-21 18:23:01,834:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:01,834:INFO:[LightGBM] [Info] Total Bins 14790
2024-05-21 18:23:01,835:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 58
2024-05-21 18:23:01,835:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:01,836:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:02,256:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:02,260:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.004125 seconds.
2024-05-21 18:23:02,261:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:02,261:INFO:[LightGBM] [Info] Total Bins 14535
2024-05-21 18:23:02,262:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 57
2024-05-21 18:23:02,263:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:02,263:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:02,663:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:02,666:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002612 seconds.
2024-05-21 18:23:02,666:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:02,666:INFO:[LightGBM] [Info] Total Bins 14280
2024-05-21 18:23:02,667:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 56
2024-05-21 18:23:02,667:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:02,668:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:02,988:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:02,991:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003020 seconds.
2024-05-21 18:23:02,991:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:02,992:INFO:[LightGBM] [Info] Total Bins 14025
2024-05-21 18:23:02,992:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 55
2024-05-21 18:23:02,993:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:02,993:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:03,706:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:03,710:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003336 seconds.
2024-05-21 18:23:03,710:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:03,711:INFO:[LightGBM] [Info] Total Bins 13770
2024-05-21 18:23:03,711:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 54
2024-05-21 18:23:03,712:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:03,712:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:03,986:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:03,989:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002774 seconds.
2024-05-21 18:23:03,989:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:03,989:INFO:[LightGBM] [Info] Total Bins 13515
2024-05-21 18:23:03,990:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 53
2024-05-21 18:23:03,990:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:03,991:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:04,330:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:04,334:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003062 seconds.
2024-05-21 18:23:04,334:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:04,335:INFO:[LightGBM] [Info] Total Bins 13260
2024-05-21 18:23:04,336:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 52
2024-05-21 18:23:04,336:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:04,336:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:04,682:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:04,686:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.003390 seconds.
2024-05-21 18:23:04,686:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:04,686:INFO:[LightGBM] [Info] Total Bins 13005
2024-05-21 18:23:04,687:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 51
2024-05-21 18:23:04,687:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:04,688:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:05,031:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:05,034:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002654 seconds.
2024-05-21 18:23:05,034:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:05,035:INFO:[LightGBM] [Info] Total Bins 12750
2024-05-21 18:23:05,035:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 50
2024-05-21 18:23:05,036:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:05,036:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:05,376:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:05,379:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002511 seconds.
2024-05-21 18:23:05,379:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:05,380:INFO:[LightGBM] [Info] Total Bins 12495
2024-05-21 18:23:05,380:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 49
2024-05-21 18:23:05,381:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:05,381:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:05,716:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:05,719:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002575 seconds.
2024-05-21 18:23:05,719:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:05,720:INFO:[LightGBM] [Info] Total Bins 12240
2024-05-21 18:23:05,720:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 48
2024-05-21 18:23:05,721:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:05,721:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:06,062:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:06,065:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002639 seconds.
2024-05-21 18:23:06,065:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:06,066:INFO:[LightGBM] [Info] Total Bins 11985
2024-05-21 18:23:06,066:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 47
2024-05-21 18:23:06,067:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:06,067:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:06,398:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:06,401:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002094 seconds.
2024-05-21 18:23:06,401:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:06,401:INFO:[LightGBM] [Info] Total Bins 11730
2024-05-21 18:23:06,402:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 46
2024-05-21 18:23:06,402:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:06,402:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:06,649:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:06,651:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002125 seconds.
2024-05-21 18:23:06,651:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:06,652:INFO:[LightGBM] [Info] Total Bins 11475
2024-05-21 18:23:06,652:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 45
2024-05-21 18:23:06,653:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:06,653:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:06,836:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:06,839:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002533 seconds.
2024-05-21 18:23:06,839:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:06,840:INFO:[LightGBM] [Info] Total Bins 11220
2024-05-21 18:23:06,840:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 44
2024-05-21 18:23:06,841:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:06,841:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:07,052:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:07,054:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001985 seconds.
2024-05-21 18:23:07,055:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:07,055:INFO:[LightGBM] [Info] Total Bins 10965
2024-05-21 18:23:07,055:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 43
2024-05-21 18:23:07,056:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:07,056:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:07,252:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:07,254:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002028 seconds.
2024-05-21 18:23:07,254:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:07,255:INFO:[LightGBM] [Info] Total Bins 10710
2024-05-21 18:23:07,255:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 42
2024-05-21 18:23:07,256:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:07,256:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:07,453:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:07,455:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001889 seconds.
2024-05-21 18:23:07,455:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:07,456:INFO:[LightGBM] [Info] Total Bins 10455
2024-05-21 18:23:07,456:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 41
2024-05-21 18:23:07,457:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:07,457:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:07,674:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:07,676:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002116 seconds.
2024-05-21 18:23:07,676:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:07,677:INFO:[LightGBM] [Info] Total Bins 10200
2024-05-21 18:23:07,677:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 40
2024-05-21 18:23:07,678:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:07,678:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:07,875:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:07,877:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001816 seconds.
2024-05-21 18:23:07,877:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:07,878:INFO:[LightGBM] [Info] Total Bins 9945
2024-05-21 18:23:07,878:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 39
2024-05-21 18:23:07,879:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:07,879:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:08,067:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:08,070:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001985 seconds.
2024-05-21 18:23:08,070:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:08,071:INFO:[LightGBM] [Info] Total Bins 9690
2024-05-21 18:23:08,071:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 38
2024-05-21 18:23:08,072:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:08,072:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:08,244:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:08,247:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001724 seconds.
2024-05-21 18:23:08,247:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:08,247:INFO:[LightGBM] [Info] Total Bins 9435
2024-05-21 18:23:08,248:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 37
2024-05-21 18:23:08,248:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:08,248:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:08,521:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:08,524:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002359 seconds.
2024-05-21 18:23:08,524:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:08,524:INFO:[LightGBM] [Info] Total Bins 9180
2024-05-21 18:23:08,525:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 36
2024-05-21 18:23:08,525:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:08,525:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:08,892:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:08,895:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002329 seconds.
2024-05-21 18:23:08,895:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:08,896:INFO:[LightGBM] [Info] Total Bins 8925
2024-05-21 18:23:08,896:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 35
2024-05-21 18:23:08,897:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:08,897:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:09,165:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:09,167:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001884 seconds.
2024-05-21 18:23:09,167:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:09,167:INFO:[LightGBM] [Info] Total Bins 8670
2024-05-21 18:23:09,168:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 34
2024-05-21 18:23:09,168:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:09,169:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:09,452:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:09,455:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002340 seconds.
2024-05-21 18:23:09,455:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:09,456:INFO:[LightGBM] [Info] Total Bins 8415
2024-05-21 18:23:09,456:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 33
2024-05-21 18:23:09,457:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:09,457:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:09,749:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:09,751:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001711 seconds.
2024-05-21 18:23:09,752:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:09,752:INFO:[LightGBM] [Info] Total Bins 8160
2024-05-21 18:23:09,752:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 32
2024-05-21 18:23:09,753:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:09,753:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:10,048:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:10,051:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.002014 seconds.
2024-05-21 18:23:10,051:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:10,052:INFO:[LightGBM] [Info] Total Bins 7905
2024-05-21 18:23:10,060:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 31
2024-05-21 18:23:10,066:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:10,067:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:10,557:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:10,559:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001563 seconds.
2024-05-21 18:23:10,559:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:10,559:INFO:[LightGBM] [Info] Total Bins 7650
2024-05-21 18:23:10,560:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 30
2024-05-21 18:23:10,560:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:10,560:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:10,813:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:10,815:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001792 seconds.
2024-05-21 18:23:10,815:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:10,816:INFO:[LightGBM] [Info] Total Bins 7395
2024-05-21 18:23:10,816:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 29
2024-05-21 18:23:10,816:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:10,817:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:11,057:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:11,060:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001771 seconds.
2024-05-21 18:23:11,060:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:11,060:INFO:[LightGBM] [Info] Total Bins 7140
2024-05-21 18:23:11,060:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 28
2024-05-21 18:23:11,061:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:11,061:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:11,281:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:11,283:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001305 seconds.
2024-05-21 18:23:11,283:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:11,283:INFO:[LightGBM] [Info] Total Bins 6885
2024-05-21 18:23:11,284:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 27
2024-05-21 18:23:11,284:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:11,284:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:11,585:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:11,586:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001254 seconds.
2024-05-21 18:23:11,586:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:11,587:INFO:[LightGBM] [Info] Total Bins 6630
2024-05-21 18:23:11,587:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 26
2024-05-21 18:23:11,587:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:11,588:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:11,776:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:11,777:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001319 seconds.
2024-05-21 18:23:11,778:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:11,778:INFO:[LightGBM] [Info] Total Bins 6375
2024-05-21 18:23:11,778:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 25
2024-05-21 18:23:11,779:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:11,779:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:11,954:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:11,956:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001353 seconds.
2024-05-21 18:23:11,956:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:11,957:INFO:[LightGBM] [Info] Total Bins 6120
2024-05-21 18:23:11,957:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 24
2024-05-21 18:23:11,958:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:11,958:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:12,293:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:12,295:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001843 seconds.
2024-05-21 18:23:12,295:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:12,296:INFO:[LightGBM] [Info] Total Bins 5865
2024-05-21 18:23:12,296:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 23
2024-05-21 18:23:12,296:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:12,297:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:12,574:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:12,575:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.001131 seconds.
2024-05-21 18:23:12,575:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:12,576:INFO:[LightGBM] [Info] Total Bins 5610
2024-05-21 18:23:12,576:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 22
2024-05-21 18:23:12,576:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:12,577:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:12,743:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:12,744:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000802 seconds.
2024-05-21 18:23:12,744:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:12,745:INFO:[LightGBM] [Info] Total Bins 5355
2024-05-21 18:23:12,745:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 21
2024-05-21 18:23:12,745:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:12,745:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:12,885:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:12,886:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000760 seconds.
2024-05-21 18:23:12,886:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:12,887:INFO:[LightGBM] [Info] Total Bins 5100
2024-05-21 18:23:12,887:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 20
2024-05-21 18:23:12,887:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:12,888:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:13,022:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:13,023:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000721 seconds.
2024-05-21 18:23:13,023:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:13,023:INFO:[LightGBM] [Info] Total Bins 4845
2024-05-21 18:23:13,023:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 19
2024-05-21 18:23:13,024:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:13,024:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:13,149:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:13,150:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000677 seconds.
2024-05-21 18:23:13,150:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:13,151:INFO:[LightGBM] [Info] Total Bins 4590
2024-05-21 18:23:13,151:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 18
2024-05-21 18:23:13,151:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:13,151:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:13,348:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:13,349:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000772 seconds.
2024-05-21 18:23:13,349:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:13,349:INFO:[LightGBM] [Info] Total Bins 4335
2024-05-21 18:23:13,349:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 17
2024-05-21 18:23:13,350:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:13,350:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:13,570:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:13,571:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000939 seconds.
2024-05-21 18:23:13,571:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:13,571:INFO:[LightGBM] [Info] Total Bins 4080
2024-05-21 18:23:13,571:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 16
2024-05-21 18:23:13,571:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:13,572:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:13,791:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:13,792:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000894 seconds.
2024-05-21 18:23:13,792:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:13,792:INFO:[LightGBM] [Info] Total Bins 3825
2024-05-21 18:23:13,793:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 15
2024-05-21 18:23:13,794:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:13,794:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:14,010:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:14,012:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000769 seconds.
2024-05-21 18:23:14,012:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:14,012:INFO:[LightGBM] [Info] Total Bins 3570
2024-05-21 18:23:14,012:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 14
2024-05-21 18:23:14,013:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:14,013:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:14,217:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:14,218:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000667 seconds.
2024-05-21 18:23:14,218:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:14,218:INFO:[LightGBM] [Info] Total Bins 3315
2024-05-21 18:23:14,219:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 13
2024-05-21 18:23:14,219:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:14,219:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:14,429:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:14,430:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000661 seconds.
2024-05-21 18:23:14,430:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:14,431:INFO:[LightGBM] [Info] Total Bins 3060
2024-05-21 18:23:14,431:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 12
2024-05-21 18:23:14,431:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:14,431:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:14,670:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:14,670:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000642 seconds.
2024-05-21 18:23:14,671:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:14,671:INFO:[LightGBM] [Info] Total Bins 2805
2024-05-21 18:23:14,671:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 11
2024-05-21 18:23:14,672:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:14,672:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:14,865:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:14,866:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000480 seconds.
2024-05-21 18:23:14,866:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:14,866:INFO:[LightGBM] [Info] Total Bins 2550
2024-05-21 18:23:14,866:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 10
2024-05-21 18:23:14,867:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:14,867:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,040:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,041:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000511 seconds.
2024-05-21 18:23:15,041:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,041:INFO:[LightGBM] [Info] Total Bins 2295
2024-05-21 18:23:15,041:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 9
2024-05-21 18:23:15,042:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,042:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,194:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,195:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000358 seconds.
2024-05-21 18:23:15,195:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,195:INFO:[LightGBM] [Info] Total Bins 2040
2024-05-21 18:23:15,196:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 8
2024-05-21 18:23:15,196:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,196:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,356:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,357:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000433 seconds.
2024-05-21 18:23:15,357:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,357:INFO:[LightGBM] [Info] Total Bins 1785
2024-05-21 18:23:15,357:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 7
2024-05-21 18:23:15,358:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,358:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,521:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,522:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000315 seconds.
2024-05-21 18:23:15,522:INFO:You can set `force_row_wise=true` to remove the overhead.
2024-05-21 18:23:15,522:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2024-05-21 18:23:15,522:INFO:[LightGBM] [Info] Total Bins 1530
2024-05-21 18:23:15,522:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 6
2024-05-21 18:23:15,523:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,523:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,685:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,686:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000232 seconds.
2024-05-21 18:23:15,686:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,686:INFO:[LightGBM] [Info] Total Bins 1275
2024-05-21 18:23:15,686:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 5
2024-05-21 18:23:15,687:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,687:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,777:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,778:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000205 seconds.
2024-05-21 18:23:15,778:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,778:INFO:[LightGBM] [Info] Total Bins 1020
2024-05-21 18:23:15,778:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 4
2024-05-21 18:23:15,778:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,778:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,866:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,867:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000178 seconds.
2024-05-21 18:23:15,867:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,867:INFO:[LightGBM] [Info] Total Bins 765
2024-05-21 18:23:15,867:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 3
2024-05-21 18:23:15,867:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,867:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:15,961:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:15,961:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000127 seconds.
2024-05-21 18:23:15,961:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:15,961:INFO:[LightGBM] [Info] Total Bins 510
2024-05-21 18:23:15,962:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 2
2024-05-21 18:23:15,962:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:15,962:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:16,054:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:16,054:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000105 seconds.
2024-05-21 18:23:16,054:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:16,054:INFO:[LightGBM] [Info] Total Bins 255
2024-05-21 18:23:16,054:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 1
2024-05-21 18:23:16,054:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:16,055:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:16,358:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:16,379:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021006 seconds.
2024-05-21 18:23:16,380:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:16,383:INFO:[LightGBM] [Info] Total Bins 87465
2024-05-21 18:23:16,386:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 343
2024-05-21 18:23:16,388:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:16,388:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:17,668:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:17,691:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022404 seconds.
2024-05-21 18:23:17,691:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:17,695:INFO:[LightGBM] [Info] Total Bins 87210
2024-05-21 18:23:17,698:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 342
2024-05-21 18:23:17,700:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:17,700:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:19,295:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:19,317:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021138 seconds.
2024-05-21 18:23:19,317:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:19,320:INFO:[LightGBM] [Info] Total Bins 86955
2024-05-21 18:23:19,324:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 341
2024-05-21 18:23:19,326:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:19,326:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:20,699:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:20,720:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020771 seconds.
2024-05-21 18:23:20,720:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:20,723:INFO:[LightGBM] [Info] Total Bins 86700
2024-05-21 18:23:20,727:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 340
2024-05-21 18:23:20,729:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:20,729:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:21,880:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:21,902:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021030 seconds.
2024-05-21 18:23:21,902:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:21,905:INFO:[LightGBM] [Info] Total Bins 86445
2024-05-21 18:23:21,908:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 339
2024-05-21 18:23:21,910:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:21,911:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:23,374:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:23,403:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.027532 seconds.
2024-05-21 18:23:23,403:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:23,406:INFO:[LightGBM] [Info] Total Bins 86190
2024-05-21 18:23:23,410:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 338
2024-05-21 18:23:23,412:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:23,412:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:24,942:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:24,964:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021025 seconds.
2024-05-21 18:23:24,964:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:24,968:INFO:[LightGBM] [Info] Total Bins 85935
2024-05-21 18:23:24,970:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 337
2024-05-21 18:23:24,973:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:24,973:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:26,134:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:26,156:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021141 seconds.
2024-05-21 18:23:26,156:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:26,159:INFO:[LightGBM] [Info] Total Bins 85680
2024-05-21 18:23:26,162:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 336
2024-05-21 18:23:26,165:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:26,165:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:27,507:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:27,534:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.025722 seconds.
2024-05-21 18:23:27,534:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:27,537:INFO:[LightGBM] [Info] Total Bins 85425
2024-05-21 18:23:27,541:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 335
2024-05-21 18:23:27,543:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:27,543:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:29,109:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:29,132:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021909 seconds.
2024-05-21 18:23:29,132:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:29,136:INFO:[LightGBM] [Info] Total Bins 85170
2024-05-21 18:23:29,139:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 334
2024-05-21 18:23:29,141:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:29,141:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:30,257:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:30,277:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020458 seconds.
2024-05-21 18:23:30,278:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:30,281:INFO:[LightGBM] [Info] Total Bins 84915
2024-05-21 18:23:30,284:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 333
2024-05-21 18:23:30,286:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:30,286:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:31,379:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:31,401:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020982 seconds.
2024-05-21 18:23:31,401:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:31,404:INFO:[LightGBM] [Info] Total Bins 84660
2024-05-21 18:23:31,407:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 332
2024-05-21 18:23:31,410:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:31,410:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:32,986:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:33,011:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023187 seconds.
2024-05-21 18:23:33,011:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:33,014:INFO:[LightGBM] [Info] Total Bins 84405
2024-05-21 18:23:33,018:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 331
2024-05-21 18:23:33,020:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:33,020:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:34,349:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:34,373:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022840 seconds.
2024-05-21 18:23:34,373:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:34,376:INFO:[LightGBM] [Info] Total Bins 84150
2024-05-21 18:23:34,381:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 330
2024-05-21 18:23:34,383:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:34,383:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:35,534:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:35,556:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021462 seconds.
2024-05-21 18:23:35,556:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:35,559:INFO:[LightGBM] [Info] Total Bins 83895
2024-05-21 18:23:35,562:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 329
2024-05-21 18:23:35,564:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:35,565:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:37,001:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:37,026:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023735 seconds.
2024-05-21 18:23:37,026:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:37,029:INFO:[LightGBM] [Info] Total Bins 83640
2024-05-21 18:23:37,032:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 328
2024-05-21 18:23:37,035:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:37,036:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:38,509:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:38,531:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021021 seconds.
2024-05-21 18:23:38,531:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:38,535:INFO:[LightGBM] [Info] Total Bins 83385
2024-05-21 18:23:38,538:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 327
2024-05-21 18:23:38,540:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:38,540:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:39,604:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:39,627:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022373 seconds.
2024-05-21 18:23:39,627:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:39,630:INFO:[LightGBM] [Info] Total Bins 83130
2024-05-21 18:23:39,633:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 326
2024-05-21 18:23:39,636:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:39,636:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:40,816:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:40,840:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023455 seconds.
2024-05-21 18:23:40,840:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:40,843:INFO:[LightGBM] [Info] Total Bins 82875
2024-05-21 18:23:40,847:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 325
2024-05-21 18:23:40,849:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:40,850:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:42,381:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:42,405:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022504 seconds.
2024-05-21 18:23:42,405:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:42,408:INFO:[LightGBM] [Info] Total Bins 82620
2024-05-21 18:23:42,412:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 324
2024-05-21 18:23:42,414:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:42,414:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:43,566:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:43,587:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020431 seconds.
2024-05-21 18:23:43,587:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:43,591:INFO:[LightGBM] [Info] Total Bins 82365
2024-05-21 18:23:43,594:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 323
2024-05-21 18:23:43,596:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:43,596:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:44,648:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:44,668:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019742 seconds.
2024-05-21 18:23:44,668:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:44,671:INFO:[LightGBM] [Info] Total Bins 82110
2024-05-21 18:23:44,675:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 322
2024-05-21 18:23:44,677:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:44,677:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:46,154:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:46,178:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022707 seconds.
2024-05-21 18:23:46,178:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:46,181:INFO:[LightGBM] [Info] Total Bins 81855
2024-05-21 18:23:46,184:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 321
2024-05-21 18:23:46,186:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:46,186:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:47,581:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:47,602:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020245 seconds.
2024-05-21 18:23:47,602:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:47,605:INFO:[LightGBM] [Info] Total Bins 81600
2024-05-21 18:23:47,608:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 320
2024-05-21 18:23:47,611:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:47,611:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:48,720:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:48,740:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019091 seconds.
2024-05-21 18:23:48,740:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:48,743:INFO:[LightGBM] [Info] Total Bins 81345
2024-05-21 18:23:48,746:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 319
2024-05-21 18:23:48,748:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:48,748:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:50,010:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:50,030:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019441 seconds.
2024-05-21 18:23:50,030:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:50,033:INFO:[LightGBM] [Info] Total Bins 81090
2024-05-21 18:23:50,037:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 318
2024-05-21 18:23:50,039:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:50,039:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:51,537:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:51,558:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020582 seconds.
2024-05-21 18:23:51,558:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:51,561:INFO:[LightGBM] [Info] Total Bins 80835
2024-05-21 18:23:51,565:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 317
2024-05-21 18:23:51,567:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:51,567:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:52,683:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:52,702:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019187 seconds.
2024-05-21 18:23:52,702:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:52,705:INFO:[LightGBM] [Info] Total Bins 80580
2024-05-21 18:23:52,708:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 316
2024-05-21 18:23:52,711:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:52,711:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:53,733:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:53,752:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018035 seconds.
2024-05-21 18:23:53,752:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:53,755:INFO:[LightGBM] [Info] Total Bins 80325
2024-05-21 18:23:53,758:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 315
2024-05-21 18:23:53,760:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:53,760:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:55,188:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:55,214:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024890 seconds.
2024-05-21 18:23:55,214:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:55,217:INFO:[LightGBM] [Info] Total Bins 80070
2024-05-21 18:23:55,221:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 314
2024-05-21 18:23:55,224:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:55,224:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:56,637:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:56,658:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019657 seconds.
2024-05-21 18:23:56,658:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:56,661:INFO:[LightGBM] [Info] Total Bins 79815
2024-05-21 18:23:56,663:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 313
2024-05-21 18:23:56,666:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:56,666:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:57,694:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:57,712:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017787 seconds.
2024-05-21 18:23:57,712:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:57,715:INFO:[LightGBM] [Info] Total Bins 79560
2024-05-21 18:23:57,719:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 312
2024-05-21 18:23:57,721:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:57,721:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:23:58,845:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:23:58,864:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018628 seconds.
2024-05-21 18:23:58,864:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:23:58,868:INFO:[LightGBM] [Info] Total Bins 79305
2024-05-21 18:23:58,871:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 311
2024-05-21 18:23:58,873:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:23:58,874:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:00,322:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:00,345:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022294 seconds.
2024-05-21 18:24:00,345:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:00,348:INFO:[LightGBM] [Info] Total Bins 79050
2024-05-21 18:24:00,351:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 310
2024-05-21 18:24:00,353:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:00,353:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:01,506:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:01,526:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019222 seconds.
2024-05-21 18:24:01,526:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:01,529:INFO:[LightGBM] [Info] Total Bins 78795
2024-05-21 18:24:01,532:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 309
2024-05-21 18:24:01,534:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:01,534:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:02,539:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:02,559:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019086 seconds.
2024-05-21 18:24:02,559:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:02,562:INFO:[LightGBM] [Info] Total Bins 78540
2024-05-21 18:24:02,565:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 308
2024-05-21 18:24:02,567:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:02,567:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:03,879:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:03,899:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019489 seconds.
2024-05-21 18:24:03,900:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:03,903:INFO:[LightGBM] [Info] Total Bins 78285
2024-05-21 18:24:03,906:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 307
2024-05-21 18:24:03,908:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:03,909:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:05,324:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:05,344:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019640 seconds.
2024-05-21 18:24:05,344:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:05,348:INFO:[LightGBM] [Info] Total Bins 78030
2024-05-21 18:24:05,351:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 306
2024-05-21 18:24:05,353:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:05,353:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:06,408:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:06,426:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017780 seconds.
2024-05-21 18:24:06,426:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:06,429:INFO:[LightGBM] [Info] Total Bins 77775
2024-05-21 18:24:06,432:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 305
2024-05-21 18:24:06,434:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:06,434:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:07,437:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:07,457:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019452 seconds.
2024-05-21 18:24:07,457:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:07,460:INFO:[LightGBM] [Info] Total Bins 77520
2024-05-21 18:24:07,463:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 304
2024-05-21 18:24:07,465:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:07,465:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:08,890:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:08,911:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020024 seconds.
2024-05-21 18:24:08,912:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:08,914:INFO:[LightGBM] [Info] Total Bins 77265
2024-05-21 18:24:08,918:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 303
2024-05-21 18:24:08,920:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:08,920:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:10,250:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:10,267:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016722 seconds.
2024-05-21 18:24:10,268:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:10,270:INFO:[LightGBM] [Info] Total Bins 77010
2024-05-21 18:24:10,274:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 302
2024-05-21 18:24:10,276:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:10,276:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:11,259:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:11,277:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016931 seconds.
2024-05-21 18:24:11,277:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:11,280:INFO:[LightGBM] [Info] Total Bins 76755
2024-05-21 18:24:11,283:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 301
2024-05-21 18:24:11,285:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:11,285:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:12,390:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:12,415:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024667 seconds.
2024-05-21 18:24:12,415:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:12,418:INFO:[LightGBM] [Info] Total Bins 76500
2024-05-21 18:24:12,422:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 300
2024-05-21 18:24:12,425:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:12,425:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:13,861:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:13,881:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019114 seconds.
2024-05-21 18:24:13,881:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:13,884:INFO:[LightGBM] [Info] Total Bins 76245
2024-05-21 18:24:13,887:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 299
2024-05-21 18:24:13,889:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:13,890:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:15,109:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:15,128:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017614 seconds.
2024-05-21 18:24:15,128:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:15,131:INFO:[LightGBM] [Info] Total Bins 75990
2024-05-21 18:24:15,133:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 298
2024-05-21 18:24:15,135:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:15,136:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:16,153:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:16,170:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016750 seconds.
2024-05-21 18:24:16,170:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:16,173:INFO:[LightGBM] [Info] Total Bins 75735
2024-05-21 18:24:16,176:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 297
2024-05-21 18:24:16,178:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:16,178:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:17,380:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:17,401:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019924 seconds.
2024-05-21 18:24:17,402:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:17,405:INFO:[LightGBM] [Info] Total Bins 75480
2024-05-21 18:24:17,407:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 296
2024-05-21 18:24:17,410:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:17,410:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:18,823:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:18,848:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.024114 seconds.
2024-05-21 18:24:18,848:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:18,851:INFO:[LightGBM] [Info] Total Bins 75225
2024-05-21 18:24:18,854:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 295
2024-05-21 18:24:18,856:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:18,857:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:20,104:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:20,123:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018152 seconds.
2024-05-21 18:24:20,123:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:20,126:INFO:[LightGBM] [Info] Total Bins 74970
2024-05-21 18:24:20,129:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 294
2024-05-21 18:24:20,131:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:20,131:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:21,470:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:21,495:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.023829 seconds.
2024-05-21 18:24:21,495:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:21,499:INFO:[LightGBM] [Info] Total Bins 74715
2024-05-21 18:24:21,502:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 293
2024-05-21 18:24:21,505:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:21,505:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:23,042:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:23,062:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019606 seconds.
2024-05-21 18:24:23,062:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:23,065:INFO:[LightGBM] [Info] Total Bins 74460
2024-05-21 18:24:23,068:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 292
2024-05-21 18:24:23,071:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:23,071:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:24,213:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:24,230:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016132 seconds.
2024-05-21 18:24:24,230:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:24,232:INFO:[LightGBM] [Info] Total Bins 74205
2024-05-21 18:24:24,235:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 291
2024-05-21 18:24:24,238:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:24,238:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:25,187:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:25,204:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016821 seconds.
2024-05-21 18:24:25,204:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:25,206:INFO:[LightGBM] [Info] Total Bins 73950
2024-05-21 18:24:25,209:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 290
2024-05-21 18:24:25,211:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:25,211:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:26,396:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:26,415:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017458 seconds.
2024-05-21 18:24:26,415:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:26,418:INFO:[LightGBM] [Info] Total Bins 73695
2024-05-21 18:24:26,422:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 289
2024-05-21 18:24:26,424:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:26,424:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:27,806:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:27,825:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018797 seconds.
2024-05-21 18:24:27,825:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:27,828:INFO:[LightGBM] [Info] Total Bins 73440
2024-05-21 18:24:27,831:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 288
2024-05-21 18:24:27,834:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:27,834:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:28,902:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:28,919:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016613 seconds.
2024-05-21 18:24:28,919:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:28,922:INFO:[LightGBM] [Info] Total Bins 73185
2024-05-21 18:24:28,926:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 287
2024-05-21 18:24:28,928:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:28,928:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:29,889:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:29,907:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017054 seconds.
2024-05-21 18:24:29,908:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:29,910:INFO:[LightGBM] [Info] Total Bins 72930
2024-05-21 18:24:29,913:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 286
2024-05-21 18:24:29,915:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:29,915:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:31,145:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:31,168:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021531 seconds.
2024-05-21 18:24:31,168:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:31,171:INFO:[LightGBM] [Info] Total Bins 72675
2024-05-21 18:24:31,174:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 285
2024-05-21 18:24:31,176:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:31,177:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:32,526:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:32,545:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018334 seconds.
2024-05-21 18:24:32,545:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:32,548:INFO:[LightGBM] [Info] Total Bins 72420
2024-05-21 18:24:32,551:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 284
2024-05-21 18:24:32,553:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:32,554:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:33,498:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:33,514:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016189 seconds.
2024-05-21 18:24:33,515:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:33,517:INFO:[LightGBM] [Info] Total Bins 72165
2024-05-21 18:24:33,520:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 283
2024-05-21 18:24:33,522:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:33,522:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:34,455:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:34,472:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.016275 seconds.
2024-05-21 18:24:34,472:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:34,475:INFO:[LightGBM] [Info] Total Bins 71910
2024-05-21 18:24:34,478:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 282
2024-05-21 18:24:34,480:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:34,480:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:35,796:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:35,817:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.019186 seconds.
2024-05-21 18:24:35,817:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:35,820:INFO:[LightGBM] [Info] Total Bins 71655
2024-05-21 18:24:35,824:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 281
2024-05-21 18:24:35,826:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:35,826:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:37,201:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:37,218:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015241 seconds.
2024-05-21 18:24:37,218:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:37,223:INFO:[LightGBM] [Info] Total Bins 71400
2024-05-21 18:24:37,226:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 280
2024-05-21 18:24:37,228:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:37,228:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:38,306:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:38,325:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.017906 seconds.
2024-05-21 18:24:38,325:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:38,327:INFO:[LightGBM] [Info] Total Bins 71145
2024-05-21 18:24:38,330:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 279
2024-05-21 18:24:38,332:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:38,333:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:39,506:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:39,525:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018481 seconds.
2024-05-21 18:24:39,525:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:39,528:INFO:[LightGBM] [Info] Total Bins 70890
2024-05-21 18:24:39,531:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 278
2024-05-21 18:24:39,533:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:39,533:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:41,233:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:41,252:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018535 seconds.
2024-05-21 18:24:41,252:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:41,255:INFO:[LightGBM] [Info] Total Bins 70635
2024-05-21 18:24:41,259:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 277
2024-05-21 18:24:41,261:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:41,261:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:42,434:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:42,449:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.014851 seconds.
2024-05-21 18:24:42,449:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:42,452:INFO:[LightGBM] [Info] Total Bins 70380
2024-05-21 18:24:42,455:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 276
2024-05-21 18:24:42,458:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:42,458:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:43,382:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:43,398:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.015326 seconds.
2024-05-21 18:24:43,398:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:43,401:INFO:[LightGBM] [Info] Total Bins 70125
2024-05-21 18:24:43,404:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 275
2024-05-21 18:24:43,406:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:43,406:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:44,681:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:44,701:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.018926 seconds.
2024-05-21 18:24:44,701:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:44,704:INFO:[LightGBM] [Info] Total Bins 69870
2024-05-21 18:24:44,709:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 274
2024-05-21 18:24:44,712:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:44,712:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:46,123:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:46,145:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021586 seconds.
2024-05-21 18:24:46,145:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:46,148:INFO:[LightGBM] [Info] Total Bins 69615
2024-05-21 18:24:46,151:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 273
2024-05-21 18:24:46,154:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:46,155:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-05-21 18:24:47,474:INFO:[LightGBM] [Info] Number of positive: 3327, number of negative: 5556
2024-05-21 18:24:47,497:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.022153 seconds.
2024-05-21 18:24:47,497:INFO:You can set `force_col_wise=true` to remove the overhead.
2024-05-21 18:24:47,500:INFO:[LightGBM] [Info] Total Bins 69360
2024-05-21 18:24:47,504:INFO:[LightGBM] [Info] Number of data points in the train set: 8883, number of used features: 272
2024-05-21 18:24:47,506:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.374536 -> initscore=-0.512807
2024-05-21 18:24:47,506:INFO:[LightGBM] [Info] Start training from score -0.512807
2024-06-06 14:50:18,069:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:50:18,070:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:50:18,070:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-06 14:50:18,070:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-07 20:13:19,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-07 20:13:19,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-07 20:13:19,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-07 20:13:19,528:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-07 20:13:30,648:INFO:PyCaret ClassificationExperiment
2024-06-07 20:13:30,648:INFO:Logging name: clf-default-name
2024-06-07 20:13:30,657:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-07 20:13:30,657:INFO:version 3.3.2
2024-06-07 20:13:30,657:INFO:Initializing setup()
2024-06-07 20:13:30,657:INFO:self.USI: 5a06
2024-06-07 20:13:30,657:INFO:self._variable_keys: {'html_param', 'fix_imbalance', 'fold_generator', 'fold_groups_param', 'X_test', 'log_plots_param', 'X_train', 'y_test', 'USI', 'seed', 'y', 'target_param', 'is_multiclass', 'logging_param', 'pipeline', 'fold_shuffle_param', 'data', '_available_plots', '_ml_usecase', 'memory', 'y_train', 'exp_id', 'X', 'idx', 'exp_name_log', 'gpu_param', 'n_jobs_param', 'gpu_n_jobs_param'}
2024-06-07 20:13:30,657:INFO:Checking environment
2024-06-07 20:13:30,657:INFO:python_version: 3.10.0
2024-06-07 20:13:30,657:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-06-07 20:13:30,657:INFO:machine: AMD64
2024-06-07 20:13:30,657:INFO:platform: Windows-10-10.0.22631-SP0
2024-06-07 20:13:30,660:INFO:Memory: svmem(total=16993001472, available=6706466816, percent=60.5, used=10286534656, free=6706466816)
2024-06-07 20:13:30,660:INFO:Physical Core: 6
2024-06-07 20:13:30,660:INFO:Logical Core: 12
2024-06-07 20:13:30,660:INFO:Checking libraries
2024-06-07 20:13:30,660:INFO:System:
2024-06-07 20:13:30,660:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-06-07 20:13:30,660:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-06-07 20:13:30,660:INFO:   machine: Windows-10-10.0.22631-SP0
2024-06-07 20:13:30,660:INFO:PyCaret required dependencies:
2024-06-07 20:13:31,508:WARNING:d:\projects\research\.venv\lib\site-packages\dask\dataframe\__init__.py:31: FutureWarning: 
Dask dataframe query planning is disabled because dask-expr is not installed.

You can install it with `pip install dask[dataframe]` or `conda install dask`.
This will raise in a future version.

  warnings.warn(msg, FutureWarning)

2024-06-07 20:13:32,145:INFO:                 pip: 24.0
2024-06-07 20:13:32,145:INFO:          setuptools: 57.4.0
2024-06-07 20:13:32,145:INFO:             pycaret: 3.3.2
2024-06-07 20:13:32,145:INFO:             IPython: 8.23.0
2024-06-07 20:13:32,145:INFO:          ipywidgets: 8.1.2
2024-06-07 20:13:32,145:INFO:                tqdm: 4.66.2
2024-06-07 20:13:32,145:INFO:               numpy: 1.26.3
2024-06-07 20:13:32,145:INFO:              pandas: 2.1.4
2024-06-07 20:13:32,145:INFO:              jinja2: 3.1.2
2024-06-07 20:13:32,145:INFO:               scipy: 1.11.4
2024-06-07 20:13:32,145:INFO:              joblib: 1.3.2
2024-06-07 20:13:32,145:INFO:             sklearn: 1.4.2
2024-06-07 20:13:32,145:INFO:                pyod: 1.1.3
2024-06-07 20:13:32,145:INFO:            imblearn: 0.12.2
2024-06-07 20:13:32,145:INFO:   category_encoders: 2.6.3
2024-06-07 20:13:32,145:INFO:            lightgbm: 4.3.0
2024-06-07 20:13:32,145:INFO:               numba: 0.59.1
2024-06-07 20:13:32,145:INFO:            requests: 2.31.0
2024-06-07 20:13:32,145:INFO:          matplotlib: 3.7.5
2024-06-07 20:13:32,145:INFO:          scikitplot: 0.3.7
2024-06-07 20:13:32,145:INFO:         yellowbrick: 1.5
2024-06-07 20:13:32,145:INFO:              plotly: 5.22.0
2024-06-07 20:13:32,145:INFO:    plotly-resampler: Not installed
2024-06-07 20:13:32,145:INFO:             kaleido: 0.2.1
2024-06-07 20:13:32,145:INFO:           schemdraw: 0.15
2024-06-07 20:13:32,145:INFO:         statsmodels: 0.14.2
2024-06-07 20:13:32,145:INFO:              sktime: 0.26.0
2024-06-07 20:13:32,145:INFO:               tbats: 1.1.3
2024-06-07 20:13:32,145:INFO:            pmdarima: 2.0.4
2024-06-07 20:13:32,145:INFO:              psutil: 5.9.8
2024-06-07 20:13:32,145:INFO:          markupsafe: 2.1.3
2024-06-07 20:13:32,145:INFO:             pickle5: Not installed
2024-06-07 20:13:32,145:INFO:         cloudpickle: 3.0.0
2024-06-07 20:13:32,145:INFO:         deprecation: 2.1.0
2024-06-07 20:13:32,145:INFO:              xxhash: 3.4.1
2024-06-07 20:13:32,145:INFO:           wurlitzer: Not installed
2024-06-07 20:13:32,145:INFO:PyCaret optional dependencies:
2024-06-07 20:13:37,262:INFO:                shap: Not installed
2024-06-07 20:13:37,262:INFO:           interpret: Not installed
2024-06-07 20:13:37,262:INFO:                umap: Not installed
2024-06-07 20:13:37,262:INFO:     ydata_profiling: Not installed
2024-06-07 20:13:37,262:INFO:  explainerdashboard: Not installed
2024-06-07 20:13:37,262:INFO:             autoviz: Not installed
2024-06-07 20:13:37,262:INFO:           fairlearn: Not installed
2024-06-07 20:13:37,262:INFO:          deepchecks: Not installed
2024-06-07 20:13:37,262:INFO:             xgboost: 2.0.3
2024-06-07 20:13:37,262:INFO:            catboost: Not installed
2024-06-07 20:13:37,262:INFO:              kmodes: Not installed
2024-06-07 20:13:37,262:INFO:             mlxtend: Not installed
2024-06-07 20:13:37,262:INFO:       statsforecast: Not installed
2024-06-07 20:13:37,262:INFO:        tune_sklearn: Not installed
2024-06-07 20:13:37,262:INFO:                 ray: Not installed
2024-06-07 20:13:37,262:INFO:            hyperopt: Not installed
2024-06-07 20:13:37,262:INFO:              optuna: 3.6.1
2024-06-07 20:13:37,262:INFO:               skopt: Not installed
2024-06-07 20:13:37,262:INFO:              mlflow: 2.13.0
2024-06-07 20:13:37,262:INFO:              gradio: 4.31.4
2024-06-07 20:13:37,262:INFO:             fastapi: 0.111.0
2024-06-07 20:13:37,262:INFO:             uvicorn: 0.29.0
2024-06-07 20:13:37,262:INFO:              m2cgen: 0.10.0
2024-06-07 20:13:37,262:INFO:           evidently: 0.4.23
2024-06-07 20:13:37,262:INFO:               fugue: 0.8.7
2024-06-07 20:13:37,262:INFO:           streamlit: Not installed
2024-06-07 20:13:37,262:INFO:             prophet: Not installed
2024-06-07 20:13:37,262:INFO:None
2024-06-07 20:13:37,262:INFO:Set up data.
2024-06-07 20:13:37,407:INFO:Set up folding strategy.
2024-06-07 20:13:37,407:INFO:Set up train/test split.
2024-06-07 20:13:37,664:INFO:Set up index.
2024-06-07 20:13:37,674:INFO:Assigning column types.
2024-06-07 20:13:37,924:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-07 20:13:37,990:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,016:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,062:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,075:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,129:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,129:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,176:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,179:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,179:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-07 20:13:38,244:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,278:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,278:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,345:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:38,379:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,392:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,393:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-07 20:13:38,492:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,595:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:38,595:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:38,595:INFO:Preparing preprocessing pipeline...
2024-06-07 20:13:38,642:INFO:Set up label encoding.
2024-06-07 20:13:38,642:INFO:Set up simple imputation.
2024-06-07 20:13:39,227:INFO:Finished creating preprocessing pipeline.
2024-06-07 20:13:39,258:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-06-07 20:13:39,258:INFO:Creating final display dataframe.
2024-06-07 20:13:40,774:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape       (9870, 344)
7    Transformed test set shape       (4231, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              5a06
2024-06-07 20:13:40,933:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:40,937:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:41,074:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:41,074:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:41,074:INFO:setup() successfully completed in 10.47s...............
2024-06-07 20:13:41,116:INFO:PyCaret ClassificationExperiment
2024-06-07 20:13:41,116:INFO:Logging name: clf-default-name
2024-06-07 20:13:41,116:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-07 20:13:41,117:INFO:version 3.3.2
2024-06-07 20:13:41,117:INFO:Initializing setup()
2024-06-07 20:13:41,117:INFO:self.USI: 893e
2024-06-07 20:13:41,117:INFO:self._variable_keys: {'html_param', 'fix_imbalance', 'fold_generator', 'fold_groups_param', 'X_test', 'log_plots_param', 'X_train', 'y_test', 'USI', 'seed', 'y', 'target_param', 'is_multiclass', 'logging_param', 'pipeline', 'fold_shuffle_param', 'data', '_available_plots', '_ml_usecase', 'memory', 'y_train', 'exp_id', 'X', 'idx', 'exp_name_log', 'gpu_param', 'n_jobs_param', 'gpu_n_jobs_param'}
2024-06-07 20:13:41,117:INFO:Checking environment
2024-06-07 20:13:41,117:INFO:python_version: 3.10.0
2024-06-07 20:13:41,117:INFO:python_build: ('tags/v3.10.0:b494f59', 'Oct  4 2021 19:00:18')
2024-06-07 20:13:41,117:INFO:machine: AMD64
2024-06-07 20:13:41,118:INFO:platform: Windows-10-10.0.22631-SP0
2024-06-07 20:13:41,124:INFO:Memory: svmem(total=16993001472, available=6598332416, percent=61.2, used=10394669056, free=6598332416)
2024-06-07 20:13:41,124:INFO:Physical Core: 6
2024-06-07 20:13:41,124:INFO:Logical Core: 12
2024-06-07 20:13:41,124:INFO:Checking libraries
2024-06-07 20:13:41,124:INFO:System:
2024-06-07 20:13:41,124:INFO:    python: 3.10.0 (tags/v3.10.0:b494f59, Oct  4 2021, 19:00:18) [MSC v.1929 64 bit (AMD64)]
2024-06-07 20:13:41,125:INFO:executable: d:\projects\research\.venv\Scripts\python.exe
2024-06-07 20:13:41,125:INFO:   machine: Windows-10-10.0.22631-SP0
2024-06-07 20:13:41,126:INFO:PyCaret required dependencies:
2024-06-07 20:13:41,126:INFO:                 pip: 24.0
2024-06-07 20:13:41,126:INFO:          setuptools: 57.4.0
2024-06-07 20:13:41,126:INFO:             pycaret: 3.3.2
2024-06-07 20:13:41,126:INFO:             IPython: 8.23.0
2024-06-07 20:13:41,126:INFO:          ipywidgets: 8.1.2
2024-06-07 20:13:41,126:INFO:                tqdm: 4.66.2
2024-06-07 20:13:41,126:INFO:               numpy: 1.26.3
2024-06-07 20:13:41,126:INFO:              pandas: 2.1.4
2024-06-07 20:13:41,126:INFO:              jinja2: 3.1.2
2024-06-07 20:13:41,126:INFO:               scipy: 1.11.4
2024-06-07 20:13:41,126:INFO:              joblib: 1.3.2
2024-06-07 20:13:41,126:INFO:             sklearn: 1.4.2
2024-06-07 20:13:41,126:INFO:                pyod: 1.1.3
2024-06-07 20:13:41,126:INFO:            imblearn: 0.12.2
2024-06-07 20:13:41,126:INFO:   category_encoders: 2.6.3
2024-06-07 20:13:41,126:INFO:            lightgbm: 4.3.0
2024-06-07 20:13:41,126:INFO:               numba: 0.59.1
2024-06-07 20:13:41,127:INFO:            requests: 2.31.0
2024-06-07 20:13:41,127:INFO:          matplotlib: 3.7.5
2024-06-07 20:13:41,127:INFO:          scikitplot: 0.3.7
2024-06-07 20:13:41,127:INFO:         yellowbrick: 1.5
2024-06-07 20:13:41,127:INFO:              plotly: 5.22.0
2024-06-07 20:13:41,127:INFO:    plotly-resampler: Not installed
2024-06-07 20:13:41,127:INFO:             kaleido: 0.2.1
2024-06-07 20:13:41,127:INFO:           schemdraw: 0.15
2024-06-07 20:13:41,127:INFO:         statsmodels: 0.14.2
2024-06-07 20:13:41,127:INFO:              sktime: 0.26.0
2024-06-07 20:13:41,127:INFO:               tbats: 1.1.3
2024-06-07 20:13:41,127:INFO:            pmdarima: 2.0.4
2024-06-07 20:13:41,127:INFO:              psutil: 5.9.8
2024-06-07 20:13:41,127:INFO:          markupsafe: 2.1.3
2024-06-07 20:13:41,127:INFO:             pickle5: Not installed
2024-06-07 20:13:41,127:INFO:         cloudpickle: 3.0.0
2024-06-07 20:13:41,128:INFO:         deprecation: 2.1.0
2024-06-07 20:13:41,128:INFO:              xxhash: 3.4.1
2024-06-07 20:13:41,128:INFO:           wurlitzer: Not installed
2024-06-07 20:13:41,128:INFO:PyCaret optional dependencies:
2024-06-07 20:13:41,128:INFO:                shap: Not installed
2024-06-07 20:13:41,128:INFO:           interpret: Not installed
2024-06-07 20:13:41,128:INFO:                umap: Not installed
2024-06-07 20:13:41,128:INFO:     ydata_profiling: Not installed
2024-06-07 20:13:41,128:INFO:  explainerdashboard: Not installed
2024-06-07 20:13:41,128:INFO:             autoviz: Not installed
2024-06-07 20:13:41,128:INFO:           fairlearn: Not installed
2024-06-07 20:13:41,128:INFO:          deepchecks: Not installed
2024-06-07 20:13:41,128:INFO:             xgboost: 2.0.3
2024-06-07 20:13:41,128:INFO:            catboost: Not installed
2024-06-07 20:13:41,128:INFO:              kmodes: Not installed
2024-06-07 20:13:41,128:INFO:             mlxtend: Not installed
2024-06-07 20:13:41,129:INFO:       statsforecast: Not installed
2024-06-07 20:13:41,129:INFO:        tune_sklearn: Not installed
2024-06-07 20:13:41,129:INFO:                 ray: Not installed
2024-06-07 20:13:41,129:INFO:            hyperopt: Not installed
2024-06-07 20:13:41,129:INFO:              optuna: 3.6.1
2024-06-07 20:13:41,129:INFO:               skopt: Not installed
2024-06-07 20:13:41,129:INFO:              mlflow: 2.13.0
2024-06-07 20:13:41,129:INFO:              gradio: 4.31.4
2024-06-07 20:13:41,129:INFO:             fastapi: 0.111.0
2024-06-07 20:13:41,129:INFO:             uvicorn: 0.29.0
2024-06-07 20:13:41,129:INFO:              m2cgen: 0.10.0
2024-06-07 20:13:41,129:INFO:           evidently: 0.4.23
2024-06-07 20:13:41,129:INFO:               fugue: 0.8.7
2024-06-07 20:13:41,129:INFO:           streamlit: Not installed
2024-06-07 20:13:41,129:INFO:             prophet: Not installed
2024-06-07 20:13:41,130:INFO:None
2024-06-07 20:13:41,130:INFO:Set up data.
2024-06-07 20:13:41,293:INFO:Set up folding strategy.
2024-06-07 20:13:41,293:INFO:Set up train/test split.
2024-06-07 20:13:41,482:INFO:Set up index.
2024-06-07 20:13:41,487:INFO:Assigning column types.
2024-06-07 20:13:41,734:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-07 20:13:41,795:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-07 20:13:41,795:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:41,835:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:41,839:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:41,900:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-07 20:13:41,901:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:41,940:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:41,943:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:41,944:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-07 20:13:42,007:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:42,046:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:42,049:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:42,112:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-07 20:13:42,150:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:42,154:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:42,154:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-07 20:13:42,255:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:42,257:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:42,357:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:42,357:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:42,357:INFO:Preparing preprocessing pipeline...
2024-06-07 20:13:42,399:INFO:Set up label encoding.
2024-06-07 20:13:42,399:INFO:Set up simple imputation.
2024-06-07 20:13:42,907:INFO:Finished creating preprocessing pipeline.
2024-06-07 20:13:42,925:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bhatn\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['0', '1', '2', '3', '4', '5', '6',
                                             '7', '8', '9', '10', '11', '12',
                                             '13', '14', '15', '16', '17', '18',
                                             '19', '20', '21',...
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2024-06-07 20:13:42,926:INFO:Creating final display dataframe.
2024-06-07 20:13:44,515:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target               Cat
2                   Target type            Binary
3                Target mapping       LM: 0, M: 1
4           Original data shape      (14101, 344)
5        Transformed data shape      (14101, 344)
6   Transformed train set shape      (13959, 344)
7    Transformed test set shape        (142, 344)
8              Numeric features               343
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13               Fold Generator   StratifiedKFold
14                  Fold Number                10
15                     CPU Jobs                -1
16                      Use GPU             False
17               Log Experiment             False
18              Experiment Name  clf-default-name
19                          USI              893e
2024-06-07 20:13:44,657:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:44,661:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:44,757:INFO:Soft dependency imported: xgboost: 2.0.3
2024-06-07 20:13:44,757:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-07 20:13:44,757:INFO:setup() successfully completed in 3.67s...............
